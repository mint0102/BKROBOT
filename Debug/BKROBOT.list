
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006624  08006624  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006624  08006624  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006624  08006624  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800662c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000018  08006644  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006644  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149ec  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003628  00000000  00000000  00034a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00038098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbd  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2eb  00000000  00000000  0003a47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aee0  00000000  00000000  00056768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2a80  00000000  00000000  00071648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005288  00000000  00000000  001140c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00119350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	080065e0 	.word	0x080065e0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	080065e0 	.word	0x080065e0

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000236:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <MX_ADC1_Init+0x140>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b49      	ldr	r3, [pc, #292]	; (8000360 <MX_ADC1_Init+0x13c>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b47      	ldr	r3, [pc, #284]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <MX_ADC1_Init+0x13c>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b44      	ldr	r3, [pc, #272]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b42      	ldr	r3, [pc, #264]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800025c:	4b40      	ldr	r3, [pc, #256]	; (8000360 <MX_ADC1_Init+0x13c>)
 800025e:	2208      	movs	r2, #8
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	483f      	ldr	r0, [pc, #252]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000264:	f001 fe26 	bl	8001eb4 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fd63 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000272:	2308      	movs	r3, #8
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800027a:	2303      	movs	r3, #3
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4837      	ldr	r0, [pc, #220]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000284:	f001 ff00 	bl	8002088 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fd53 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000292:	2309      	movs	r3, #9
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4830      	ldr	r0, [pc, #192]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002a0:	f001 fef2 	bl	8002088 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fd45 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002bc:	f001 fee4 	bl	8002088 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fd37 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002ca:	230b      	movs	r3, #11
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	4822      	ldr	r0, [pc, #136]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002d8:	f001 fed6 	bl	8002088 <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002e2:	f000 fd29 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002e6:	230c      	movs	r3, #12
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002ea:	2305      	movs	r3, #5
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	481b      	ldr	r0, [pc, #108]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002f4:	f001 fec8 	bl	8002088 <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002fe:	f000 fd1b 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000302:	230d      	movs	r3, #13
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000306:	2306      	movs	r3, #6
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4814      	ldr	r0, [pc, #80]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000310:	f001 feba 	bl	8002088 <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800031a:	f000 fd0d 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800031e:	230e      	movs	r3, #14
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000322:	2307      	movs	r3, #7
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x13c>)
 800032c:	f001 feac 	bl	8002088 <HAL_ADC_ConfigChannel>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000336:	f000 fcff 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800033e:	2308      	movs	r3, #8
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000348:	f001 fe9e 	bl	8002088 <HAL_ADC_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000352:	f000 fcf1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000034 	.word	0x20000034
 8000364:	40012400 	.word	0x40012400

08000368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a33      	ldr	r2, [pc, #204]	; (8000450 <HAL_ADC_MspInit+0xe8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d15f      	bne.n	8000448 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <HAL_ADC_MspInit+0xec>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a25      	ldr	r2, [pc, #148]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003d0:	233f      	movs	r3, #63	; 0x3f
 80003d2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d4:	2303      	movs	r3, #3
 80003d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4619      	mov	r1, r3
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <HAL_ADC_MspInit+0xf0>)
 80003e0:	f002 fc90 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4619      	mov	r1, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <HAL_ADC_MspInit+0xf4>)
 80003f4:	f002 fc86 	bl	8002d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <HAL_ADC_MspInit+0xfc>)
 80003fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800042e:	f002 f873 	bl	8002518 <HAL_DMA_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000438:	f000 fc7e 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000440:	621a      	str	r2, [r3, #32]
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40012400 	.word	0x40012400
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010c00 	.word	0x40010c00
 8000460:	20000064 	.word	0x20000064
 8000464:	40020008 	.word	0x40020008

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_DMA_Init+0x38>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	200b      	movs	r0, #11
 800048c:	f002 f80d 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	200b      	movs	r0, #11
 8000492:	f002 f826 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	220a      	movs	r2, #10
 80004ac:	21aa      	movs	r1, #170	; 0xaa
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <gamepad_init+0x34>)
 80004b0:	f003 f99e 	bl	80037f0 <HAL_I2C_IsDeviceReady>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <gamepad_init+0x1a>
 80004ba:	2300      	movs	r3, #0
 80004bc:	e009      	b.n	80004d2 <gamepad_init+0x2e>
	is_receiver_connect = 1;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <gamepad_init+0x38>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <gamepad_init+0x3c>)
 80004cc:	f002 fdae 	bl	800302c <HAL_GPIO_WritePin>
	return 1;
 80004d0:	2301      	movs	r3, #1
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000fc 	.word	0x200000fc
 80004dc:	200000a8 	.word	0x200000a8
 80004e0:	40011000 	.word	0x40011000

080004e4 <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	021b      	lsls	r3, r3, #8
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	4313      	orrs	r3, r2
 8000500:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 8000502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000506:	2b00      	cmp	r3, #0
 8000508:	da02      	bge.n	8000510 <_read_16+0x2c>
        return (raw - (1 << 16));
 800050a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800050e:	e001      	b.n	8000514 <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 8000510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 800051e:	b490      	push	{r4, r7}
 8000520:	b084      	sub	sp, #16
 8000522:	af00      	add	r7, sp, #0
 8000524:	4604      	mov	r4, r0
 8000526:	4608      	mov	r0, r1
 8000528:	4611      	mov	r1, r2
 800052a:	461a      	mov	r2, r3
 800052c:	4623      	mov	r3, r4
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4603      	mov	r3, r0
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	460b      	mov	r3, r1
 8000536:	717b      	strb	r3, [r7, #5]
 8000538:	4613      	mov	r3, r2
 800053a:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	061a      	lsls	r2, r3, #24
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	041b      	lsls	r3, r3, #16
 8000544:	431a      	orrs	r2, r3
 8000546:	797b      	ldrb	r3, [r7, #5]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	431a      	orrs	r2, r3
 800054c:	793b      	ldrb	r3, [r7, #4]
 800054e:	4313      	orrs	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da01      	bge.n	800055c <_read_32+0x3e>
        return (raw - (1 << 32));
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	e000      	b.n	800055e <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 800055c:	68fb      	ldr	r3, [r7, #12]
    }
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr

08000568 <_convert_data>:

void _convert_data(){
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 800056c:	4b57      	ldr	r3, [pc, #348]	; (80006cc <_convert_data+0x164>)
 800056e:	f993 3000 	ldrsb.w	r3, [r3]
 8000572:	10db      	asrs	r3, r3, #3
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <_convert_data+0x168>)
 8000580:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 8000582:	4b52      	ldr	r3, [pc, #328]	; (80006cc <_convert_data+0x164>)
 8000584:	f993 3000 	ldrsb.w	r3, [r3]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b50      	ldr	r3, [pc, #320]	; (80006d4 <_convert_data+0x16c>)
 8000592:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 8000594:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <_convert_data+0x164>)
 8000596:	f993 3000 	ldrsb.w	r3, [r3]
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <_convert_data+0x170>)
 80005a8:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 80005aa:	4b48      	ldr	r3, [pc, #288]	; (80006cc <_convert_data+0x164>)
 80005ac:	f993 3000 	ldrsb.w	r3, [r3]
 80005b0:	109b      	asrs	r3, r3, #2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b47      	ldr	r3, [pc, #284]	; (80006dc <_convert_data+0x174>)
 80005be:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <_convert_data+0x178>)
 80005c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c6:	121b      	asrs	r3, r3, #8
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <_convert_data+0x17c>)
 80005d4:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <_convert_data+0x178>)
 80005d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005dc:	125b      	asrs	r3, r3, #9
 80005de:	b21b      	sxth	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <_convert_data+0x180>)
 80005ea:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <_convert_data+0x178>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <_convert_data+0x184>)
 80005fc:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <_convert_data+0x178>)
 8000600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000604:	105b      	asrs	r3, r3, #1
 8000606:	b21b      	sxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <_convert_data+0x188>)
 8000612:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <_convert_data+0x178>)
 8000616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800061a:	109b      	asrs	r3, r3, #2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <_convert_data+0x18c>)
 8000628:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <_convert_data+0x178>)
 800062c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000630:	10db      	asrs	r3, r3, #3
 8000632:	b21b      	sxth	r3, r3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <_convert_data+0x190>)
 800063e:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <_convert_data+0x178>)
 8000642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000646:	111b      	asrs	r3, r3, #4
 8000648:	b21b      	sxth	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <_convert_data+0x194>)
 8000654:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <_convert_data+0x178>)
 8000658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800065c:	115b      	asrs	r3, r3, #5
 800065e:	b21b      	sxth	r3, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <_convert_data+0x198>)
 800066a:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <_convert_data+0x178>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	119b      	asrs	r3, r3, #6
 8000674:	b21b      	sxth	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <_convert_data+0x19c>)
 8000680:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <_convert_data+0x178>)
 8000684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000688:	11db      	asrs	r3, r3, #7
 800068a:	b21b      	sxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <_convert_data+0x1a0>)
 8000696:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <_convert_data+0x178>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	105b      	asrs	r3, r3, #1
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <_convert_data+0x1a4>)
 80006ac:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <_convert_data+0x178>)
 80006b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b4:	109b      	asrs	r3, r3, #2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <_convert_data+0x1a8>)
 80006c2:	701a      	strb	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	200000ce 	.word	0x200000ce
 80006d0:	200000ec 	.word	0x200000ec
 80006d4:	200000ed 	.word	0x200000ed
 80006d8:	200000ee 	.word	0x200000ee
 80006dc:	200000ef 	.word	0x200000ef
 80006e0:	200000e8 	.word	0x200000e8
 80006e4:	200000fa 	.word	0x200000fa
 80006e8:	200000fb 	.word	0x200000fb
 80006ec:	200000f0 	.word	0x200000f0
 80006f0:	200000f1 	.word	0x200000f1
 80006f4:	200000f2 	.word	0x200000f2
 80006f8:	200000f3 	.word	0x200000f3
 80006fc:	200000f4 	.word	0x200000f4
 8000700:	200000f5 	.word	0x200000f5
 8000704:	200000f6 	.word	0x200000f6
 8000708:	200000f7 	.word	0x200000f7
 800070c:	200000f8 	.word	0x200000f8
 8000710:	200000f9 	.word	0x200000f9

08000714 <gamepad_update>:

void gamepad_update(){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <gamepad_update+0x120>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	f000 8085 	beq.w	800082e <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	231e      	movs	r3, #30
 800072a:	4a43      	ldr	r2, [pc, #268]	; (8000838 <gamepad_update+0x124>)
 800072c:	21aa      	movs	r1, #170	; 0xaa
 800072e:	4843      	ldr	r0, [pc, #268]	; (800083c <gamepad_update+0x128>)
 8000730:	f002 fdf2 	bl	8003318 <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 8000734:	4b40      	ldr	r3, [pc, #256]	; (8000838 <gamepad_update+0x124>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d103      	bne.n	8000744 <gamepad_update+0x30>
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <gamepad_update+0x12c>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e002      	b.n	800074a <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 8000744:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <gamepad_update+0x12c>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <gamepad_update+0x12c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d16a      	bne.n	8000828 <gamepad_update+0x114>
		dpad = result[1];
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <gamepad_update+0x124>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <gamepad_update+0x130>)
 800075a:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <gamepad_update+0x124>)
 800075e:	7898      	ldrb	r0, [r3, #2]
 8000760:	4b35      	ldr	r3, [pc, #212]	; (8000838 <gamepad_update+0x124>)
 8000762:	78d9      	ldrb	r1, [r3, #3]
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <gamepad_update+0x124>)
 8000766:	791a      	ldrb	r2, [r3, #4]
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <gamepad_update+0x124>)
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	f7ff fed7 	bl	800051e <_read_32>
 8000770:	4603      	mov	r3, r0
 8000772:	4a35      	ldr	r2, [pc, #212]	; (8000848 <gamepad_update+0x134>)
 8000774:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <gamepad_update+0x124>)
 8000778:	7998      	ldrb	r0, [r3, #6]
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <gamepad_update+0x124>)
 800077c:	79d9      	ldrb	r1, [r3, #7]
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <gamepad_update+0x124>)
 8000780:	7a1a      	ldrb	r2, [r3, #8]
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <gamepad_update+0x124>)
 8000784:	7a5b      	ldrb	r3, [r3, #9]
 8000786:	f7ff feca 	bl	800051e <_read_32>
 800078a:	4603      	mov	r3, r0
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <gamepad_update+0x138>)
 800078e:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <gamepad_update+0x124>)
 8000792:	7a98      	ldrb	r0, [r3, #10]
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <gamepad_update+0x124>)
 8000796:	7ad9      	ldrb	r1, [r3, #11]
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <gamepad_update+0x124>)
 800079a:	7b1a      	ldrb	r2, [r3, #12]
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <gamepad_update+0x124>)
 800079e:	7b5b      	ldrb	r3, [r3, #13]
 80007a0:	f7ff febd 	bl	800051e <_read_32>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <gamepad_update+0x13c>)
 80007a8:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <gamepad_update+0x124>)
 80007ac:	7b98      	ldrb	r0, [r3, #14]
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <gamepad_update+0x124>)
 80007b0:	7bd9      	ldrb	r1, [r3, #15]
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <gamepad_update+0x124>)
 80007b4:	7c1a      	ldrb	r2, [r3, #16]
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <gamepad_update+0x124>)
 80007b8:	7c5b      	ldrb	r3, [r3, #17]
 80007ba:	f7ff feb0 	bl	800051e <_read_32>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a24      	ldr	r2, [pc, #144]	; (8000854 <gamepad_update+0x140>)
 80007c2:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <gamepad_update+0x124>)
 80007c6:	7c98      	ldrb	r0, [r3, #18]
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <gamepad_update+0x124>)
 80007ca:	7cd9      	ldrb	r1, [r3, #19]
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <gamepad_update+0x124>)
 80007ce:	7d1a      	ldrb	r2, [r3, #20]
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <gamepad_update+0x124>)
 80007d2:	7d5b      	ldrb	r3, [r3, #21]
 80007d4:	f7ff fea3 	bl	800051e <_read_32>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <gamepad_update+0x144>)
 80007dc:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <gamepad_update+0x124>)
 80007e0:	7d98      	ldrb	r0, [r3, #22]
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <gamepad_update+0x124>)
 80007e4:	7dd9      	ldrb	r1, [r3, #23]
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <gamepad_update+0x124>)
 80007e8:	7e1a      	ldrb	r2, [r3, #24]
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <gamepad_update+0x124>)
 80007ec:	7e5b      	ldrb	r3, [r3, #25]
 80007ee:	f7ff fe96 	bl	800051e <_read_32>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <gamepad_update+0x148>)
 80007f6:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <gamepad_update+0x124>)
 80007fa:	7e9b      	ldrb	r3, [r3, #26]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <gamepad_update+0x124>)
 80007fe:	7ed2      	ldrb	r2, [r2, #27]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe6e 	bl	80004e4 <_read_16>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <gamepad_update+0x14c>)
 800080e:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <gamepad_update+0x124>)
 8000812:	7f1b      	ldrb	r3, [r3, #28]
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <gamepad_update+0x124>)
 8000816:	7f52      	ldrb	r2, [r2, #29]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe62 	bl	80004e4 <_read_16>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <gamepad_update+0x150>)
 8000826:	801a      	strh	r2, [r3, #0]
	}

	_convert_data();
 8000828:	f7ff fe9e 	bl	8000568 <_convert_data>
 800082c:	e000      	b.n	8000830 <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 800082e:	bf00      	nop
}
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000a8 	.word	0x200000a8
 8000838:	200000b0 	.word	0x200000b0
 800083c:	200000fc 	.word	0x200000fc
 8000840:	200000ac 	.word	0x200000ac
 8000844:	200000ce 	.word	0x200000ce
 8000848:	200000d0 	.word	0x200000d0
 800084c:	200000d4 	.word	0x200000d4
 8000850:	200000d8 	.word	0x200000d8
 8000854:	200000dc 	.word	0x200000dc
 8000858:	200000e0 	.word	0x200000e0
 800085c:	200000e4 	.word	0x200000e4
 8000860:	200000e8 	.word	0x200000e8
 8000864:	200000ea 	.word	0x200000ea

08000868 <gamepad_run_tele>:

    return dir;
}


void gamepad_run_tele(){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	int my_dir = -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	607b      	str	r3, [r7, #4]
	if(b) {
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <gamepad_run_tele+0x6c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <gamepad_run_tele+0x1c>
		servo_set_angle(SERVO1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fc5a 	bl	8001138 <servo_set_angle>
	}
	if(x){
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <gamepad_run_tele+0x70>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <gamepad_run_tele+0x2c>
		servo_set_angle(SERVO1, 45);
 800088c:	212d      	movs	r1, #45	; 0x2d
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fc52 	bl	8001138 <servo_set_angle>
	}
	if(dpad_up){
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <gamepad_run_tele+0x74>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <gamepad_run_tele+0x38>
		my_dir = ROBOT_DIR_FW;
 800089c:	2303      	movs	r3, #3
 800089e:	607b      	str	r3, [r7, #4]
	}
	if(dpad_down){
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <gamepad_run_tele+0x78>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <gamepad_run_tele+0x44>
		my_dir = ROBOT_DIR_BW;
 80008a8:	2309      	movs	r3, #9
 80008aa:	607b      	str	r3, [r7, #4]
	}
	if(dpad_left){
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <gamepad_run_tele+0x7c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <gamepad_run_tele+0x50>
		my_dir = ROBOT_DIR_L;
 80008b4:	230a      	movs	r3, #10
 80008b6:	607b      	str	r3, [r7, #4]
	}
	if(dpad_right){
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <gamepad_run_tele+0x80>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <gamepad_run_tele+0x5c>
		my_dir = ROBOT_DIR_R;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
	}
	runDir(my_dir);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fbdd 	bl	8001084 <runDir>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f1 	.word	0x200000f1
 80008d8:	200000f2 	.word	0x200000f2
 80008dc:	200000ed 	.word	0x200000ed
 80008e0:	200000ee 	.word	0x200000ee
 80008e4:	200000ec 	.word	0x200000ec
 80008e8:	200000ef 	.word	0x200000ef

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a51      	ldr	r2, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <MX_GPIO_Init+0x160>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	4b4c      	ldr	r3, [pc, #304]	; (8000a4c <MX_GPIO_Init+0x160>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a4b      	ldr	r2, [pc, #300]	; (8000a4c <MX_GPIO_Init+0x160>)
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a45      	ldr	r2, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x160>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <MX_GPIO_Init+0x160>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <MX_GPIO_Init+0x160>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x160>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000966:	483a      	ldr	r0, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x164>)
 8000968:	f002 fb60 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 800096c:	2200      	movs	r2, #0
 800096e:	f649 1102 	movw	r1, #39170	; 0x9902
 8000972:	4838      	ldr	r0, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000974:	f002 fb5a 	bl	800302c <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2124      	movs	r1, #36	; 0x24
 800097c:	4836      	ldr	r0, [pc, #216]	; (8000a58 <MX_GPIO_Init+0x16c>)
 800097e:	f002 fb55 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 8000982:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	482d      	ldr	r0, [pc, #180]	; (8000a50 <MX_GPIO_Init+0x164>)
 800099c:	f002 f9b2 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80009a0:	f649 1302 	movw	r3, #39170	; 0x9902
 80009a4:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	4619      	mov	r1, r3
 80009b8:	4826      	ldr	r0, [pc, #152]	; (8000a54 <MX_GPIO_Init+0x168>)
 80009ba:	f002 f9a3 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_GPIO_Init+0x16c>)
 80009d6:	f002 f995 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80009da:	f24f 2308 	movw	r3, #61960	; 0xf208
 80009de:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	481a      	ldr	r0, [pc, #104]	; (8000a58 <MX_GPIO_Init+0x16c>)
 80009f0:	f002 f988 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80009f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <MX_GPIO_Init+0x164>)
 8000a0a:	f002 f97b 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000a22:	f002 f96f 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_GPIO_Init+0x16c>)
 8000a3e:	f002 f961 	bl	8002d04 <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011400 	.word	0x40011400

08000a60 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C2_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C2_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a9e:	f002 faf7 	bl	8003090 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f946 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000fc 	.word	0x200000fc
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <HAL_I2C_MspInit+0x74>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d124      	bne.n	8000b26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000af4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_I2C_MspInit+0x7c>)
 8000b0a:	f002 f8fb 	bl	8002d04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f001 f956 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f84e 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff fed0 	bl	80008ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4c:	f7ff fc8c 	bl	8000468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b50:	f7ff fb68 	bl	8000224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b54:	f001 f83e 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b58:	f001 f866 	bl	8001c28 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000b5c:	f7ff ff80 	bl	8000a60 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b60:	f000 fb74 	bl	800124c <MX_SPI1_Init>
  MX_TIM8_Init();
 8000b64:	f000 fe4a 	bl	80017fc <MX_TIM8_Init>
  MX_TIM4_Init();
 8000b68:	f000 fd44 	bl	80015f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b6c:	f000 fdd0 	bl	8001710 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000b70:	f000 fc7e 	bl	8001470 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b74:	f000 fcc8 	bl	8001508 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b78:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <main+0x9c>)
 8000b7a:	f003 ff47 	bl	8004a0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4816      	ldr	r0, [pc, #88]	; (8000bdc <main+0xa0>)
 8000b82:	f003 fffb 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b86:	2104      	movs	r1, #4
 8000b88:	4814      	ldr	r0, [pc, #80]	; (8000bdc <main+0xa0>)
 8000b8a:	f003 fff7 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <main+0xa0>)
 8000b92:	f003 fff3 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b96:	210c      	movs	r1, #12
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <main+0xa0>)
 8000b9a:	f003 ffef 	bl	8004b7c <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 8000b9e:	210a      	movs	r1, #10
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fb13 	bl	80011cc <setTimer>
  setTimer(1, 1000);
 8000ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000baa:	2001      	movs	r0, #1
 8000bac:	f000 fb0e 	bl	80011cc <setTimer>
  servo_init(SERVO1);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 faad 	bl	8001110 <servo_init>
  gamepad_init();
 8000bb6:	f7ff fc75 	bl	80004a4 <gamepad_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <main+0xa4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d1fb      	bne.n	8000bba <main+0x7e>
		  setTimer(0, 10);
 8000bc2:	210a      	movs	r1, #10
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 fb01 	bl	80011cc <setTimer>
		  ledBlink();
 8000bca:	f000 f89b 	bl	8000d04 <ledBlink>
		  gamepad_update();
 8000bce:	f7ff fda1 	bl	8000714 <gamepad_update>
		  gamepad_run_tele();
 8000bd2:	f7ff fe49 	bl	8000868 <gamepad_run_tele>
	  if(timer_flag[0] == 1){
 8000bd6:	e7f0      	b.n	8000bba <main+0x7e>
 8000bd8:	20000254 	.word	0x20000254
 8000bdc:	20000374 	.word	0x20000374
 8000be0:	200001ac 	.word	0x200001ac

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	; 0x58
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 fcc8 	bl	8006588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f94a 	bl	8003ed8 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f875 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fbb6 	bl	80043dc <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c76:	f000 f85f 	bl	8000d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fd36 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c92:	f000 f851 	bl	8000d38 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3758      	adds	r7, #88	; 0x58
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cae:	d105      	bne.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0x1e>
		timerRun(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 faa3 	bl	80011fc <timerRun>
		timerRun(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 faa0 	bl	80011fc <timerRun>
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000cde:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dc03      	bgt.n	8000cf0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000cec:	f004 f800 	bl	8004cf0 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40000400 	.word	0x40000400
 8000cfc:	20000150 	.word	0x20000150
 8000d00:	2000029c 	.word	0x2000029c

08000d04 <ledBlink>:

int led_debug_count = 0;
void ledBlink(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	led_debug_count++;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <ledBlink+0x2c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <ledBlink+0x2c>)
 8000d10:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <ledBlink+0x2c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d107      	bne.n	8000d2a <ledBlink+0x26>
		led_debug_count = 0;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <ledBlink+0x2c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <ledBlink+0x30>)
 8000d26:	f002 f999 	bl	800305c <HAL_GPIO_TogglePin>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000154 	.word	0x20000154
 8000d34:	40011000 	.word	0x40011000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <setSpeed>:
#define 	DOWN 		0
#define 	SPEED		50

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <setSpeed+0x70>)
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	7013      	strb	r3, [r2, #0]
	switch (dc){
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d822      	bhi.n	8000da8 <setSpeed+0x64>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <setSpeed+0x24>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000d9d 	.word	0x08000d9d
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <setSpeed+0x70>)
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <setSpeed+0x74>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d82:	e011      	b.n	8000da8 <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <setSpeed+0x70>)
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <setSpeed+0x74>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000d8e:	e00b      	b.n	8000da8 <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <setSpeed+0x70>)
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <setSpeed+0x74>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000d9a:	e005      	b.n	8000da8 <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <setSpeed+0x70>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <setSpeed+0x74>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000da6:	bf00      	nop
	}
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000158 	.word	0x20000158
 8000db8:	20000374 	.word	0x20000374

08000dbc <dc1Move>:

void dc1Move(int duty_cycle){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <dc1Move+0x50>)
 8000dd2:	f002 f92b 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff ffb1 	bl	8000d44 <setSpeed>
	}
	if(duty_cycle < 0){
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da0d      	bge.n	8000e04 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <dc1Move+0x50>)
 8000df0:	f002 f91c 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	425b      	negs	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ffa0 	bl	8000d44 <setSpeed>
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40011000 	.word	0x40011000

08000e10 <dc2Move>:

void dc2Move(int duty_cycle){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e24:	480e      	ldr	r0, [pc, #56]	; (8000e60 <dc2Move+0x50>)
 8000e26:	f002 f901 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff ff87 	bl	8000d44 <setSpeed>
	}
	if(duty_cycle < 0){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da0d      	bge.n	8000e58 <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <dc2Move+0x50>)
 8000e44:	f002 f8f2 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	2002      	movs	r0, #2
 8000e54:	f7ff ff76 	bl	8000d44 <setSpeed>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40011000 	.word	0x40011000

08000e64 <dc3Move>:

void dc3Move(int duty_cycle){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0a      	blt.n	8000e88 <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2104      	movs	r1, #4
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <dc3Move+0x4c>)
 8000e78:	f002 f8d8 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	2003      	movs	r0, #3
 8000e84:	f7ff ff5e 	bl	8000d44 <setSpeed>
	}
	if(duty_cycle < 0){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da0c      	bge.n	8000ea8 <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2104      	movs	r1, #4
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <dc3Move+0x4c>)
 8000e94:	f002 f8ca 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f7ff ff4e 	bl	8000d44 <setSpeed>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <dc4Move>:

void dc4Move(int duty_cycle){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0a      	blt.n	8000ed8 <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <dc4Move+0x4c>)
 8000ec8:	f002 f8b0 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f7ff ff36 	bl	8000d44 <setSpeed>
	}
	if(duty_cycle < 0){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da0c      	bge.n	8000ef8 <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <dc4Move+0x4c>)
 8000ee4:	f002 f8a2 	bl	800302c <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff ff26 	bl	8000d44 <setSpeed>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800

08000f04 <stop>:


void stop(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	dc1Move(0);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff ff57 	bl	8000dbc <dc1Move>
	dc2Move(0);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ff7e 	bl	8000e10 <dc2Move>
	dc3Move(0);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ffa5 	bl	8000e64 <dc3Move>
	dc4Move(0);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffca 	bl	8000eb4 <dc4Move>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <forward>:

void forward(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8000f28:	2032      	movs	r0, #50	; 0x32
 8000f2a:	f7ff ff47 	bl	8000dbc <dc1Move>
	dc2Move(SPEED);
 8000f2e:	2032      	movs	r0, #50	; 0x32
 8000f30:	f7ff ff6e 	bl	8000e10 <dc2Move>
	dc3Move(SPEED);
 8000f34:	2032      	movs	r0, #50	; 0x32
 8000f36:	f7ff ff95 	bl	8000e64 <dc3Move>
	dc4Move(SPEED);
 8000f3a:	2032      	movs	r0, #50	; 0x32
 8000f3c:	f7ff ffba 	bl	8000eb4 <dc4Move>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <backwards>:

void backwards(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8000f48:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000f4c:	f7ff ff36 	bl	8000dbc <dc1Move>
	dc2Move(-SPEED);
 8000f50:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000f54:	f7ff ff5c 	bl	8000e10 <dc2Move>
	dc3Move(-SPEED);
 8000f58:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000f5c:	f7ff ff82 	bl	8000e64 <dc3Move>
	dc4Move(-SPEED);
 8000f60:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000f64:	f7ff ffa6 	bl	8000eb4 <dc4Move>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <frontLeft>:

void frontLeft(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff ff23 	bl	8000dbc <dc1Move>
	dc2Move(SPEED);
 8000f76:	2032      	movs	r0, #50	; 0x32
 8000f78:	f7ff ff4a 	bl	8000e10 <dc2Move>
	dc3Move(SPEED);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f7ff ff71 	bl	8000e64 <dc3Move>
	dc4Move(0); //stop
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff96 	bl	8000eb4 <dc4Move>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <frontRight>:

void frontRight(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8000f90:	2032      	movs	r0, #50	; 0x32
 8000f92:	f7ff ff13 	bl	8000dbc <dc1Move>
	dc2Move(0); //stop
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff ff3a 	bl	8000e10 <dc2Move>
	dc3Move(0); //stop
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ff61 	bl	8000e64 <dc3Move>
	dc4Move(SPEED);
 8000fa2:	2032      	movs	r0, #50	; 0x32
 8000fa4:	f7ff ff86 	bl	8000eb4 <dc4Move>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <backRight>:
void backRight(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ff03 	bl	8000dbc <dc1Move>
	dc2Move(-SPEED);
 8000fb6:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000fba:	f7ff ff29 	bl	8000e10 <dc2Move>
	dc3Move(-SPEED);
 8000fbe:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000fc2:	f7ff ff4f 	bl	8000e64 <dc3Move>
	dc4Move(0); //stop
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff74 	bl	8000eb4 <dc4Move>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <backLeft>:

void backLeft(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8000fd4:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000fd8:	f7ff fef0 	bl	8000dbc <dc1Move>
	dc2Move(0); //stop
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff ff17 	bl	8000e10 <dc2Move>
	dc3Move(0); //stop
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ff3e 	bl	8000e64 <dc3Move>
	dc4Move(-SPEED);
 8000fe8:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000fec:	f7ff ff62 	bl	8000eb4 <dc4Move>

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <right>:

void right(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8000ff8:	2032      	movs	r0, #50	; 0x32
 8000ffa:	f7ff fedf 	bl	8000dbc <dc1Move>
	dc2Move(-SPEED);
 8000ffe:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001002:	f7ff ff05 	bl	8000e10 <dc2Move>
	dc3Move(-SPEED);
 8001006:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800100a:	f7ff ff2b 	bl	8000e64 <dc3Move>
	dc4Move(SPEED);
 800100e:	2032      	movs	r0, #50	; 0x32
 8001010:	f7ff ff50 	bl	8000eb4 <dc4Move>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <left>:

void left(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 800101c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001020:	f7ff fecc 	bl	8000dbc <dc1Move>
	dc2Move(SPEED);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f7ff fef3 	bl	8000e10 <dc2Move>
	dc3Move(SPEED);
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	f7ff ff1a 	bl	8000e64 <dc3Move>
	dc4Move(-SPEED);
 8001030:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001034:	f7ff ff3e 	bl	8000eb4 <dc4Move>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <rotateLeft>:

void rotateLeft(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8001040:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001044:	f7ff feba 	bl	8000dbc <dc1Move>
	dc2Move(-SPEED);
 8001048:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800104c:	f7ff fee0 	bl	8000e10 <dc2Move>
	dc3Move(SPEED);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f7ff ff07 	bl	8000e64 <dc3Move>
	dc4Move(SPEED);
 8001056:	2032      	movs	r0, #50	; 0x32
 8001058:	f7ff ff2c 	bl	8000eb4 <dc4Move>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <rotateRight>:

void rotateRight(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f7ff fea9 	bl	8000dbc <dc1Move>
	dc2Move(SPEED);
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f7ff fed0 	bl	8000e10 <dc2Move>
	dc3Move(-SPEED);
 8001070:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001074:	f7ff fef6 	bl	8000e64 <dc3Move>
	dc4Move(-SPEED);
 8001078:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800107c:	f7ff ff1a 	bl	8000eb4 <dc4Move>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <runDir>:
	else
		count_test = 10;

}

void runDir(int dir){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	switch (dir) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	2b09      	cmp	r3, #9
 8001092:	d835      	bhi.n	8001100 <runDir+0x7c>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <runDir+0x18>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010dd 	.word	0x080010dd
 80010a0:	080010f5 	.word	0x080010f5
 80010a4:	080010c5 	.word	0x080010c5
 80010a8:	080010ef 	.word	0x080010ef
 80010ac:	080010e3 	.word	0x080010e3
 80010b0:	080010e9 	.word	0x080010e9
 80010b4:	080010d1 	.word	0x080010d1
 80010b8:	080010cb 	.word	0x080010cb
 80010bc:	080010fb 	.word	0x080010fb
 80010c0:	080010d7 	.word	0x080010d7
		case ROBOT_DIR_FW:
			forward();
 80010c4:	f7ff ff2e 	bl	8000f24 <forward>
			break;
 80010c8:	e01d      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_SR:
			right();
 80010ca:	f7ff ff93 	bl	8000ff4 <right>
			break;
 80010ce:	e01a      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_SL:
			left();
 80010d0:	f7ff ffa2 	bl	8001018 <left>
			break;
 80010d4:	e017      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_L:
			rotateLeft();
 80010d6:	f7ff ffb1 	bl	800103c <rotateLeft>
			break;
 80010da:	e014      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_R:
			rotateRight();
 80010dc:	f7ff ffc0 	bl	8001060 <rotateRight>
			break;
 80010e0:	e011      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_LB:
			backLeft();
 80010e2:	f7ff ff75 	bl	8000fd0 <backLeft>
			break;
 80010e6:	e00e      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_RB:
			backRight();
 80010e8:	f7ff ff60 	bl	8000fac <backRight>
			break;
 80010ec:	e00b      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_LF:
			frontLeft();
 80010ee:	f7ff ff3d 	bl	8000f6c <frontLeft>
			break;
 80010f2:	e008      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_RF:
			frontRight();
 80010f4:	f7ff ff4a 	bl	8000f8c <frontRight>
			break;
 80010f8:	e005      	b.n	8001106 <runDir+0x82>
		case ROBOT_DIR_BW:
			backwards();
 80010fa:	f7ff ff23 	bl	8000f44 <backwards>
			break;
 80010fe:	e002      	b.n	8001106 <runDir+0x82>
		default:
			stop();
 8001100:	f7ff ff00 	bl	8000f04 <stop>
			break;
 8001104:	bf00      	nop
	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop

08001110 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <servo_init+0x20>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	4619      	mov	r1, r3
 8001122:	4804      	ldr	r0, [pc, #16]	; (8001134 <servo_init+0x24>)
 8001124:	f003 fd2a 	bl	8004b7c <HAL_TIM_PWM_Start>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	200002e4 	.word	0x200002e4

08001138 <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db35      	blt.n	80011b4 <servo_set_angle+0x7c>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2bb4      	cmp	r3, #180	; 0xb4
 800114c:	dc32      	bgt.n	80011b4 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <servo_set_angle+0x88>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	441a      	add	r2, r3
 800115e:	11d2      	asrs	r2, r2, #7
 8001160:	17db      	asrs	r3, r3, #31
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	3319      	adds	r3, #25
 8001166:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <servo_set_angle+0x8c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <servo_set_angle+0x46>
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <servo_set_angle+0x90>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
 800117c:	e01b      	b.n	80011b6 <servo_set_angle+0x7e>
 800117e:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <servo_set_angle+0x8c>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d104      	bne.n	8001194 <servo_set_angle+0x5c>
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <servo_set_angle+0x90>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6393      	str	r3, [r2, #56]	; 0x38
 8001192:	e010      	b.n	80011b6 <servo_set_angle+0x7e>
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <servo_set_angle+0x8c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d104      	bne.n	80011aa <servo_set_angle+0x72>
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <servo_set_angle+0x90>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011a8:	e005      	b.n	80011b6 <servo_set_angle+0x7e>
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <servo_set_angle+0x90>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	e000      	b.n	80011b6 <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 80011b4:	bf00      	nop
}
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	b60b60b7 	.word	0xb60b60b7
 80011c4:	20000000 	.word	0x20000000
 80011c8:	200002e4 	.word	0x200002e4

080011cc <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80011d6:	4907      	ldr	r1, [pc, #28]	; (80011f4 <setTimer+0x28>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <setTimer+0x2c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2100      	movs	r1, #0
 80011e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	2000015c 	.word	0x2000015c
 80011f8:	200001ac 	.word	0x200001ac

080011fc <timerRun>:

void timerRun(int index){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <timerRun+0x48>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd13      	ble.n	8001238 <timerRun+0x3c>
		timer_counter[index]--;
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <timerRun+0x48>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	490a      	ldr	r1, [pc, #40]	; (8001244 <timerRun+0x48>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <timerRun+0x48>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc04      	bgt.n	8001238 <timerRun+0x3c>
			timer_flag[index] = 1;
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <timerRun+0x4c>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2101      	movs	r1, #1
 8001234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000015c 	.word	0x2000015c
 8001248:	200001ac 	.word	0x200001ac

0800124c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001280:	2208      	movs	r2, #8
 8001282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001298:	220a      	movs	r2, #10
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI1_Init+0x64>)
 800129e:	f003 fae1 	bl	8004864 <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a8:	f7ff fd46 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001fc 	.word	0x200001fc
 80012b4:	40013000 	.word	0x40013000

080012b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d12f      	bne.n	8001338 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001308:	23b0      	movs	r3, #176	; 0xb0
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <HAL_SPI_MspInit+0x90>)
 800131c:	f001 fcf2 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_SPI_MspInit+0x90>)
 8001334:	f001 fce6 	bl	8002d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_MspInit+0x5c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_MspInit+0x5c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x60>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_MspInit+0x60>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 fd41 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <DMA1_Channel1_IRQHandler+0x10>)
 8001406:	f001 fa41 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000064 	.word	0x20000064

08001414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM2_IRQHandler+0x10>)
 800141a:	f003 fd27 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000254 	.word	0x20000254

08001428 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM3_IRQHandler+0x10>)
 800142e:	f003 fd1d 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000029c 	.word	0x2000029c

0800143c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <USART1_IRQHandler+0x10>)
 8001442:	f004 fbbf 	bl	8005bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200003bc 	.word	0x200003bc

08001450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART2_IRQHandler+0x10>)
 8001456:	f004 fbb5 	bl	8005bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000404 	.word	0x20000404

08001464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_TIM2_Init+0x94>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_TIM2_Init+0x94>)
 8001496:	2247      	movs	r2, #71	; 0x47
 8001498:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_TIM2_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM2_Init+0x94>)
 80014a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_TIM2_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_TIM2_Init+0x94>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_TIM2_Init+0x94>)
 80014b6:	f003 fa59 	bl	800496c <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014c0:	f7ff fc3a 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM2_Init+0x94>)
 80014d2:	f003 fe95 	bl	8005200 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014dc:	f7ff fc2c 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM2_Init+0x94>)
 80014ee:	f004 fa49 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f7ff fc1e 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000254 	.word	0x20000254

08001508 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_TIM3_Init+0xe4>)
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800153c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_TIM3_Init+0xe4>)
 8001540:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_TIM3_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_TIM3_Init+0xe4>)
 800154e:	2263      	movs	r2, #99	; 0x63
 8001550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MX_TIM3_Init+0xe4>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_TIM3_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <MX_TIM3_Init+0xe4>)
 8001560:	f003 fa04 	bl	800496c <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800156a:	f7ff fbe5 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001578:	4619      	mov	r1, r3
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <MX_TIM3_Init+0xe4>)
 800157c:	f003 fe40 	bl	8005200 <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001586:	f7ff fbd7 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM3_Init+0xe4>)
 800158c:	f003 fa9e 	bl	8004acc <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001596:	f7ff fbcf 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <MX_TIM3_Init+0xe4>)
 80015aa:	f004 f9eb 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015b4:	f7ff fbc0 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM3_Init+0xe4>)
 80015d0:	f003 fd54 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015da:	f7ff fbad 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM3_Init+0xe4>)
 80015e0:	f000 fa4c 	bl	8001a7c <HAL_TIM_MspPostInit>
//  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);

}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	; 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000029c 	.word	0x2000029c
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <MX_TIM4_Init+0x114>)
 8001626:	4a39      	ldr	r2, [pc, #228]	; (800170c <MX_TIM4_Init+0x118>)
 8001628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <MX_TIM4_Init+0x114>)
 800162c:	f240 529f 	movw	r2, #1439	; 0x59f
 8001630:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_TIM4_Init+0x114>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <MX_TIM4_Init+0x114>)
 800163a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <MX_TIM4_Init+0x114>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <MX_TIM4_Init+0x114>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164c:	482e      	ldr	r0, [pc, #184]	; (8001708 <MX_TIM4_Init+0x114>)
 800164e:	f003 f98d 	bl	800496c <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001658:	f7ff fb6e 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	4619      	mov	r1, r3
 8001668:	4827      	ldr	r0, [pc, #156]	; (8001708 <MX_TIM4_Init+0x114>)
 800166a:	f003 fdc9 	bl	8005200 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001674:	f7ff fb60 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001678:	4823      	ldr	r0, [pc, #140]	; (8001708 <MX_TIM4_Init+0x114>)
 800167a:	f003 fa27 	bl	8004acc <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001684:	f7ff fb58 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4619      	mov	r1, r3
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_TIM4_Init+0x114>)
 8001698:	f004 f974 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016a2:	f7ff fb49 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 80016aa:	2319      	movs	r3, #25
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <MX_TIM4_Init+0x114>)
 80016be:	f003 fcdd 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016c8:	f7ff fb36 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2204      	movs	r2, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_TIM4_Init+0x114>)
 80016d4:	f003 fcd2 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80016de:	f7ff fb2b 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2208      	movs	r2, #8
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM4_Init+0x114>)
 80016ea:	f003 fcc7 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80016f4:	f7ff fb20 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM4_Init+0x114>)
 80016fa:	f000 f9bf 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3738      	adds	r7, #56	; 0x38
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002e4 	.word	0x200002e4
 800170c:	40000800 	.word	0x40000800

08001710 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001742:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001744:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001748:	f240 22cf 	movw	r2, #719	; 0x2cf
 800174c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001756:	2263      	movs	r2, #99	; 0x63
 8001758:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_TIM5_Init+0xe4>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001768:	f003 f900 	bl	800496c <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001772:	f7ff fae1 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	4619      	mov	r1, r3
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001784:	f003 fd3c 	bl	8005200 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800178e:	f7ff fad3 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM5_Init+0xe4>)
 8001794:	f003 f99a 	bl	8004acc <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800179e:	f7ff facb 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4619      	mov	r1, r3
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <MX_TIM5_Init+0xe4>)
 80017b2:	f004 f8e7 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80017bc:	f7ff fabc 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c0:	2360      	movs	r3, #96	; 0x60
 80017c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM5_Init+0xe4>)
 80017d8:	f003 fc50 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80017e2:	f7ff faa9 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM5_Init+0xe4>)
 80017e8:	f000 f948 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000032c 	.word	0x2000032c
 80017f8:	40000c00 	.word	0x40000c00

080017fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b096      	sub	sp, #88	; 0x58
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2220      	movs	r2, #32
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fea7 	bl	8006588 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <MX_TIM8_Init+0x180>)
 800183c:	4a50      	ldr	r2, [pc, #320]	; (8001980 <MX_TIM8_Init+0x184>)
 800183e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 8001840:	4b4e      	ldr	r3, [pc, #312]	; (800197c <MX_TIM8_Init+0x180>)
 8001842:	f240 1267 	movw	r2, #359	; 0x167
 8001846:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <MX_TIM8_Init+0x180>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <MX_TIM8_Init+0x180>)
 8001850:	2263      	movs	r2, #99	; 0x63
 8001852:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <MX_TIM8_Init+0x180>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <MX_TIM8_Init+0x180>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <MX_TIM8_Init+0x180>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001866:	4845      	ldr	r0, [pc, #276]	; (800197c <MX_TIM8_Init+0x180>)
 8001868:	f003 f880 	bl	800496c <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001872:	f7ff fa61 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001880:	4619      	mov	r1, r3
 8001882:	483e      	ldr	r0, [pc, #248]	; (800197c <MX_TIM8_Init+0x180>)
 8001884:	f003 fcbc 	bl	8005200 <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800188e:	f7ff fa53 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001892:	483a      	ldr	r0, [pc, #232]	; (800197c <MX_TIM8_Init+0x180>)
 8001894:	f003 f91a 	bl	8004acc <HAL_TIM_PWM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800189e:	f7ff fa4b 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ae:	4619      	mov	r1, r3
 80018b0:	4832      	ldr	r0, [pc, #200]	; (800197c <MX_TIM8_Init+0x180>)
 80018b2:	f004 f867 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018bc:	f7ff fa3c 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	4825      	ldr	r0, [pc, #148]	; (800197c <MX_TIM8_Init+0x180>)
 80018e6:	f003 fbc9 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018f0:	f7ff fa22 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	2204      	movs	r2, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	481f      	ldr	r0, [pc, #124]	; (800197c <MX_TIM8_Init+0x180>)
 80018fe:	f003 fbbd 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001908:	f7ff fa16 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	2208      	movs	r2, #8
 8001912:	4619      	mov	r1, r3
 8001914:	4819      	ldr	r0, [pc, #100]	; (800197c <MX_TIM8_Init+0x180>)
 8001916:	f003 fbb1 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001920:	f7ff fa0a 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	220c      	movs	r2, #12
 800192a:	4619      	mov	r1, r3
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_TIM8_Init+0x180>)
 800192e:	f003 fba5 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001938:	f7ff f9fe 	bl	8000d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001954:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_TIM8_Init+0x180>)
 8001960:	f004 f87c 	bl	8005a5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800196a:	f7ff f9e5 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800196e:	4803      	ldr	r0, [pc, #12]	; (800197c <MX_TIM8_Init+0x180>)
 8001970:	f000 f884 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001974:	bf00      	nop
 8001976:	3758      	adds	r7, #88	; 0x58
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000374 	.word	0x20000374
 8001980:	40013400 	.word	0x40013400

08001984 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d114      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201c      	movs	r0, #28
 80019b4:	f000 fd79 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b8:	201c      	movs	r0, #28
 80019ba:	f000 fd92 	bl	80024e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019be:	e04e      	b.n	8001a5e <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a29      	ldr	r2, [pc, #164]	; (8001a6c <HAL_TIM_Base_MspInit+0xe8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d114      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	201d      	movs	r0, #29
 80019e8:	f000 fd5f 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ec:	201d      	movs	r0, #29
 80019ee:	f000 fd78 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 80019f2:	e034      	b.n	8001a5e <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_TIM_Base_MspInit+0xec>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10c      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
}
 8001a16:	e022      	b.n	8001a5e <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <HAL_TIM_Base_MspInit+0xf0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10c      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
}
 8001a3a:	e010      	b.n	8001a5e <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_TIM_Base_MspInit+0xf4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10b      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_TIM_Base_MspInit+0xe4>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40000c00 	.word	0x40000c00
 8001a78:	40013400 	.word	0x40013400

08001a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_TIM_MspPostInit+0x134>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d12a      	bne.n	8001af2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	483c      	ldr	r0, [pc, #240]	; (8001bb8 <HAL_TIM_MspPostInit+0x13c>)
 8001ac8:	f001 f91c 	bl	8002d04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_TIM_MspPostInit+0x140>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <HAL_TIM_MspPostInit+0x140>)
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001af0:	e05a      	b.n	8001ba8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <HAL_TIM_MspPostInit+0x144>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d119      	bne.n	8001b30 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8001b14:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <HAL_TIM_MspPostInit+0x13c>)
 8001b2a:	f001 f8eb 	bl	8002d04 <HAL_GPIO_Init>
}
 8001b2e:	e03b      	b.n	8001ba8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_TIM_MspPostInit+0x148>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d118      	bne.n	8001b6c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <HAL_TIM_MspPostInit+0x14c>)
 8001b66:	f001 f8cd 	bl	8002d04 <HAL_GPIO_Init>
}
 8001b6a:	e01d      	b.n	8001ba8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_TIM_MspPostInit+0x150>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d118      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_TIM_MspPostInit+0x138>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8001b8e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <HAL_TIM_MspPostInit+0x154>)
 8001ba4:	f001 f8ae 	bl	8002d04 <HAL_GPIO_Init>
}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	40000c00 	.word	0x40000c00
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40013400 	.word	0x40013400
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART1_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f003 ff89 	bl	8005b22 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f7ff f88f 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003bc 	.word	0x200003bc
 8001c24:	40013800 	.word	0x40013800

08001c28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_USART2_UART_Init+0x50>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c60:	f003 ff5f 	bl	8005b22 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c6a:	f7ff f865 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000404 	.word	0x20000404
 8001c78:	40004400 	.word	0x40004400

08001c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <HAL_UART_MspInit+0x118>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13a      	bne.n	8001d12 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	482e      	ldr	r0, [pc, #184]	; (8001d9c <HAL_UART_MspInit+0x120>)
 8001ce2:	f001 f80f 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4828      	ldr	r0, [pc, #160]	; (8001d9c <HAL_UART_MspInit+0x120>)
 8001cfc:	f001 f802 	bl	8002d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2025      	movs	r0, #37	; 0x25
 8001d06:	f000 fbd0 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0a:	2025      	movs	r0, #37	; 0x25
 8001d0c:	f000 fbe9 	bl	80024e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d10:	e03c      	b.n	8001d8c <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_UART_MspInit+0x124>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d137      	bne.n	8001d8c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_UART_MspInit+0x11c>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480f      	ldr	r0, [pc, #60]	; (8001d9c <HAL_UART_MspInit+0x120>)
 8001d60:	f000 ffd0 	bl	8002d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d64:	2308      	movs	r3, #8
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4619      	mov	r1, r3
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <HAL_UART_MspInit+0x120>)
 8001d78:	f000 ffc4 	bl	8002d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2026      	movs	r0, #38	; 0x26
 8001d82:	f000 fb92 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d86:	2026      	movs	r0, #38	; 0x26
 8001d88:	f000 fbab 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40004400 	.word	0x40004400

08001da4 <Reset_Handler>:
 8001da4:	f7ff fb5e 	bl	8001464 <SystemInit>
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <LoopFillZerobss+0xe>)
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <LoopFillZerobss+0x12>)
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <LoopFillZerobss+0x16>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:
 8001db2:	58d4      	ldr	r4, [r2, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:
 8001db8:	18c4      	adds	r4, r0, r3
 8001dba:	428c      	cmp	r4, r1
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <LoopFillZerobss+0x1a>)
 8001dc0:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <LoopFillZerobss+0x1e>)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:
 8001dca:	42a2      	cmp	r2, r4
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>
 8001dce:	f004 fbe3 	bl	8006598 <__libc_init_array>
 8001dd2:	f7fe feb3 	bl	8000b3c <main>
 8001dd6:	4770      	bx	lr
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000018 	.word	0x20000018
 8001de0:	0800662c 	.word	0x0800662c
 8001de4:	20000018 	.word	0x20000018
 8001de8:	20000450 	.word	0x20000450

08001dec <ADC1_2_IRQHandler>:
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x28>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 fb47 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fa9e 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fb5f 	bl	80024fe <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 fb27 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	20000014 	.word	0x20000014
 8001e78:	20000010 	.word	0x20000010

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x20>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_IncTick+0x20>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000014 	.word	0x20000014
 8001e9c:	2000044c 	.word	0x2000044c

08001ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_GetTick+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	2000044c 	.word	0x2000044c

08001eb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0ce      	b.n	8002074 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fa38 	bl	8000368 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f9bd 	bl	8002278 <ADC_ConversionStop_Disable>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 80a9 	bne.w	8002062 <HAL_ADC_Init+0x1ae>
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80a5 	bne.w	8002062 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f20:	f023 0302 	bic.w	r3, r3, #2
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4951      	ldr	r1, [pc, #324]	; (800207c <HAL_ADC_Init+0x1c8>)
 8001f36:	428b      	cmp	r3, r1
 8001f38:	d10a      	bne.n	8001f50 <HAL_ADC_Init+0x9c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_Init+0x96>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	e004      	b.n	8001f54 <HAL_ADC_Init+0xa0>
 8001f4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f4e:	e001      	b.n	8001f54 <HAL_ADC_Init+0xa0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7b1b      	ldrb	r3, [r3, #12]
 8001f5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6c:	d003      	beq.n	8001f76 <HAL_ADC_Init+0xc2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_Init+0xc8>
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_Init+0xca>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7d1b      	ldrb	r3, [r3, #20]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d119      	bne.n	8001fc0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7b1b      	ldrb	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	035a      	lsls	r2, r3, #13
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_ADC_Init+0x1cc>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_Init+0x146>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d104      	bne.n	8002004 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	430a      	orrs	r2, r1
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_ADC_Init+0x1d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	429a      	cmp	r2, r3
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800203e:	e018      	b.n	8002072 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	f023 0312 	bic.w	r3, r3, #18
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002060:	e007      	b.n	8002072 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013c00 	.word	0x40013c00
 8002080:	ffe1f7fd 	.word	0xffe1f7fd
 8002084:	ff1f0efe 	.word	0xff1f0efe

08002088 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x20>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0dc      	b.n	8002262 <HAL_ADC_ConfigChannel+0x1da>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d81c      	bhi.n	80020f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b05      	subs	r3, #5
 80020ca:	221f      	movs	r2, #31
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4019      	ands	r1, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b05      	subs	r3, #5
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
 80020f0:	e03c      	b.n	800216c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d81c      	bhi.n	8002134 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b23      	subs	r3, #35	; 0x23
 800210c:	221f      	movs	r2, #31
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	4019      	ands	r1, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b23      	subs	r3, #35	; 0x23
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
 8002132:	e01b      	b.n	800216c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b41      	subs	r3, #65	; 0x41
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	4019      	ands	r1, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b41      	subs	r3, #65	; 0x41
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b09      	cmp	r3, #9
 8002172:	d91c      	bls.n	80021ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68d9      	ldr	r1, [r3, #12]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3b1e      	subs	r3, #30
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	4019      	ands	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6898      	ldr	r0, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	3b1e      	subs	r3, #30
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	e019      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6919      	ldr	r1, [r3, #16]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	2207      	movs	r2, #7
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4019      	ands	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d003      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ee:	2b11      	cmp	r3, #17
 80021f0:	d132      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_ADC_ConfigChannel+0x1e4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d125      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d126      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002218:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d11a      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_ADC_ConfigChannel+0x1e8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_ADC_ConfigChannel+0x1ec>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	0c9a      	lsrs	r2, r3, #18
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_ConfigChannel+0x1b2>
 8002246:	e007      	b.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40012400 	.word	0x40012400
 8002270:	2000000c 	.word	0x2000000c
 8002274:	431bde83 	.word	0x431bde83

08002278 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d12e      	bne.n	80022f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a2:	f7ff fdfd 	bl	8001ea0 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022a8:	e01b      	b.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022aa:	f7ff fdf9 	bl	8001ea0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d914      	bls.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10d      	bne.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e007      	b.n	80022f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d0dc      	beq.n	80022aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <__NVIC_EnableIRQ+0x34>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff90 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff2d 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff42 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff90 	bl	80023ec <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5f 	bl	8002398 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff35 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e059      	b.n	80025e2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_DMA_Init+0xd4>)
 8002536:	429a      	cmp	r2, r3
 8002538:	d80f      	bhi.n	800255a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_DMA_Init+0xd8>)
 8002542:	4413      	add	r3, r2
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_DMA_Init+0xdc>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <HAL_DMA_Init+0xe0>)
 8002556:	63da      	str	r2, [r3, #60]	; 0x3c
 8002558:	e00e      	b.n	8002578 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_DMA_Init+0xe4>)
 8002562:	4413      	add	r3, r2
 8002564:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_DMA_Init+0xdc>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_DMA_Init+0xe8>)
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800258e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40020407 	.word	0x40020407
 80025f0:	bffdfff8 	.word	0xbffdfff8
 80025f4:	cccccccd 	.word	0xcccccccd
 80025f8:	40020000 	.word	0x40020000
 80025fc:	bffdfbf8 	.word	0xbffdfbf8
 8002600:	40020400 	.word	0x40020400

08002604 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e020      	b.n	8002670 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020e 	bic.w	r2, r2, #14
 800263c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d005      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e0d6      	b.n	800284e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020e 	bic.w	r2, r2, #14
 80026ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b64      	ldr	r3, [pc, #400]	; (8002858 <HAL_DMA_Abort_IT+0x1dc>)
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d958      	bls.n	800277e <HAL_DMA_Abort_IT+0x102>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a62      	ldr	r2, [pc, #392]	; (800285c <HAL_DMA_Abort_IT+0x1e0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d04f      	beq.n	8002776 <HAL_DMA_Abort_IT+0xfa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_DMA_Abort_IT+0x1e4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d048      	beq.n	8002772 <HAL_DMA_Abort_IT+0xf6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5f      	ldr	r2, [pc, #380]	; (8002864 <HAL_DMA_Abort_IT+0x1e8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d040      	beq.n	800276c <HAL_DMA_Abort_IT+0xf0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_DMA_Abort_IT+0x1ec>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d038      	beq.n	8002766 <HAL_DMA_Abort_IT+0xea>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5c      	ldr	r2, [pc, #368]	; (800286c <HAL_DMA_Abort_IT+0x1f0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d030      	beq.n	8002760 <HAL_DMA_Abort_IT+0xe4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <HAL_DMA_Abort_IT+0x1f4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d028      	beq.n	800275a <HAL_DMA_Abort_IT+0xde>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_DMA_Abort_IT+0x1dc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d020      	beq.n	8002754 <HAL_DMA_Abort_IT+0xd8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_DMA_Abort_IT+0x1f8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d019      	beq.n	8002750 <HAL_DMA_Abort_IT+0xd4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_DMA_Abort_IT+0x1fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d012      	beq.n	800274c <HAL_DMA_Abort_IT+0xd0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_DMA_Abort_IT+0x200>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00a      	beq.n	8002746 <HAL_DMA_Abort_IT+0xca>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_DMA_Abort_IT+0x204>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d102      	bne.n	8002740 <HAL_DMA_Abort_IT+0xc4>
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273e:	e01b      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002744:	e018      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274a:	e015      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 800274c:	2310      	movs	r3, #16
 800274e:	e013      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002750:	2301      	movs	r3, #1
 8002752:	e011      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002758:	e00e      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 800275a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800275e:	e00b      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002764:	e008      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	e005      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 800276c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002770:	e002      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002772:	2310      	movs	r3, #16
 8002774:	e000      	b.n	8002778 <HAL_DMA_Abort_IT+0xfc>
 8002776:	2301      	movs	r3, #1
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_DMA_Abort_IT+0x208>)
 800277a:	6053      	str	r3, [r2, #4]
 800277c:	e057      	b.n	800282e <HAL_DMA_Abort_IT+0x1b2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a36      	ldr	r2, [pc, #216]	; (800285c <HAL_DMA_Abort_IT+0x1e0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04f      	beq.n	8002828 <HAL_DMA_Abort_IT+0x1ac>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_DMA_Abort_IT+0x1e4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d048      	beq.n	8002824 <HAL_DMA_Abort_IT+0x1a8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <HAL_DMA_Abort_IT+0x1e8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort_IT+0x1a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_DMA_Abort_IT+0x1ec>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d038      	beq.n	8002818 <HAL_DMA_Abort_IT+0x19c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a30      	ldr	r2, [pc, #192]	; (800286c <HAL_DMA_Abort_IT+0x1f0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d030      	beq.n	8002812 <HAL_DMA_Abort_IT+0x196>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <HAL_DMA_Abort_IT+0x1f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d028      	beq.n	800280c <HAL_DMA_Abort_IT+0x190>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_DMA_Abort_IT+0x1dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d020      	beq.n	8002806 <HAL_DMA_Abort_IT+0x18a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <HAL_DMA_Abort_IT+0x1f8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_DMA_Abort_IT+0x186>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_DMA_Abort_IT+0x1fc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d012      	beq.n	80027fe <HAL_DMA_Abort_IT+0x182>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a27      	ldr	r2, [pc, #156]	; (800287c <HAL_DMA_Abort_IT+0x200>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_DMA_Abort_IT+0x204>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d102      	bne.n	80027f2 <HAL_DMA_Abort_IT+0x176>
 80027ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f0:	e01b      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 80027f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f6:	e018      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 80027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fc:	e015      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 80027fe:	2310      	movs	r3, #16
 8002800:	e013      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002802:	2301      	movs	r3, #1
 8002804:	e011      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800280a:	e00e      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 800280c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002810:	e00b      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002816:	e008      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281c:	e005      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	e002      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002824:	2310      	movs	r3, #16
 8002826:	e000      	b.n	800282a <HAL_DMA_Abort_IT+0x1ae>
 8002828:	2301      	movs	r3, #1
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_DMA_Abort_IT+0x20c>)
 800282c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
    } 
  }
  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40020080 	.word	0x40020080
 800285c:	40020008 	.word	0x40020008
 8002860:	4002001c 	.word	0x4002001c
 8002864:	40020030 	.word	0x40020030
 8002868:	40020044 	.word	0x40020044
 800286c:	40020058 	.word	0x40020058
 8002870:	4002006c 	.word	0x4002006c
 8002874:	40020408 	.word	0x40020408
 8002878:	4002041c 	.word	0x4002041c
 800287c:	40020430 	.word	0x40020430
 8002880:	40020444 	.word	0x40020444
 8002884:	40020400 	.word	0x40020400
 8002888:	40020000 	.word	0x40020000

0800288c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2204      	movs	r2, #4
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80f1 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x20c>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80eb 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <HAL_DMA_IRQHandler+0x1d8>)
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d958      	bls.n	800299e <HAL_DMA_IRQHandler+0x112>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_DMA_IRQHandler+0x1dc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04f      	beq.n	8002996 <HAL_DMA_IRQHandler+0x10a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_DMA_IRQHandler+0x1e0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d048      	beq.n	8002992 <HAL_DMA_IRQHandler+0x106>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5a      	ldr	r2, [pc, #360]	; (8002a70 <HAL_DMA_IRQHandler+0x1e4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d040      	beq.n	800298c <HAL_DMA_IRQHandler+0x100>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a59      	ldr	r2, [pc, #356]	; (8002a74 <HAL_DMA_IRQHandler+0x1e8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d038      	beq.n	8002986 <HAL_DMA_IRQHandler+0xfa>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_DMA_IRQHandler+0x1ec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d030      	beq.n	8002980 <HAL_DMA_IRQHandler+0xf4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_DMA_IRQHandler+0x1f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d028      	beq.n	800297a <HAL_DMA_IRQHandler+0xee>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4d      	ldr	r2, [pc, #308]	; (8002a64 <HAL_DMA_IRQHandler+0x1d8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d020      	beq.n	8002974 <HAL_DMA_IRQHandler+0xe8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_DMA_IRQHandler+0x1f4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d019      	beq.n	8002970 <HAL_DMA_IRQHandler+0xe4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_DMA_IRQHandler+0x1f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d012      	beq.n	800296c <HAL_DMA_IRQHandler+0xe0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4f      	ldr	r2, [pc, #316]	; (8002a88 <HAL_DMA_IRQHandler+0x1fc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00a      	beq.n	8002966 <HAL_DMA_IRQHandler+0xda>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <HAL_DMA_IRQHandler+0x200>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d102      	bne.n	8002960 <HAL_DMA_IRQHandler+0xd4>
 800295a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295e:	e01b      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002964:	e018      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	e015      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 800296c:	2340      	movs	r3, #64	; 0x40
 800296e:	e013      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002970:	2304      	movs	r3, #4
 8002972:	e011      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002974:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002978:	e00e      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 800297a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800297e:	e00b      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002984:	e008      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800298a:	e005      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 800298c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002990:	e002      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	e000      	b.n	8002998 <HAL_DMA_IRQHandler+0x10c>
 8002996:	2304      	movs	r3, #4
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_DMA_IRQHandler+0x204>)
 800299a:	6053      	str	r3, [r2, #4]
 800299c:	e057      	b.n	8002a4e <HAL_DMA_IRQHandler+0x1c2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_DMA_IRQHandler+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04f      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x1bc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_DMA_IRQHandler+0x1e0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d048      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x1b8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <HAL_DMA_IRQHandler+0x1e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d040      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x1b2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <HAL_DMA_IRQHandler+0x1e8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d038      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1ac>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <HAL_DMA_IRQHandler+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d030      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x1a6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_DMA_IRQHandler+0x1f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d028      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x1a0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_DMA_IRQHandler+0x1d8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d020      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x19a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_DMA_IRQHandler+0x1f4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x196>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <HAL_DMA_IRQHandler+0x1f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d012      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x192>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_DMA_IRQHandler+0x1fc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00a      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x18c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_DMA_IRQHandler+0x200>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <HAL_DMA_IRQHandler+0x186>
 8002a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a10:	e01b      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a16:	e018      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	e015      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	e013      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e011      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a2a:	e00e      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a30:	e00b      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a36:	e008      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a3c:	e005      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a42:	e002      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	e000      	b.n	8002a4a <HAL_DMA_IRQHandler+0x1be>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_DMA_IRQHandler+0x208>)
 8002a4c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8136 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a60:	e130      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x438>
 8002a62:	bf00      	nop
 8002a64:	40020080 	.word	0x40020080
 8002a68:	40020008 	.word	0x40020008
 8002a6c:	4002001c 	.word	0x4002001c
 8002a70:	40020030 	.word	0x40020030
 8002a74:	40020044 	.word	0x40020044
 8002a78:	40020058 	.word	0x40020058
 8002a7c:	4002006c 	.word	0x4002006c
 8002a80:	40020408 	.word	0x40020408
 8002a84:	4002041c 	.word	0x4002041c
 8002a88:	40020430 	.word	0x40020430
 8002a8c:	40020444 	.word	0x40020444
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80dd 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x3d8>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80d7 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020a 	bic.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_DMA_IRQHandler+0x444>)
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d958      	bls.n	8002b9a <HAL_DMA_IRQHandler+0x30e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a79      	ldr	r2, [pc, #484]	; (8002cd4 <HAL_DMA_IRQHandler+0x448>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04f      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x306>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a78      	ldr	r2, [pc, #480]	; (8002cd8 <HAL_DMA_IRQHandler+0x44c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d048      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x302>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a76      	ldr	r2, [pc, #472]	; (8002cdc <HAL_DMA_IRQHandler+0x450>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2fc>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	; (8002ce0 <HAL_DMA_IRQHandler+0x454>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d038      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x2f6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a73      	ldr	r2, [pc, #460]	; (8002ce4 <HAL_DMA_IRQHandler+0x458>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d030      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x2f0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a72      	ldr	r2, [pc, #456]	; (8002ce8 <HAL_DMA_IRQHandler+0x45c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d028      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x2ea>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_DMA_IRQHandler+0x444>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d020      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2e4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6e      	ldr	r2, [pc, #440]	; (8002cec <HAL_DMA_IRQHandler+0x460>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d019      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2e0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6c      	ldr	r2, [pc, #432]	; (8002cf0 <HAL_DMA_IRQHandler+0x464>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d012      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x2dc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6b      	ldr	r2, [pc, #428]	; (8002cf4 <HAL_DMA_IRQHandler+0x468>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00a      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2d6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_DMA_IRQHandler+0x46c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d102      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x2d0>
 8002b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5a:	e01b      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	e018      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b66:	e015      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e013      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e011      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b74:	e00e      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b7a:	e00b      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b80:	e008      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b86:	e005      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8c:	e002      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0x308>
 8002b92:	2302      	movs	r3, #2
 8002b94:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_DMA_IRQHandler+0x470>)
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	e057      	b.n	8002c4a <HAL_DMA_IRQHandler+0x3be>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a4d      	ldr	r2, [pc, #308]	; (8002cd4 <HAL_DMA_IRQHandler+0x448>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04f      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x3b8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4b      	ldr	r2, [pc, #300]	; (8002cd8 <HAL_DMA_IRQHandler+0x44c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d048      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x3b4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_DMA_IRQHandler+0x450>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d040      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x3ae>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_DMA_IRQHandler+0x454>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d038      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x3a8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_DMA_IRQHandler+0x458>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d030      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x3a2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a45      	ldr	r2, [pc, #276]	; (8002ce8 <HAL_DMA_IRQHandler+0x45c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d028      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x39c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3d      	ldr	r2, [pc, #244]	; (8002cd0 <HAL_DMA_IRQHandler+0x444>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d020      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x396>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a41      	ldr	r2, [pc, #260]	; (8002cec <HAL_DMA_IRQHandler+0x460>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x392>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <HAL_DMA_IRQHandler+0x464>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d012      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x38e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3e      	ldr	r2, [pc, #248]	; (8002cf4 <HAL_DMA_IRQHandler+0x468>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x388>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <HAL_DMA_IRQHandler+0x46c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_DMA_IRQHandler+0x382>
 8002c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0c:	e01b      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c12:	e018      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c18:	e015      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e013      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e011      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c26:	e00e      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c2c:	e00b      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c32:	e008      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c38:	e005      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3e:	e002      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c40:	2320      	movs	r3, #32
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_IRQHandler+0x3ba>
 8002c44:	2302      	movs	r3, #2
 8002c46:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_DMA_IRQHandler+0x474>)
 8002c48:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d034      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c62:	e02f      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2208      	movs	r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d028      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x43a>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d023      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 020e 	bic.w	r2, r2, #14
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
    }
  }
  return;
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
}
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40020080 	.word	0x40020080
 8002cd4:	40020008 	.word	0x40020008
 8002cd8:	4002001c 	.word	0x4002001c
 8002cdc:	40020030 	.word	0x40020030
 8002ce0:	40020044 	.word	0x40020044
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	4002006c 	.word	0x4002006c
 8002cec:	40020408 	.word	0x40020408
 8002cf0:	4002041c 	.word	0x4002041c
 8002cf4:	40020430 	.word	0x40020430
 8002cf8:	40020444 	.word	0x40020444
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b08b      	sub	sp, #44	; 0x2c
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e179      	b.n	800300c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8168 	bne.w	8003006 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a96      	ldr	r2, [pc, #600]	; (8002f94 <HAL_GPIO_Init+0x290>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d05e      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d40:	4a94      	ldr	r2, [pc, #592]	; (8002f94 <HAL_GPIO_Init+0x290>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d875      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d46:	4a94      	ldr	r2, [pc, #592]	; (8002f98 <HAL_GPIO_Init+0x294>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d058      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d4c:	4a92      	ldr	r2, [pc, #584]	; (8002f98 <HAL_GPIO_Init+0x294>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d86f      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d52:	4a92      	ldr	r2, [pc, #584]	; (8002f9c <HAL_GPIO_Init+0x298>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d052      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d58:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_GPIO_Init+0x298>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d869      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d5e:	4a90      	ldr	r2, [pc, #576]	; (8002fa0 <HAL_GPIO_Init+0x29c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04c      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d64:	4a8e      	ldr	r2, [pc, #568]	; (8002fa0 <HAL_GPIO_Init+0x29c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d863      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d6a:	4a8e      	ldr	r2, [pc, #568]	; (8002fa4 <HAL_GPIO_Init+0x2a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d046      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d70:	4a8c      	ldr	r2, [pc, #560]	; (8002fa4 <HAL_GPIO_Init+0x2a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d85d      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d82a      	bhi.n	8002dd0 <HAL_GPIO_Init+0xcc>
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d859      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_GPIO_Init+0x80>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dff 	.word	0x08002dff
 8002d88:	08002dd9 	.word	0x08002dd9
 8002d8c:	08002deb 	.word	0x08002deb
 8002d90:	08002e2d 	.word	0x08002e2d
 8002d94:	08002e33 	.word	0x08002e33
 8002d98:	08002e33 	.word	0x08002e33
 8002d9c:	08002e33 	.word	0x08002e33
 8002da0:	08002e33 	.word	0x08002e33
 8002da4:	08002e33 	.word	0x08002e33
 8002da8:	08002e33 	.word	0x08002e33
 8002dac:	08002e33 	.word	0x08002e33
 8002db0:	08002e33 	.word	0x08002e33
 8002db4:	08002e33 	.word	0x08002e33
 8002db8:	08002e33 	.word	0x08002e33
 8002dbc:	08002e33 	.word	0x08002e33
 8002dc0:	08002e33 	.word	0x08002e33
 8002dc4:	08002e33 	.word	0x08002e33
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_GPIO_Init+0x2a4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd6:	e02c      	b.n	8002e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	623b      	str	r3, [r7, #32]
          break;
 8002dde:	e029      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	3304      	adds	r3, #4
 8002de6:	623b      	str	r3, [r7, #32]
          break;
 8002de8:	e024      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	3308      	adds	r3, #8
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e01f      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	623b      	str	r3, [r7, #32]
          break;
 8002dfc:	e01a      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e06:	2304      	movs	r3, #4
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e013      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e14:	2308      	movs	r3, #8
 8002e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	611a      	str	r2, [r3, #16]
          break;
 8002e1e:	e009      	b.n	8002e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e20:	2308      	movs	r3, #8
 8002e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	615a      	str	r2, [r3, #20]
          break;
 8002e2a:	e003      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          break;
 8002e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d801      	bhi.n	8002e3e <HAL_GPIO_Init+0x13a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e001      	b.n	8002e42 <HAL_GPIO_Init+0x13e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2bff      	cmp	r3, #255	; 0xff
 8002e48:	d802      	bhi.n	8002e50 <HAL_GPIO_Init+0x14c>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x152>
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	3b08      	subs	r3, #8
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80c1 	beq.w	8003006 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e84:	4b49      	ldr	r3, [pc, #292]	; (8002fac <HAL_GPIO_Init+0x2a8>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_GPIO_Init+0x2a8>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_GPIO_Init+0x2a8>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e9c:	4a44      	ldr	r2, [pc, #272]	; (8002fb0 <HAL_GPIO_Init+0x2ac>)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <HAL_GPIO_Init+0x2b0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01f      	beq.n	8002f08 <HAL_GPIO_Init+0x204>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_GPIO_Init+0x2b4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d019      	beq.n	8002f04 <HAL_GPIO_Init+0x200>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <HAL_GPIO_Init+0x2b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1fc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a39      	ldr	r2, [pc, #228]	; (8002fc0 <HAL_GPIO_Init+0x2bc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1f8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <HAL_GPIO_Init+0x2c0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <HAL_GPIO_Init+0x2c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1f0>
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	e00a      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	e008      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002efc:	2303      	movs	r3, #3
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x206>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f1a:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_GPIO_Init+0x2ac>)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4924      	ldr	r1, [pc, #144]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4920      	ldr	r1, [pc, #128]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	491a      	ldr	r1, [pc, #104]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	4916      	ldr	r1, [pc, #88]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d025      	beq.n	8002fd0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4910      	ldr	r1, [pc, #64]	; (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e025      	b.n	8002fde <HAL_GPIO_Init+0x2da>
 8002f92:	bf00      	nop
 8002f94:	10320000 	.word	0x10320000
 8002f98:	10310000 	.word	0x10310000
 8002f9c:	10220000 	.word	0x10220000
 8002fa0:	10210000 	.word	0x10210000
 8002fa4:	10120000 	.word	0x10120000
 8002fa8:	10110000 	.word	0x10110000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	40010c00 	.word	0x40010c00
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	40011800 	.word	0x40011800
 8002fc8:	40011c00 	.word	0x40011c00
 8002fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
 8002ff6:	e006      	b.n	8003006 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4909      	ldr	r1, [pc, #36]	; (8003028 <HAL_GPIO_Init+0x324>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f ae7e 	bne.w	8002d18 <HAL_GPIO_Init+0x14>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	372c      	adds	r7, #44	; 0x2c
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43d9      	mvns	r1, r3
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	400b      	ands	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	611a      	str	r2, [r3, #16]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e12b      	b.n	80032fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fd00 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f4:	f001 faba 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a81      	ldr	r2, [pc, #516]	; (8003304 <HAL_I2C_Init+0x274>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d807      	bhi.n	8003114 <HAL_I2C_Init+0x84>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a80      	ldr	r2, [pc, #512]	; (8003308 <HAL_I2C_Init+0x278>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e006      	b.n	8003122 <HAL_I2C_Init+0x92>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a7d      	ldr	r2, [pc, #500]	; (800330c <HAL_I2C_Init+0x27c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	bf94      	ite	ls
 800311c:	2301      	movls	r3, #1
 800311e:	2300      	movhi	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e7      	b.n	80032fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a78      	ldr	r2, [pc, #480]	; (8003310 <HAL_I2C_Init+0x280>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9b      	lsrs	r3, r3, #18
 8003134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a6a      	ldr	r2, [pc, #424]	; (8003304 <HAL_I2C_Init+0x274>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d802      	bhi.n	8003164 <HAL_I2C_Init+0xd4>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3301      	adds	r3, #1
 8003162:	e009      	b.n	8003178 <HAL_I2C_Init+0xe8>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_I2C_Init+0x284>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	3301      	adds	r3, #1
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	495c      	ldr	r1, [pc, #368]	; (8003304 <HAL_I2C_Init+0x274>)
 8003194:	428b      	cmp	r3, r1
 8003196:	d819      	bhi.n	80031cc <HAL_I2C_Init+0x13c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e59      	subs	r1, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ac:	400b      	ands	r3, r1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_I2C_Init+0x138>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e59      	subs	r1, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c6:	e051      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e04f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <HAL_I2C_Init+0x168>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e012      	b.n	800321e <HAL_I2C_Init+0x18e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x196>
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_I2C_Init+0x1dc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10e      	bne.n	800324c <HAL_I2C_Init+0x1bc>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e58      	subs	r0, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	440b      	add	r3, r1
 800323c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324a:	e00f      	b.n	800326c <HAL_I2C_Init+0x1dc>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6911      	ldr	r1, [r2, #16]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	000186a0 	.word	0x000186a0
 8003308:	001e847f 	.word	0x001e847f
 800330c:	003d08ff 	.word	0x003d08ff
 8003310:	431bde83 	.word	0x431bde83
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	; 0x30
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
 8003328:	4613      	mov	r3, r2
 800332a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003330:	f7fe fdb6 	bl	8001ea0 <HAL_GetTick>
 8003334:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 824b 	bne.w	80037da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2319      	movs	r3, #25
 800334a:	2201      	movs	r2, #1
 800334c:	497f      	ldr	r1, [pc, #508]	; (800354c <HAL_I2C_Master_Receive+0x234>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fc4a 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	e23e      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2C_Master_Receive+0x54>
 8003368:	2302      	movs	r3, #2
 800336a:	e237      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d007      	beq.n	8003392 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2222      	movs	r2, #34	; 0x22
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2210      	movs	r2, #16
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	893a      	ldrh	r2, [r7, #8]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a5f      	ldr	r2, [pc, #380]	; (8003550 <HAL_I2C_Master_Receive+0x238>)
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d4:	8979      	ldrh	r1, [r7, #10]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fb36 	bl	8003a4c <I2C_MasterRequestRead>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1f8      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d113      	bne.n	800341a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e1cc      	b.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	2b01      	cmp	r3, #1
 8003420:	d11e      	bne.n	8003460 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003432:	b672      	cpsid	i
}
 8003434:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800345c:	b662      	cpsie	i
}
 800345e:	e035      	b.n	80034cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b02      	cmp	r3, #2
 8003466:	d11e      	bne.n	80034a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003476:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003478:	b672      	cpsid	i
}
 800347a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034a2:	b662      	cpsie	i
}
 80034a4:	e012      	b.n	80034cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034cc:	e172      	b.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f200 811f 	bhi.w	8003716 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d123      	bne.n	8003528 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fc99 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e173      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003526:	e145      	b.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b02      	cmp	r3, #2
 800352e:	d152      	bne.n	80035d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2200      	movs	r2, #0
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_I2C_Master_Receive+0x23c>)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fb54 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e148      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000
 8003554:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800359e:	b662      	cpsie	i
}
 80035a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d4:	e0ee      	b.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	2200      	movs	r2, #0
 80035de:	4981      	ldr	r1, [pc, #516]	; (80037e4 <HAL_I2C_Master_Receive+0x4cc>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fb01 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0f5      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_I2C_Master_Receive+0x4d0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	08db      	lsrs	r3, r3, #3
 800363c:	4a6b      	ldr	r2, [pc, #428]	; (80037ec <HAL_I2C_Master_Receive+0x4d4>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a1a      	lsrs	r2, r3, #8
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	3b01      	subs	r3, #1
 8003654:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800367e:	b662      	cpsie	i
}
 8003680:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0a6      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b04      	cmp	r3, #4
 800369a:	d1d9      	bne.n	8003650 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036de:	b662      	cpsie	i
}
 80036e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003714:	e04e      	b.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb7e 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e058      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d124      	bne.n	80037b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	2b03      	cmp	r3, #3
 8003770:	d107      	bne.n	8003782 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f ae88 	bne.w	80034ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010004 	.word	0x00010004
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	14f8b589 	.word	0x14f8b589

080037f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7fe fb4e 	bl	8001ea0 <HAL_GetTick>
 8003804:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 8111 	bne.w	8003a3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4988      	ldr	r1, [pc, #544]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9e0 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	e104      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2C_IsDeviceReady+0x50>
 800383c:	2302      	movs	r3, #2
 800383e:	e0fd      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2224      	movs	r2, #36	; 0x24
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a70      	ldr	r2, [pc, #448]	; (8003a48 <HAL_I2C_IsDeviceReady+0x258>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f99e 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d103      	bne.n	80038ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0b6      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038de:	f7fe fadf 	bl	8001ea0 <HAL_GetTick>
 80038e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003912:	e025      	b.n	8003960 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe fac4 	bl	8001ea0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <HAL_I2C_IsDeviceReady+0x13a>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22a0      	movs	r2, #160	; 0xa0
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2ba0      	cmp	r3, #160	; 0xa0
 800396a:	d005      	beq.n	8003978 <HAL_I2C_IsDeviceReady+0x188>
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_I2C_IsDeviceReady+0x188>
 8003972:	7dbb      	ldrb	r3, [r7, #22]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0cd      	beq.n	8003914 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d129      	bne.n	80039e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2319      	movs	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	4921      	ldr	r1, [pc, #132]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f912 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e036      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e02c      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	490f      	ldr	r1, [pc, #60]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8ee 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e012      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f4ff af32 	bcc.w	800388a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000

08003a4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d006      	beq.n	8003a86 <I2C_MasterRequestRead+0x3a>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d003      	beq.n	8003a86 <I2C_MasterRequestRead+0x3a>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a84:	d108      	bne.n	8003a98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e00b      	b.n	8003ab0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b11      	cmp	r3, #17
 8003a9e:	d107      	bne.n	8003ab0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f893 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d103      	bne.n	8003ae0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e079      	b.n	8003bd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aec:	d108      	bne.n	8003b00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]
 8003afe:	e05f      	b.n	8003bc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b00:	897b      	ldrh	r3, [r7, #10]
 8003b02:	11db      	asrs	r3, r3, #7
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0306 	and.w	r3, r3, #6
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f063 030f 	orn	r3, r3, #15
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4930      	ldr	r1, [pc, #192]	; (8003be0 <I2C_MasterRequestRead+0x194>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8dc 	bl	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e054      	b.n	8003bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4929      	ldr	r1, [pc, #164]	; (8003be4 <I2C_MasterRequestRead+0x198>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f8cc 	bl	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e044      	b.n	8003bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f831 	bl	8003be8 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	d103      	bne.n	8003ba4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e017      	b.n	8003bd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ba8:	897b      	ldrh	r3, [r7, #10]
 8003baa:	11db      	asrs	r3, r3, #7
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0306 	and.w	r3, r3, #6
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f063 030e 	orn	r3, r3, #14
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4907      	ldr	r1, [pc, #28]	; (8003be4 <I2C_MasterRequestRead+0x198>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f888 	bl	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00010008 	.word	0x00010008
 8003be4:	00010002 	.word	0x00010002

08003be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf8:	e048      	b.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d044      	beq.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fe f94d 	bl	8001ea0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d139      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	e00c      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d116      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e023      	b.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d10d      	bne.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	e00c      	b.n	8003ccc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d093      	beq.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cea:	e071      	b.n	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d123      	bne.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e067      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d041      	beq.n	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4c:	f7fe f8a8 	bl	8001ea0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d136      	bne.n	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10c      	bne.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf14      	ite	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	2300      	moveq	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e00b      	b.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e021      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10c      	bne.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e00b      	b.n	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f af6d 	bne.w	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e28:	e049      	b.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d119      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e030      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe f818 	bl	8001ea0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d016      	beq.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d1ae      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e272      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
 8003f10:	4b8c      	ldr	r3, [pc, #560]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	4b89      	ldr	r3, [pc, #548]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_RCC_OscConfig+0x12c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d168      	bne.n	8004004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e24c      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x76>
 8003f40:	4b80      	ldr	r3, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e02e      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xbc>
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6a      	ldr	r2, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd ff74 	bl	8001ea0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd ff70 	bl	8001ea0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e200      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe4>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd ff60 	bl	8001ea0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd ff5c 	bl	8001ea0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1ec      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x10c>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800401e:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4939      	ldr	r1, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fd ff15 	bl	8001ea0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd ff11 	bl	8001ea0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fef4 	bl	8001ea0 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fd fef0 	bl	8001ea0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e180      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03a      	beq.n	800415c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fd fed4 	bl	8001ea0 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd fed0 	bl	8001ea0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e160      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f000 face 	bl	80046bc <RCC_Delay>
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fd feba 	bl	8001ea0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412e:	e00f      	b.n	8004150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd feb6 	bl	8001ea0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d908      	bls.n	8004150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e146      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	42420000 	.word	0x42420000
 800414c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b92      	ldr	r3, [pc, #584]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e9      	bne.n	8004130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a87      	ldr	r2, [pc, #540]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b82      	ldr	r3, [pc, #520]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b7f      	ldr	r3, [pc, #508]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7e      	ldr	r2, [pc, #504]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fd fe77 	bl	8001ea0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fd fe73 	bl	8001ea0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e103      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x312>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e02d      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x334>
 80041f2:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4a69      	ldr	r2, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a66      	ldr	r2, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	e01c      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x356>
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4a60      	ldr	r2, [pc, #384]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	4b5e      	ldr	r3, [pc, #376]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a5d      	ldr	r2, [pc, #372]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	e00b      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a5a      	ldr	r2, [pc, #360]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fd fe27 	bl	8001ea0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fe23 	bl	8001ea0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0b1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCC_OscConfig+0x37e>
 8004278:	e014      	b.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fd fe11 	bl	8001ea0 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd fe0d 	bl	8001ea0 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e09b      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c0:	4b36      	ldr	r3, [pc, #216]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d061      	beq.n	8004390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d146      	bne.n	8004362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fd fde1 	bl	8001ea0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fd fddd 	bl	8001ea0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e06d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d108      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a19      	ldr	r1, [r3, #32]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	491b      	ldr	r1, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd fdb1 	bl	8001ea0 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7fd fdad 	bl	8001ea0 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x46a>
 8004360:	e035      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fd9a 	bl	8001ea0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fd96 	bl	8001ea0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e026      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x498>
 800438e:	e01e      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e019      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_OscConfig+0x500>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0d0      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	4965      	ldr	r1, [pc, #404]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800445a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d040      	beq.n	80044fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e073      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06b      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4936      	ldr	r1, [pc, #216]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fd fce8 	bl	8001ea0 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fd fce4 	bl	8001ea0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e053      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d210      	bcs.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 0207 	bic.w	r2, r3, #7
 8004512:	4922      	ldr	r1, [pc, #136]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1d0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fc46 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	080065f8 	.word	0x080065f8
 80045a8:	2000000c 	.word	0x2000000c
 80045ac:	20000010 	.word	0x20000010

080045b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ca:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCC_GetSysClockFreq+0x94>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d002      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x30>
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x36>
 80045de:	e027      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_RCC_GetSysClockFreq+0x98>)
 80045e2:	613b      	str	r3, [r7, #16]
      break;
 80045e4:	e027      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	0c9b      	lsrs	r3, r3, #18
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <HAL_RCC_GetSysClockFreq+0x9c>)
 80045f0:	5cd3      	ldrb	r3, [r2, r3]
 80045f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_GetSysClockFreq+0x94>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0c5b      	lsrs	r3, r3, #17
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	4a11      	ldr	r2, [pc, #68]	; (8004650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <HAL_RCC_GetSysClockFreq+0x98>)
 8004612:	fb03 f202 	mul.w	r2, r3, r2
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e004      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	613b      	str	r3, [r7, #16]
      break;
 800462e:	e002      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetSysClockFreq+0x98>)
 8004632:	613b      	str	r3, [r7, #16]
      break;
 8004634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004636:	693b      	ldr	r3, [r7, #16]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	007a1200 	.word	0x007a1200
 800464c:	08006610 	.word	0x08006610
 8004650:	08006620 	.word	0x08006620
 8004654:	003d0900 	.word	0x003d0900

08004658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <HAL_RCC_GetHCLKFreq+0x10>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	2000000c 	.word	0x2000000c

0800466c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004670:	f7ff fff2 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	08006608 	.word	0x08006608

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004698:	f7ff ffde 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	0adb      	lsrs	r3, r3, #11
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4903      	ldr	r1, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08006608 	.word	0x08006608

080046bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <RCC_Delay+0x34>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <RCC_Delay+0x38>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0a5b      	lsrs	r3, r3, #9
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046d8:	bf00      	nop
  }
  while (Delay --);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f9      	bne.n	80046d8 <RCC_Delay+0x1c>
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	10624dd3 	.word	0x10624dd3

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d07d      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	61d3      	str	r3, [r2, #28]
 8004730:	4b49      	ldr	r3, [pc, #292]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d118      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474c:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004758:	f7fd fba2 	bl	8001ea0 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7fd fb9e 	bl	8001ea0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e06d      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b3a      	ldr	r3, [pc, #232]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02e      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d027      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800479c:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a6:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047b2:	4a29      	ldr	r2, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fd fb6d 	bl	8001ea0 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fd fb69 	bl	8001ea0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e036      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ee      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4917      	ldr	r1, [pc, #92]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004804:	4b14      	ldr	r3, [pc, #80]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	490b      	ldr	r1, [pc, #44]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	42420440 	.word	0x42420440

08004864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e076      	b.n	8004964 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d009      	beq.n	800489c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
 800488e:	e005      	b.n	800489c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fcfe 	bl	80012b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	ea42 0103 	orr.w	r1, r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	0c1a      	lsrs	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f002 0204 	and.w	r2, r2, #4
 8004942:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004952:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e041      	b.n	8004a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fff6 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fd0a 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e044      	b.n	8004aae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xac>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x6c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_TIM_Base_Start_IT+0xb0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x6c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d00e      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x6c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x6c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x6c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d111      	bne.n	8004a9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d010      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9a:	e007      	b.n	8004aac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00

08004acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e041      	b.n	8004b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f839 	bl	8004b6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fc5a 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <HAL_TIM_PWM_Start+0x24>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e022      	b.n	8004be6 <HAL_TIM_PWM_Start+0x6a>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d109      	bne.n	8004bba <HAL_TIM_PWM_Start+0x3e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e015      	b.n	8004be6 <HAL_TIM_PWM_Start+0x6a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x58>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e008      	b.n	8004be6 <HAL_TIM_PWM_Start+0x6a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e072      	b.n	8004cd4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0x82>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfc:	e013      	b.n	8004c26 <HAL_TIM_PWM_Start+0xaa>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x92>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	e00b      	b.n	8004c26 <HAL_TIM_PWM_Start+0xaa>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c1c:	e003      	b.n	8004c26 <HAL_TIM_PWM_Start+0xaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fe84 	bl	800593c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <HAL_TIM_PWM_Start+0x160>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_PWM_Start+0xcc>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_TIM_PWM_Start+0x164>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_PWM_Start+0xd0>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_PWM_Start+0xd2>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_TIM_PWM_Start+0x160>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x122>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIM_PWM_Start+0x164>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x122>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x122>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIM_PWM_Start+0x168>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x122>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_TIM_PWM_Start+0x16c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x122>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_PWM_Start+0x170>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d010      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e007      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00

08004cf0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d841      	bhi.n	8004d88 <HAL_TIM_PWM_Stop_IT+0x98>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d89 	.word	0x08004d89
 8004d18:	08004d89 	.word	0x08004d89
 8004d1c:	08004d53 	.word	0x08004d53
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d77 	.word	0x08004d77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0202 	bic.w	r2, r2, #2
 8004d4e:	60da      	str	r2, [r3, #12]
      break;
 8004d50:	e01d      	b.n	8004d8e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0204 	bic.w	r2, r2, #4
 8004d60:	60da      	str	r2, [r3, #12]
      break;
 8004d62:	e014      	b.n	8004d8e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0208 	bic.w	r2, r2, #8
 8004d72:	60da      	str	r2, [r3, #12]
      break;
 8004d74:	e00b      	b.n	8004d8e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0210 	bic.w	r2, r2, #16
 8004d84:	60da      	str	r2, [r3, #12]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d161      	bne.n	8004e58 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fdcd 	bl	800593c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <HAL_TIM_PWM_Stop_IT+0x174>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIM_PWM_Stop_IT+0xc6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_TIM_PWM_Stop_IT+0x178>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_PWM_Stop_IT+0xca>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_TIM_PWM_Stop_IT+0xcc>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d017      	beq.n	8004df0 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <HAL_TIM_PWM_Stop_IT+0x100>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	f240 4344 	movw	r3, #1092	; 0x444
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_TIM_PWM_Stop_IT+0x100>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10f      	bne.n	8004e20 <HAL_TIM_PWM_Stop_IT+0x130>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	f240 4344 	movw	r3, #1092	; 0x444
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_PWM_Stop_IT+0x130>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <HAL_TIM_PWM_Stop_IT+0x140>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2e:	e013      	b.n	8004e58 <HAL_TIM_PWM_Stop_IT+0x168>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d104      	bne.n	8004e40 <HAL_TIM_PWM_Stop_IT+0x150>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e3e:	e00b      	b.n	8004e58 <HAL_TIM_PWM_Stop_IT+0x168>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d104      	bne.n	8004e50 <HAL_TIM_PWM_Stop_IT+0x160>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e4e:	e003      	b.n	8004e58 <HAL_TIM_PWM_Stop_IT+0x168>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40013400 	.word	0x40013400

08004e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa76 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa69 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fb ff01 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0204 	mvn.w	r2, #4
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa4c 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa3f 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fb fed7 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa22 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa15 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fb fead 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9f8 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9eb 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fb fe83 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0201 	mvn.w	r2, #1
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb fe57 	bl	8000c9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fd7a 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9b5 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0220 	mvn.w	r2, #32
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fd45 	bl	8005afe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005096:	2302      	movs	r3, #2
 8005098:	e0ae      	b.n	80051f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	f200 809f 	bhi.w	80051e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	080051e9 	.word	0x080051e9
 80050b8:	080051e9 	.word	0x080051e9
 80050bc:	080051e9 	.word	0x080051e9
 80050c0:	08005125 	.word	0x08005125
 80050c4:	080051e9 	.word	0x080051e9
 80050c8:	080051e9 	.word	0x080051e9
 80050cc:	080051e9 	.word	0x080051e9
 80050d0:	08005167 	.word	0x08005167
 80050d4:	080051e9 	.word	0x080051e9
 80050d8:	080051e9 	.word	0x080051e9
 80050dc:	080051e9 	.word	0x080051e9
 80050e0:	080051a7 	.word	0x080051a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f9e4 	bl	80054b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
      break;
 8005122:	e064      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fa34 	bl	8005598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6999      	ldr	r1, [r3, #24]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	619a      	str	r2, [r3, #24]
      break;
 8005164:	e043      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa87 	bl	8005680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0208 	orr.w	r2, r2, #8
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0204 	bic.w	r2, r2, #4
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
      break;
 80051a4:	e023      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fadb 	bl	8005768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69d9      	ldr	r1, [r3, #28]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021a      	lsls	r2, r3, #8
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	61da      	str	r2, [r3, #28]
      break;
 80051e6:	e002      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIM_ConfigClockSource+0x1c>
 8005218:	2302      	movs	r3, #2
 800521a:	e0b4      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x186>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005254:	d03e      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	f200 8087 	bhi.w	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	f000 8086 	beq.w	8005372 <HAL_TIM_ConfigClockSource+0x172>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d87f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d01a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d87b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d050      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x11a>
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d877      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b50      	cmp	r3, #80	; 0x50
 800527e:	d03c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xfa>
 8005280:	2b50      	cmp	r3, #80	; 0x50
 8005282:	d873      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d058      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x13a>
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d86f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d064      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	d86b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d060      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d867      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05c      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d05a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a4:	e062      	b.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	f000 fb22 	bl	80058fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	609a      	str	r2, [r3, #8]
      break;
 80052d2:	e04f      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	f000 fb0b 	bl	80058fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f6:	609a      	str	r2, [r3, #8]
      break;
 80052f8:	e03c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fa82 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2150      	movs	r1, #80	; 0x50
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fad9 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 8005318:	e02c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 faa0 	bl	800586c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2160      	movs	r1, #96	; 0x60
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fac9 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 8005338:	e01c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005346:	461a      	mov	r2, r3
 8005348:	f000 fa62 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fab9 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 8005358:	e00c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fab0 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800536a:	e003      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e000      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a33      	ldr	r2, [pc, #204]	; (80054a4 <TIM_Base_SetConfig+0xe0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a32      	ldr	r2, [pc, #200]	; (80054a8 <TIM_Base_SetConfig+0xe4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <TIM_Base_SetConfig+0xe8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <TIM_Base_SetConfig+0xec>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a2d      	ldr	r2, [pc, #180]	; (80054b4 <TIM_Base_SetConfig+0xf0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <TIM_Base_SetConfig+0xe0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <TIM_Base_SetConfig+0x82>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <TIM_Base_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00f      	beq.n	8005446 <TIM_Base_SetConfig+0x82>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d00b      	beq.n	8005446 <TIM_Base_SetConfig+0x82>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <TIM_Base_SetConfig+0xe8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <TIM_Base_SetConfig+0x82>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_Base_SetConfig+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_Base_SetConfig+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <TIM_Base_SetConfig+0xf0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <TIM_Base_SetConfig+0xe0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0xc8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <TIM_Base_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d103      	bne.n	8005494 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	615a      	str	r2, [r3, #20]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00

080054b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f023 0201 	bic.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0302 	bic.w	r3, r3, #2
 8005500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC1_SetConfig+0x64>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10c      	bne.n	8005536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0308 	bic.w	r3, r3, #8
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 0304 	bic.w	r3, r3, #4
 8005534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC1_SetConfig+0x8e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40013400 	.word	0x40013400

08005598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f023 0210 	bic.w	r2, r3, #16
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a21      	ldr	r2, [pc, #132]	; (8005678 <TIM_OC2_SetConfig+0xe0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0x68>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a20      	ldr	r2, [pc, #128]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a16      	ldr	r2, [pc, #88]	; (8005678 <TIM_OC2_SetConfig+0xe0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0x94>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d113      	bne.n	8005654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40013400 	.word	0x40013400

08005680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <TIM_OC3_SetConfig+0xe0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0x66>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a20      	ldr	r2, [pc, #128]	; (8005764 <TIM_OC3_SetConfig+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10d      	bne.n	8005702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC3_SetConfig+0xe0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC3_SetConfig+0x92>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC3_SetConfig+0xe4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d113      	bne.n	800573a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400

08005768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	031b      	lsls	r3, r3, #12
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a11      	ldr	r2, [pc, #68]	; (8005808 <TIM_OC4_SetConfig+0xa0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC4_SetConfig+0x68>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a10      	ldr	r2, [pc, #64]	; (800580c <TIM_OC4_SetConfig+0xa4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d109      	bne.n	80057e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40013400 	.word	0x40013400

08005810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 030a 	bic.w	r3, r3, #10
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	031b      	lsls	r3, r3, #12
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f043 0307 	orr.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	609a      	str	r2, [r3, #8]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005918:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	021a      	lsls	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	431a      	orrs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e050      	b.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00e      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10c      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00

08005a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e03d      	b.n	8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e042      	b.n	8005bba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fc f897 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2224      	movs	r2, #36	; 0x24
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fc80 	bl	800646c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b0ba      	sub	sp, #232	; 0xe8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_UART_IRQHandler+0x66>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb63 	bl	80062ee <UART_Receive_IT>
      return;
 8005c28:	e25b      	b.n	80060e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80de 	beq.w	8005df0 <HAL_UART_IRQHandler+0x22c>
 8005c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80d1 	beq.w	8005df0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_UART_IRQHandler+0xae>
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_UART_IRQHandler+0xd2>
 8005c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f043 0202 	orr.w	r2, r3, #2
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <HAL_UART_IRQHandler+0xf6>
 8005ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	f043 0204 	orr.w	r2, r3, #4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <HAL_UART_IRQHandler+0x126>
 8005cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	f043 0208 	orr.w	r2, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 81f2 	beq.w	80060d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_UART_IRQHandler+0x14e>
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 faee 	bl	80062ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <HAL_UART_IRQHandler+0x17a>
 8005d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04f      	beq.n	8005dde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9f8 	bl	8006134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d041      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1d9      	bne.n	8005d52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d013      	beq.n	8005dce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	4a7e      	ldr	r2, [pc, #504]	; (8005fa4 <HAL_UART_IRQHandler+0x3e0>)
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc fc62 	bl	800267c <HAL_DMA_Abort_IT>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00e      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f99c 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e00a      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f998 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	e006      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f994 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005dea:	e175      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	bf00      	nop
    return;
 8005dee:	e173      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f040 814f 	bne.w	8006098 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8148 	beq.w	8006098 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8141 	beq.w	8006098 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80b6 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8145 	beq.w	80060dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	f080 813e 	bcs.w	80060dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	f000 8088 	beq.w	8005f84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ea0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1d9      	bne.n	8005e74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ee4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e1      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3314      	adds	r3, #20
 8005f1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e3      	bne.n	8005efc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f66:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e3      	bne.n	8005f42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fc fb40 	bl	8002604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8bf 	bl	800611e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fa0:	e09c      	b.n	80060dc <HAL_UART_IRQHandler+0x518>
 8005fa2:	bf00      	nop
 8005fa4:	080061f9 	.word	0x080061f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 808e 	beq.w	80060e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8089 	beq.w	80060e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	623b      	str	r3, [r7, #32]
   return(result);
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3314      	adds	r3, #20
 8006026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800602a:	633a      	str	r2, [r7, #48]	; 0x30
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e3      	bne.n	8006006 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	60fb      	str	r3, [r7, #12]
   return(result);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0310 	bic.w	r3, r3, #16
 8006062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006070:	61fa      	str	r2, [r7, #28]
 8006072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	69b9      	ldr	r1, [r7, #24]
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	617b      	str	r3, [r7, #20]
   return(result);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e3      	bne.n	800604c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800608a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f844 	bl	800611e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006096:	e023      	b.n	80060e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <HAL_UART_IRQHandler+0x4f4>
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8b5 	bl	8006220 <UART_Transmit_IT>
    return;
 80060b6:	e014      	b.n	80060e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <HAL_UART_IRQHandler+0x51e>
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8f4 	bl	80062be <UART_EndTransmit_IT>
    return;
 80060d6:	e004      	b.n	80060e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80060e0:	bf00      	nop
  }
}
 80060e2:	37e8      	adds	r7, #232	; 0xe8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b095      	sub	sp, #84	; 0x54
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800615c:	643a      	str	r2, [r7, #64]	; 0x40
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	64bb      	str	r3, [r7, #72]	; 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d119      	bne.n	80061e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	647b      	str	r3, [r7, #68]	; 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061cc:	61ba      	str	r2, [r7, #24]
 80061ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e5      	bne.n	80061ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061ee:	bf00      	nop
 80061f0:	3754      	adds	r7, #84	; 0x54
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff7a 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b21      	cmp	r3, #33	; 0x21
 8006232:	d13e      	bne.n	80062b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623c:	d114      	bne.n	8006268 <UART_Transmit_IT+0x48>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d110      	bne.n	8006268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]
 8006266:	e008      	b.n	800627a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6211      	str	r1, [r2, #32]
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29b      	uxth	r3, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff ff02 	bl	80060e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08c      	sub	sp, #48	; 0x30
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b22      	cmp	r3, #34	; 0x22
 8006300:	f040 80ae 	bne.w	8006460 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d117      	bne.n	800633e <UART_Receive_IT+0x50>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	b29a      	uxth	r2, r3
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
 800633c:	e026      	b.n	800638c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d007      	beq.n	8006362 <UART_Receive_IT+0x74>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <UART_Receive_IT+0x82>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e008      	b.n	8006382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800639c:	2b00      	cmp	r3, #0
 800639e:	d15d      	bne.n	800645c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0220 	bic.w	r2, r2, #32
 80063ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d135      	bne.n	8006452 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	613b      	str	r3, [r7, #16]
   return(result);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f023 0310 	bic.w	r3, r3, #16
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640c:	623a      	str	r2, [r7, #32]
 800640e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	61bb      	str	r3, [r7, #24]
   return(result);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b10      	cmp	r3, #16
 800642c:	d10a      	bne.n	8006444 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fe67 	bl	800611e <HAL_UARTEx_RxEventCallback>
 8006450:	e002      	b.n	8006458 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff fe51 	bl	80060fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e002      	b.n	8006462 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3730      	adds	r7, #48	; 0x30
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064a6:	f023 030c 	bic.w	r3, r3, #12
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	; (8006580 <UART_SetConfig+0x114>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fe f8de 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	e002      	b.n	80064e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064dc:	f7fe f8c6 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 80064e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009a      	lsls	r2, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	4a22      	ldr	r2, [pc, #136]	; (8006584 <UART_SetConfig+0x118>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	0119      	lsls	r1, r3, #4
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009a      	lsls	r2, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	fbb2 f2f3 	udiv	r2, r2, r3
 8006518:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <UART_SetConfig+0x118>)
 800651a:	fba3 0302 	umull	r0, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2064      	movs	r0, #100	; 0x64
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	; 0x32
 800652c:	4a15      	ldr	r2, [pc, #84]	; (8006584 <UART_SetConfig+0x118>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006538:	4419      	add	r1, r3
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <UART_SetConfig+0x118>)
 8006552:	fba3 0302 	umull	r0, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2064      	movs	r0, #100	; 0x64
 800655a:	fb00 f303 	mul.w	r3, r0, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a07      	ldr	r2, [pc, #28]	; (8006584 <UART_SetConfig+0x118>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	440a      	add	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40013800 	.word	0x40013800
 8006584:	51eb851f 	.word	0x51eb851f

08006588 <memset>:
 8006588:	4603      	mov	r3, r0
 800658a:	4402      	add	r2, r0
 800658c:	4293      	cmp	r3, r2
 800658e:	d100      	bne.n	8006592 <memset+0xa>
 8006590:	4770      	bx	lr
 8006592:	f803 1b01 	strb.w	r1, [r3], #1
 8006596:	e7f9      	b.n	800658c <memset+0x4>

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	2600      	movs	r6, #0
 800659c:	4d0c      	ldr	r5, [pc, #48]	; (80065d0 <__libc_init_array+0x38>)
 800659e:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	f000 f81a 	bl	80065e0 <_init>
 80065ac:	2600      	movs	r6, #0
 80065ae:	4d0a      	ldr	r5, [pc, #40]	; (80065d8 <__libc_init_array+0x40>)
 80065b0:	4c0a      	ldr	r4, [pc, #40]	; (80065dc <__libc_init_array+0x44>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	08006624 	.word	0x08006624
 80065d4:	08006624 	.word	0x08006624
 80065d8:	08006624 	.word	0x08006624
 80065dc:	08006628 	.word	0x08006628

080065e0 <_init>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

080065ec <_fini>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr
