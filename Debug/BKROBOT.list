
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f24  08004f24  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f24  08004f24  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000001c  08004f48  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08004f48  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139d5  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003277  00000000  00000000  00033a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee2  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3dc  00000000  00000000  00038eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198b7  00000000  00000000  00054296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ed59  00000000  00000000  0006db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e78  00000000  00000000  0010c8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00111720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004ee0 	.word	0x08004ee0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000020 	.word	0x20000020
 8000220:	08004ee0 	.word	0x08004ee0

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000236:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <MX_ADC1_Init+0x140>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b49      	ldr	r3, [pc, #292]	; (8000360 <MX_ADC1_Init+0x13c>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b47      	ldr	r3, [pc, #284]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <MX_ADC1_Init+0x13c>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b44      	ldr	r3, [pc, #272]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b42      	ldr	r3, [pc, #264]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800025c:	4b40      	ldr	r3, [pc, #256]	; (8000360 <MX_ADC1_Init+0x13c>)
 800025e:	2208      	movs	r2, #8
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	483f      	ldr	r0, [pc, #252]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000264:	f001 f93a 	bl	80014dc <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fae3 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000272:	2308      	movs	r3, #8
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800027a:	2303      	movs	r3, #3
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4837      	ldr	r0, [pc, #220]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000284:	f001 fa14 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fad3 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000292:	2309      	movs	r3, #9
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4830      	ldr	r0, [pc, #192]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002a0:	f001 fa06 	bl	80016b0 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fac5 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002bc:	f001 f9f8 	bl	80016b0 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fab7 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002ca:	230b      	movs	r3, #11
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	4822      	ldr	r0, [pc, #136]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002d8:	f001 f9ea 	bl	80016b0 <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002e2:	f000 faa9 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002e6:	230c      	movs	r3, #12
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002ea:	2305      	movs	r3, #5
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	481b      	ldr	r0, [pc, #108]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002f4:	f001 f9dc 	bl	80016b0 <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002fe:	f000 fa9b 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000302:	230d      	movs	r3, #13
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000306:	2306      	movs	r3, #6
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4814      	ldr	r0, [pc, #80]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000310:	f001 f9ce 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800031a:	f000 fa8d 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800031e:	230e      	movs	r3, #14
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000322:	2307      	movs	r3, #7
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x13c>)
 800032c:	f001 f9c0 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000336:	f000 fa7f 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800033e:	2308      	movs	r3, #8
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000348:	f001 f9b2 	bl	80016b0 <HAL_ADC_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000352:	f000 fa71 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000038 	.word	0x20000038
 8000364:	40012400 	.word	0x40012400

08000368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a33      	ldr	r2, [pc, #204]	; (8000450 <HAL_ADC_MspInit+0xe8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d15f      	bne.n	8000448 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <HAL_ADC_MspInit+0xec>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a25      	ldr	r2, [pc, #148]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003d0:	233f      	movs	r3, #63	; 0x3f
 80003d2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d4:	2303      	movs	r3, #3
 80003d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4619      	mov	r1, r3
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <HAL_ADC_MspInit+0xf0>)
 80003e0:	f001 ffa4 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4619      	mov	r1, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <HAL_ADC_MspInit+0xf4>)
 80003f4:	f001 ff9a 	bl	800232c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <HAL_ADC_MspInit+0xfc>)
 80003fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800042e:	f001 fb87 	bl	8001b40 <HAL_DMA_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000438:	f000 f9fe 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000440:	621a      	str	r2, [r3, #32]
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40012400 	.word	0x40012400
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010c00 	.word	0x40010c00
 8000460:	20000068 	.word	0x20000068
 8000464:	40020008 	.word	0x40020008

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_DMA_Init+0x38>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	200b      	movs	r0, #11
 800048c:	f001 fb21 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	200b      	movs	r0, #11
 8000492:	f001 fb3a 	bl	8001b0a <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b48      	ldr	r3, [pc, #288]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0310 	and.w	r3, r3, #16
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b45      	ldr	r3, [pc, #276]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a44      	ldr	r2, [pc, #272]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b42      	ldr	r3, [pc, #264]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b3f      	ldr	r3, [pc, #252]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a3e      	ldr	r2, [pc, #248]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <MX_GPIO_Init+0x144>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b39      	ldr	r3, [pc, #228]	; (80005e8 <MX_GPIO_Init+0x144>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a38      	ldr	r2, [pc, #224]	; (80005e8 <MX_GPIO_Init+0x144>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b36      	ldr	r3, [pc, #216]	; (80005e8 <MX_GPIO_Init+0x144>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800051e:	4833      	ldr	r0, [pc, #204]	; (80005ec <MX_GPIO_Init+0x148>)
 8000520:	f002 f898 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8000524:	2200      	movs	r2, #0
 8000526:	f649 1102 	movw	r1, #39170	; 0x9902
 800052a:	4831      	ldr	r0, [pc, #196]	; (80005f0 <MX_GPIO_Init+0x14c>)
 800052c:	f002 f892 	bl	8002654 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_STEP_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2134      	movs	r1, #52	; 0x34
 8000534:	482f      	ldr	r0, [pc, #188]	; (80005f4 <MX_GPIO_Init+0x150>)
 8000536:	f002 f88d 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 800053a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4826      	ldr	r0, [pc, #152]	; (80005ec <MX_GPIO_Init+0x148>)
 8000554:	f001 feea 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8000558:	f649 1302 	movw	r3, #39170	; 0x9902
 800055c:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2302      	movs	r3, #2
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	481f      	ldr	r0, [pc, #124]	; (80005f0 <MX_GPIO_Init+0x14c>)
 8000572:	f001 fedb 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_STEP_Pin|SM_DIR_Pin;
 8000576:	2334      	movs	r3, #52	; 0x34
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	4819      	ldr	r0, [pc, #100]	; (80005f4 <MX_GPIO_Init+0x150>)
 800058e:	f001 fecd 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 8000592:	f24f 2308 	movw	r3, #61960	; 0xf208
 8000596:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <MX_GPIO_Init+0x150>)
 80005a8:	f001 fec0 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80005ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <MX_GPIO_Init+0x148>)
 80005c2:	f001 feb3 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80005c6:	2304      	movs	r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <MX_GPIO_Init+0x154>)
 80005da:	f001 fea7 	bl	800232c <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40011000 	.word	0x40011000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40011400 	.word	0x40011400

080005fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C2_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C2_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C2_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C2_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C2_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C2_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C2_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C2_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C2_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C2_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C2_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C2_Init+0x50>)
 800063a:	f002 f83d 	bl	80026b8 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f8f8 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000ac 	.word	0x200000ac
 8000650:	40005800 	.word	0x40005800
 8000654:	000186a0 	.word	0x000186a0

08000658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <HAL_I2C_MspInit+0x74>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d124      	bne.n	80006c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <HAL_I2C_MspInit+0x7c>)
 80006a6:	f001 fe41 	bl	800232c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 80006b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_I2C_MspInit+0x78>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40005800 	.word	0x40005800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fe9c 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f832 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f7ff fede 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e8:	f7ff febe 	bl	8000468 <MX_DMA_Init>
  MX_ADC1_Init();
 80006ec:	f7ff fd9a 	bl	8000224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fd84 	bl	80011fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006f4:	f000 fdac 	bl	8001250 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80006f8:	f7ff ff80 	bl	80005fc <MX_I2C2_Init>
  MX_SPI1_Init();
 80006fc:	f000 f98a 	bl	8000a14 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000700:	f000 fbe0 	bl	8000ec4 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000704:	f000 fada 	bl	8000cbc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000708:	f000 fb66 	bl	8000dd8 <MX_TIM5_Init>
  MX_TIM2_Init();
 800070c:	f000 fa8a 	bl	8000c24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <main+0x68>)
 8000712:	f002 feaf 	bl	8003474 <HAL_TIM_Base_Start_IT>
  setTimer(0, 10);
 8000716:	210a      	movs	r1, #10
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f92b 	bl	8000974 <setTimer>
  servo_init(SERVO1);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f890 	bl	8000844 <servo_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <main+0x6c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1fb      	bne.n	8000724 <main+0x4c>
		  setTimer(0, 10);
 800072c:	210a      	movs	r1, #10
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f920 	bl	8000974 <setTimer>
		  ledBlink();
 8000734:	f000 f866 	bl	8000804 <ledBlink>
		  testServo();
 8000738:	f000 f8e2 	bl	8000900 <testServo>
	  if(timer_flag[0] == 1){
 800073c:	e7f2      	b.n	8000724 <main+0x4c>
 800073e:	bf00      	nop
 8000740:	20000200 	.word	0x20000200
 8000744:	20000158 	.word	0x20000158

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fb96 	bl	8004e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000798:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 f8cc 	bl	8002940 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f843 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fb38 	bl	8002e44 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007da:	f000 f82d 	bl	8000838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007de:	2302      	movs	r3, #2
 80007e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fcb8 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007f6:	f000 f81f 	bl	8000838 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3758      	adds	r7, #88	; 0x58
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <ledBlink>:

/* USER CODE BEGIN 4 */

int led_debug_count = 0;
void ledBlink(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	led_debug_count++;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ledBlink+0x2c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <ledBlink+0x2c>)
 8000810:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <ledBlink+0x2c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b64      	cmp	r3, #100	; 0x64
 8000818:	d107      	bne.n	800082a <ledBlink+0x26>
		led_debug_count = 0;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <ledBlink+0x2c>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <ledBlink+0x30>)
 8000826:	f001 ff2d 	bl	8002684 <HAL_GPIO_TogglePin>
	}
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000100 	.word	0x20000100
 8000834:	40011000 	.word	0x40011000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <servo_init+0x20>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <servo_init+0x24>)
 8000858:	f002 fec4 	bl	80035e4 <HAL_TIM_PWM_Start>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000248 	.word	0x20000248

0800086c <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db35      	blt.n	80008e8 <servo_set_angle+0x7c>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2bb4      	cmp	r3, #180	; 0xb4
 8000880:	dc32      	bgt.n	80008e8 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <servo_set_angle+0x88>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	441a      	add	r2, r3
 8000892:	11d2      	asrs	r2, r2, #7
 8000894:	17db      	asrs	r3, r3, #31
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	3319      	adds	r3, #25
 800089a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <servo_set_angle+0x8c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <servo_set_angle+0x46>
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <servo_set_angle+0x90>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
 80008b0:	e01b      	b.n	80008ea <servo_set_angle+0x7e>
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <servo_set_angle+0x8c>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d104      	bne.n	80008c8 <servo_set_angle+0x5c>
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <servo_set_angle+0x90>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38
 80008c6:	e010      	b.n	80008ea <servo_set_angle+0x7e>
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <servo_set_angle+0x8c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d104      	bne.n	80008de <servo_set_angle+0x72>
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <servo_set_angle+0x90>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008dc:	e005      	b.n	80008ea <servo_set_angle+0x7e>
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <servo_set_angle+0x90>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	e000      	b.n	80008ea <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 80008e8:	bf00      	nop
}
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	b60b60b7 	.word	0xb60b60b7
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000248 	.word	0x20000248

08000900 <testServo>:

int servo_count = 0;
int angle = 90;
void testServo(){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	servo_count++;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <testServo+0x68>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <testServo+0x68>)
 800090e:	6013      	str	r3, [r2, #0]
	if(servo_count == 500){
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <testServo+0x68>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000918:	d122      	bne.n	8000960 <testServo+0x60>
		servo_count = 0;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <testServo+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
		angle += 45;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <testServo+0x6c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	332d      	adds	r3, #45	; 0x2d
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <testServo+0x6c>)
 8000928:	6013      	str	r3, [r2, #0]
		if(angle > 45) angle = 0;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <testServo+0x6c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b2d      	cmp	r3, #45	; 0x2d
 8000930:	dd02      	ble.n	8000938 <testServo+0x38>
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <testServo+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 3; i++){
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	e00d      	b.n	800095a <testServo+0x5a>
			servo_set_angle(servo_channel[i],angle);
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <testServo+0x70>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	461a      	mov	r2, r3
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <testServo+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4610      	mov	r0, r2
 8000950:	f7ff ff8c 	bl	800086c <servo_set_angle>
		for(int i = 0; i < 3; i++){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3301      	adds	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b02      	cmp	r3, #2
 800095e:	ddee      	ble.n	800093e <testServo+0x3e>
		}

	}
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000104 	.word	0x20000104
 800096c:	2000000c 	.word	0x2000000c
 8000970:	20000000 	.word	0x20000000

08000974 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 800097e:	4907      	ldr	r1, [pc, #28]	; (800099c <setTimer+0x28>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <setTimer+0x2c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2100      	movs	r1, #0
 800098e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000108 	.word	0x20000108
 80009a0:	20000158 	.word	0x20000158

080009a4 <timerRun>:

void timerRun(int index){
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <timerRun+0x48>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dd13      	ble.n	80009e0 <timerRun+0x3c>
		timer_counter[index]--;
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <timerRun+0x48>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	490a      	ldr	r1, [pc, #40]	; (80009ec <timerRun+0x48>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <timerRun+0x48>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	dc04      	bgt.n	80009e0 <timerRun+0x3c>
			timer_flag[index] = 1;
 80009d6:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <timerRun+0x4c>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2101      	movs	r1, #1
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000108 	.word	0x20000108
 80009f0:	20000158 	.word	0x20000158

080009f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a04:	d102      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x18>
		timerRun(0);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ffcc 	bl	80009a4 <timerRun>
	}

}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a66:	f002 fc31 	bl	80032cc <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f7ff fee2 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001a8 	.word	0x200001a8
 8000a7c:	40013000 	.word	0x40013000

08000a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_SPI_MspInit+0x88>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d12f      	bne.n	8000b00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ad0:	23b0      	movs	r3, #176	; 0xb0
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_SPI_MspInit+0x90>)
 8000ae4:	f001 fc22 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_SPI_MspInit+0x90>)
 8000afc:	f001 fc16 	bl	800232c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_MspInit+0x60>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_MspInit+0x60>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 fc71 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bce:	f001 f971 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000068 	.word	0x20000068

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f002 fdb9 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000200 	.word	0x20000200

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART1_IRQHandler+0x10>)
 8000bf6:	f003 fc65 	bl	80044c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000320 	.word	0x20000320

08000c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART2_IRQHandler+0x10>)
 8000c0a:	f003 fc5b 	bl	80044c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000368 	.word	0x20000368

08000c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c4a:	2247      	movs	r2, #71	; 0x47
 8000c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c6a:	f002 fbb3 	bl	80033d4 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c74:	f7ff fde0 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c86:	f002 ff31 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f7ff fdd2 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000ca2:	f003 faef 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f7ff fdc4 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000200 	.word	0x20000200

08000cbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cec:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <MX_TIM4_Init+0x118>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000cf4:	f240 529f 	movw	r2, #1439	; 0x59f
 8000cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d14:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d16:	f002 fb5d 	bl	80033d4 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d20:	f7ff fd8a 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d32:	f002 fedb 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d3c:	f7ff fd7c 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d42:	f002 fbf7 	bl	8003534 <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d4c:	f7ff fd74 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d60:	f003 fa90 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d6a:	f7ff fd65 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	; 0x60
 8000d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8000d72:	2319      	movs	r3, #25
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d86:	f002 fdef 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d90:	f7ff fd52 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2204      	movs	r2, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000d9c:	f002 fde4 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000da6:	f7ff fd47 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2208      	movs	r2, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000db2:	f002 fdd9 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000dbc:	f7ff fd3c 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM4_Init+0x114>)
 8000dc2:	f000 f9a3 	bl	800110c <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000248 	.word	0x20000248
 8000dd4:	40000800 	.word	0x40000800

08000dd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ec0 <MX_TIM5_Init+0xe8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e10:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e1e:	2263      	movs	r2, #99	; 0x63
 8000e20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e30:	f002 fad0 	bl	80033d4 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f7ff fcfd 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e4c:	f002 fe4e 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e56:	f7ff fcef 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e5c:	f002 fb6a 	bl	8003534 <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e66:	f7ff fce7 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000e7a:	f003 fa03 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f7ff fcd8 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000ea0:	f002 fd62 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f7ff fcc5 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM5_Init+0xe4>)
 8000eb0:	f000 f92c 	bl	800110c <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000290 	.word	0x20000290
 8000ec0:	40000c00 	.word	0x40000c00

08000ec4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b096      	sub	sp, #88	; 0x58
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 ffc3 	bl	8004e88 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f04:	4a50      	ldr	r2, [pc, #320]	; (8001048 <MX_TIM8_Init+0x184>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 8000f08:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f0a:	f240 1267 	movw	r2, #359	; 0x167
 8000f0e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f18:	2263      	movs	r2, #99	; 0x63
 8000f1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b49      	ldr	r3, [pc, #292]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b46      	ldr	r3, [pc, #280]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f2e:	4845      	ldr	r0, [pc, #276]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f30:	f002 fa50 	bl	80033d4 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000f3a:	f7ff fc7d 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f48:	4619      	mov	r1, r3
 8000f4a:	483e      	ldr	r0, [pc, #248]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f4c:	f002 fdce 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f56:	f7ff fc6f 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f5c:	f002 faea 	bl	8003534 <HAL_TIM_PWM_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f66:	f7ff fc67 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f76:	4619      	mov	r1, r3
 8000f78:	4832      	ldr	r0, [pc, #200]	; (8001044 <MX_TIM8_Init+0x180>)
 8000f7a:	f003 f983 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f84:	f7ff fc58 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	; 0x60
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4825      	ldr	r0, [pc, #148]	; (8001044 <MX_TIM8_Init+0x180>)
 8000fae:	f002 fcdb 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000fb8:	f7ff fc3e 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_TIM8_Init+0x180>)
 8000fc6:	f002 fccf 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000fd0:	f7ff fc32 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	2208      	movs	r2, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4819      	ldr	r0, [pc, #100]	; (8001044 <MX_TIM8_Init+0x180>)
 8000fde:	f002 fcc3 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000fe8:	f7ff fc26 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_TIM8_Init+0x180>)
 8000ff6:	f002 fcb7 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001000:	f7ff fc1a 	bl	8000838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM8_Init+0x180>)
 8001028:	f003 f998 	bl	800435c <HAL_TIMEx_ConfigBreakDeadTime>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001032:	f7ff fc01 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM8_Init+0x180>)
 8001038:	f000 f868 	bl	800110c <HAL_TIM_MspPostInit>

}
 800103c:	bf00      	nop
 800103e:	3758      	adds	r7, #88	; 0x58
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002d8 	.word	0x200002d8
 8001048:	40013400 	.word	0x40013400

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d114      	bne.n	8001088 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	201c      	movs	r0, #28
 800107c:	f000 fd29 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001080:	201c      	movs	r0, #28
 8001082:	f000 fd42 	bl	8001b0a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001086:	e034      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10c      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
}
 80010aa:	e022      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_TIM_Base_MspInit+0xb8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10c      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
}
 80010ce:	e010      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_TIM_Base_MspInit+0xbc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10b      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	40000800 	.word	0x40000800
 8001104:	40000c00 	.word	0x40000c00
 8001108:	40013400 	.word	0x40013400

0800110c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <HAL_TIM_MspPostInit+0xd4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d119      	bne.n	8001160 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8001144:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2302      	movs	r3, #2
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4619      	mov	r1, r3
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <HAL_TIM_MspPostInit+0xdc>)
 800115a:	f001 f8e7 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800115e:	e03b      	b.n	80011d8 <HAL_TIM_MspPostInit+0xcc>
  else if(timHandle->Instance==TIM5)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_TIM_MspPostInit+0xe0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d118      	bne.n	800119c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4619      	mov	r1, r3
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <HAL_TIM_MspPostInit+0xe4>)
 8001196:	f001 f8c9 	bl	800232c <HAL_GPIO_Init>
}
 800119a:	e01d      	b.n	80011d8 <HAL_TIM_MspPostInit+0xcc>
  else if(timHandle->Instance==TIM8)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_TIM_MspPostInit+0xe8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d118      	bne.n	80011d8 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_TIM_MspPostInit+0xd8>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 80011be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_TIM_MspPostInit+0xec>)
 80011d4:	f001 f8aa 	bl	800232c <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40000800 	.word	0x40000800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40000c00 	.word	0x40000c00
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40013400 	.word	0x40013400
 80011f8:	40011000 	.word	0x40011000

080011fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART1_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001234:	f003 f8f5 	bl	8004422 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f7ff fafb 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000320 	.word	0x20000320
 800124c:	40013800 	.word	0x40013800

08001250 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART2_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001288:	f003 f8cb 	bl	8004422 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f7ff fad1 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000368 	.word	0x20000368
 80012a0:	40004400 	.word	0x40004400

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3f      	ldr	r2, [pc, #252]	; (80013bc <HAL_UART_MspInit+0x118>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13a      	bne.n	800133a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4619      	mov	r1, r3
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <HAL_UART_MspInit+0x120>)
 800130a:	f001 f80f 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4619      	mov	r1, r3
 8001322:	4828      	ldr	r0, [pc, #160]	; (80013c4 <HAL_UART_MspInit+0x120>)
 8001324:	f001 f802 	bl	800232c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2025      	movs	r0, #37	; 0x25
 800132e:	f000 fbd0 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001332:	2025      	movs	r0, #37	; 0x25
 8001334:	f000 fbe9 	bl	8001b0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001338:	e03c      	b.n	80013b4 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <HAL_UART_MspInit+0x124>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d137      	bne.n	80013b4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134e:	61d3      	str	r3, [r2, #28]
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_UART_MspInit+0x11c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	2304      	movs	r3, #4
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <HAL_UART_MspInit+0x120>)
 8001388:	f000 ffd0 	bl	800232c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800138c:	2308      	movs	r3, #8
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	4619      	mov	r1, r3
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_UART_MspInit+0x120>)
 80013a0:	f000 ffc4 	bl	800232c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2026      	movs	r0, #38	; 0x26
 80013aa:	f000 fb92 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013ae:	2026      	movs	r0, #38	; 0x26
 80013b0:	f000 fbab 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40004400 	.word	0x40004400

080013cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff fc24 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013d2:	490c      	ldr	r1, [pc, #48]	; (8001404 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e8:	4c09      	ldr	r4, [pc, #36]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fd4f 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fa:	f7ff f96d 	bl	80006d8 <main>
  bx lr
 80013fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001408:	08004f2c 	.word	0x08004f2c
  ldr r2, =_sbss
 800140c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001410:	200003b4 	.word	0x200003b4

08001414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC1_2_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x28>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x28>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 fb47 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fb6e 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fb5f 	bl	8001b26 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 fb27 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000010 	.word	0x20000010
 800149c:	20000018 	.word	0x20000018
 80014a0:	20000014 	.word	0x20000014

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000018 	.word	0x20000018
 80014c4:	200003b0 	.word	0x200003b0

080014c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	200003b0 	.word	0x200003b0

080014dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ce      	b.n	800169c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ff24 	bl	8000368 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f9bd 	bl	80018a0 <ADC_ConversionStop_Disable>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 80a9 	bne.w	800168a <HAL_ADC_Init+0x1ae>
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80a5 	bne.w	800168a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4951      	ldr	r1, [pc, #324]	; (80016a4 <HAL_ADC_Init+0x1c8>)
 800155e:	428b      	cmp	r3, r1
 8001560:	d10a      	bne.n	8001578 <HAL_ADC_Init+0x9c>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800156a:	d002      	beq.n	8001572 <HAL_ADC_Init+0x96>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	e004      	b.n	800157c <HAL_ADC_Init+0xa0>
 8001572:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001576:	e001      	b.n	800157c <HAL_ADC_Init+0xa0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800157c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001584:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4313      	orrs	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001594:	d003      	beq.n	800159e <HAL_ADC_Init+0xc2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <HAL_ADC_Init+0xc8>
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	e000      	b.n	80015a6 <HAL_ADC_Init+0xca>
 80015a4:	2300      	movs	r3, #0
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7d1b      	ldrb	r3, [r3, #20]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d119      	bne.n	80015e8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	035a      	lsls	r2, r3, #13
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	e00b      	b.n	80015e8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f043 0220 	orr.w	r2, r3, #32
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_ADC_Init+0x1cc>)
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	430b      	orrs	r3, r1
 800160e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001618:	d003      	beq.n	8001622 <HAL_ADC_Init+0x146>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d104      	bne.n	800162c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	3b01      	subs	r3, #1
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	430a      	orrs	r2, r1
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_ADC_Init+0x1d0>)
 8001648:	4013      	ands	r3, r2
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	429a      	cmp	r2, r3
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001666:	e018      	b.n	800169a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f023 0312 	bic.w	r3, r3, #18
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001688:	e007      	b.n	800169a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013c00 	.word	0x40013c00
 80016a8:	ffe1f7fd 	.word	0xffe1f7fd
 80016ac:	ff1f0efe 	.word	0xff1f0efe

080016b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x20>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0dc      	b.n	800188a <HAL_ADC_ConfigChannel+0x1da>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d81c      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b05      	subs	r3, #5
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
 8001718:	e03c      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d81c      	bhi.n	800175c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b23      	subs	r3, #35	; 0x23
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b23      	subs	r3, #35	; 0x23
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
 800175a:	e01b      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d91c      	bls.n	80017d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68d9      	ldr	r1, [r3, #12]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	3b1e      	subs	r3, #30
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6898      	ldr	r0, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	e019      	b.n	800180a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4019      	ands	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6898      	ldr	r0, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d003      	beq.n	800181a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001816:	2b11      	cmp	r3, #17
 8001818:	d132      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_ADC_ConfigChannel+0x1e4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d125      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d126      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001840:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d11a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_ConfigChannel+0x1e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_ADC_ConfigChannel+0x1ec>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9a      	lsrs	r2, r3, #18
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3b01      	subs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x1b2>
 800186e:	e007      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40012400 	.word	0x40012400
 8001898:	20000010 	.word	0x20000010
 800189c:	431bde83 	.word	0x431bde83

080018a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d12e      	bne.n	8001918 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ca:	f7ff fdfd 	bl	80014c8 <HAL_GetTick>
 80018ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018d0:	e01b      	b.n	800190a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018d2:	f7ff fdf9 	bl	80014c8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d914      	bls.n	800190a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10d      	bne.n	800190a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e007      	b.n	800191a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d0dc      	beq.n	80018d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4906      	ldr	r1, [pc, #24]	; (80019bc <__NVIC_EnableIRQ+0x34>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff90 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff2d 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff42 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff35 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e059      	b.n	8001c0a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_DMA_Init+0xd4>)
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d80f      	bhi.n	8001b82 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_DMA_Init+0xd8>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_DMA_Init+0xdc>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	009a      	lsls	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <HAL_DMA_Init+0xe0>)
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b80:	e00e      	b.n	8001ba0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_DMA_Init+0xe4>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <HAL_DMA_Init+0xdc>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	009a      	lsls	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_DMA_Init+0xe8>)
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40020407 	.word	0x40020407
 8001c18:	bffdfff8 	.word	0xbffdfff8
 8001c1c:	cccccccd 	.word	0xcccccccd
 8001c20:	40020000 	.word	0x40020000
 8001c24:	bffdfbf8 	.word	0xbffdfbf8
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e020      	b.n	8001c98 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 020e 	bic.w	r2, r2, #14
 8001c64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d005      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e0d6      	b.n	8001e76 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 020e 	bic.w	r2, r2, #14
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_DMA_Abort_IT+0x1dc>)
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d958      	bls.n	8001da6 <HAL_DMA_Abort_IT+0x102>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a62      	ldr	r2, [pc, #392]	; (8001e84 <HAL_DMA_Abort_IT+0x1e0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d04f      	beq.n	8001d9e <HAL_DMA_Abort_IT+0xfa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a61      	ldr	r2, [pc, #388]	; (8001e88 <HAL_DMA_Abort_IT+0x1e4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d048      	beq.n	8001d9a <HAL_DMA_Abort_IT+0xf6>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5f      	ldr	r2, [pc, #380]	; (8001e8c <HAL_DMA_Abort_IT+0x1e8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d040      	beq.n	8001d94 <HAL_DMA_Abort_IT+0xf0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5e      	ldr	r2, [pc, #376]	; (8001e90 <HAL_DMA_Abort_IT+0x1ec>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d038      	beq.n	8001d8e <HAL_DMA_Abort_IT+0xea>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5c      	ldr	r2, [pc, #368]	; (8001e94 <HAL_DMA_Abort_IT+0x1f0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d030      	beq.n	8001d88 <HAL_DMA_Abort_IT+0xe4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <HAL_DMA_Abort_IT+0x1f4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d028      	beq.n	8001d82 <HAL_DMA_Abort_IT+0xde>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_DMA_Abort_IT+0x1dc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d020      	beq.n	8001d7c <HAL_DMA_Abort_IT+0xd8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_DMA_Abort_IT+0x1f8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d019      	beq.n	8001d78 <HAL_DMA_Abort_IT+0xd4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <HAL_DMA_Abort_IT+0x1fc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_Abort_IT+0xd0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <HAL_DMA_Abort_IT+0x200>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00a      	beq.n	8001d6e <HAL_DMA_Abort_IT+0xca>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_DMA_Abort_IT+0x204>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d102      	bne.n	8001d68 <HAL_DMA_Abort_IT+0xc4>
 8001d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d66:	e01b      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6c:	e018      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	e015      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d74:	2310      	movs	r3, #16
 8001d76:	e013      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e011      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d80:	e00e      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d86:	e00b      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8c:	e008      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	e005      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	e002      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Abort_IT+0xfc>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_DMA_Abort_IT+0x208>)
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	e057      	b.n	8001e56 <HAL_DMA_Abort_IT+0x1b2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <HAL_DMA_Abort_IT+0x1e0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d04f      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x1ac>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_DMA_Abort_IT+0x1e4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d048      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x1a8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_DMA_Abort_IT+0x1e8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d040      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x1a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <HAL_DMA_Abort_IT+0x1ec>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d038      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x19c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_DMA_Abort_IT+0x1f0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d030      	beq.n	8001e3a <HAL_DMA_Abort_IT+0x196>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <HAL_DMA_Abort_IT+0x1f4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d028      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x190>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_DMA_Abort_IT+0x1dc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d020      	beq.n	8001e2e <HAL_DMA_Abort_IT+0x18a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <HAL_DMA_Abort_IT+0x1f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x186>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_DMA_Abort_IT+0x1fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x182>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_DMA_Abort_IT+0x200>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00a      	beq.n	8001e20 <HAL_DMA_Abort_IT+0x17c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_DMA_Abort_IT+0x204>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d102      	bne.n	8001e1a <HAL_DMA_Abort_IT+0x176>
 8001e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e18:	e01b      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1e:	e018      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e24:	e015      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e26:	2310      	movs	r3, #16
 8001e28:	e013      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e011      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e32:	e00e      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e38:	e00b      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3e:	e008      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	e005      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4a:	e002      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	e000      	b.n	8001e52 <HAL_DMA_Abort_IT+0x1ae>
 8001e50:	2301      	movs	r3, #1
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_DMA_Abort_IT+0x20c>)
 8001e54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
    } 
  }
  return status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40020080 	.word	0x40020080
 8001e84:	40020008 	.word	0x40020008
 8001e88:	4002001c 	.word	0x4002001c
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	40020044 	.word	0x40020044
 8001e94:	40020058 	.word	0x40020058
 8001e98:	4002006c 	.word	0x4002006c
 8001e9c:	40020408 	.word	0x40020408
 8001ea0:	4002041c 	.word	0x4002041c
 8001ea4:	40020430 	.word	0x40020430
 8001ea8:	40020444 	.word	0x40020444
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80f1 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x20c>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80eb 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_DMA_IRQHandler+0x1d8>)
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d958      	bls.n	8001fc6 <HAL_DMA_IRQHandler+0x112>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_DMA_IRQHandler+0x1dc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04f      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x10a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <HAL_DMA_IRQHandler+0x1e0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d048      	beq.n	8001fba <HAL_DMA_IRQHandler+0x106>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <HAL_DMA_IRQHandler+0x1e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d040      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x100>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a59      	ldr	r2, [pc, #356]	; (800209c <HAL_DMA_IRQHandler+0x1e8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d038      	beq.n	8001fae <HAL_DMA_IRQHandler+0xfa>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a57      	ldr	r2, [pc, #348]	; (80020a0 <HAL_DMA_IRQHandler+0x1ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d030      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xf4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d028      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0xee>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_DMA_IRQHandler+0x1d8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d020      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xe8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d019      	beq.n	8001f98 <HAL_DMA_IRQHandler+0xe4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a50      	ldr	r2, [pc, #320]	; (80020ac <HAL_DMA_IRQHandler+0x1f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xe0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00a      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xda>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_DMA_IRQHandler+0x200>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d102      	bne.n	8001f88 <HAL_DMA_IRQHandler+0xd4>
 8001f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f86:	e01b      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001f88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f8c:	e018      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	e015      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	e013      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e011      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001f9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fa0:	e00e      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa6:	e00b      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fac:	e008      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb2:	e005      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb8:	e002      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	e000      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x10c>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	4a3d      	ldr	r2, [pc, #244]	; (80020b8 <HAL_DMA_IRQHandler+0x204>)
 8001fc2:	6053      	str	r3, [r2, #4]
 8001fc4:	e057      	b.n	8002076 <HAL_DMA_IRQHandler+0x1c2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_DMA_IRQHandler+0x1dc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04f      	beq.n	8002070 <HAL_DMA_IRQHandler+0x1bc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_DMA_IRQHandler+0x1e0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d048      	beq.n	800206c <HAL_DMA_IRQHandler+0x1b8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_DMA_IRQHandler+0x1e4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_IRQHandler+0x1b2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_DMA_IRQHandler+0x1e8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d038      	beq.n	8002060 <HAL_DMA_IRQHandler+0x1ac>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <HAL_DMA_IRQHandler+0x1ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d030      	beq.n	800205a <HAL_DMA_IRQHandler+0x1a6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d028      	beq.n	8002054 <HAL_DMA_IRQHandler+0x1a0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_DMA_IRQHandler+0x1d8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d020      	beq.n	800204e <HAL_DMA_IRQHandler+0x19a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_DMA_IRQHandler+0x196>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_DMA_IRQHandler+0x1f8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d012      	beq.n	8002046 <HAL_DMA_IRQHandler+0x192>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00a      	beq.n	8002040 <HAL_DMA_IRQHandler+0x18c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_DMA_IRQHandler+0x200>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <HAL_DMA_IRQHandler+0x186>
 8002034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002038:	e01b      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 800203a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800203e:	e018      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002044:	e015      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	e013      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 800204a:	2304      	movs	r3, #4
 800204c:	e011      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 800204e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002052:	e00e      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002058:	e00b      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 800205a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800205e:	e008      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002064:	e005      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206a:	e002      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	e000      	b.n	8002072 <HAL_DMA_IRQHandler+0x1be>
 8002070:	2304      	movs	r3, #4
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_DMA_IRQHandler+0x208>)
 8002074:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8136 	beq.w	80022ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002088:	e130      	b.n	80022ec <HAL_DMA_IRQHandler+0x438>
 800208a:	bf00      	nop
 800208c:	40020080 	.word	0x40020080
 8002090:	40020008 	.word	0x40020008
 8002094:	4002001c 	.word	0x4002001c
 8002098:	40020030 	.word	0x40020030
 800209c:	40020044 	.word	0x40020044
 80020a0:	40020058 	.word	0x40020058
 80020a4:	4002006c 	.word	0x4002006c
 80020a8:	40020408 	.word	0x40020408
 80020ac:	4002041c 	.word	0x4002041c
 80020b0:	40020430 	.word	0x40020430
 80020b4:	40020444 	.word	0x40020444
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2202      	movs	r2, #2
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80dd 	beq.w	800228c <HAL_DMA_IRQHandler+0x3d8>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80d7 	beq.w	800228c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10b      	bne.n	8002104 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 020a 	bic.w	r2, r2, #10
 80020fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_DMA_IRQHandler+0x444>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d958      	bls.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a79      	ldr	r2, [pc, #484]	; (80022fc <HAL_DMA_IRQHandler+0x448>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d04f      	beq.n	80021ba <HAL_DMA_IRQHandler+0x306>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a78      	ldr	r2, [pc, #480]	; (8002300 <HAL_DMA_IRQHandler+0x44c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d048      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x302>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a76      	ldr	r2, [pc, #472]	; (8002304 <HAL_DMA_IRQHandler+0x450>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d040      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x2fc>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_DMA_IRQHandler+0x454>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d038      	beq.n	80021aa <HAL_DMA_IRQHandler+0x2f6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a73      	ldr	r2, [pc, #460]	; (800230c <HAL_DMA_IRQHandler+0x458>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d030      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2f0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_DMA_IRQHandler+0x45c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d028      	beq.n	800219e <HAL_DMA_IRQHandler+0x2ea>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_DMA_IRQHandler+0x444>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d020      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2e4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_DMA_IRQHandler+0x460>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d019      	beq.n	8002194 <HAL_DMA_IRQHandler+0x2e0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6c      	ldr	r2, [pc, #432]	; (8002318 <HAL_DMA_IRQHandler+0x464>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d012      	beq.n	8002190 <HAL_DMA_IRQHandler+0x2dc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6b      	ldr	r2, [pc, #428]	; (800231c <HAL_DMA_IRQHandler+0x468>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00a      	beq.n	800218a <HAL_DMA_IRQHandler+0x2d6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_DMA_IRQHandler+0x46c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d102      	bne.n	8002184 <HAL_DMA_IRQHandler+0x2d0>
 800217e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002182:	e01b      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 8002184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002188:	e018      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 800218a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218e:	e015      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 8002190:	2320      	movs	r3, #32
 8002192:	e013      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 8002194:	2302      	movs	r3, #2
 8002196:	e011      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 8002198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219c:	e00e      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 800219e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021a2:	e00b      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 80021a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a8:	e008      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 80021aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ae:	e005      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	e002      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 80021b6:	2320      	movs	r3, #32
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x308>
 80021ba:	2302      	movs	r3, #2
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_DMA_IRQHandler+0x470>)
 80021be:	6053      	str	r3, [r2, #4]
 80021c0:	e057      	b.n	8002272 <HAL_DMA_IRQHandler+0x3be>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_DMA_IRQHandler+0x448>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04f      	beq.n	800226c <HAL_DMA_IRQHandler+0x3b8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_DMA_IRQHandler+0x44c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d048      	beq.n	8002268 <HAL_DMA_IRQHandler+0x3b4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_DMA_IRQHandler+0x450>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_DMA_IRQHandler+0x3ae>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_DMA_IRQHandler+0x454>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d038      	beq.n	800225c <HAL_DMA_IRQHandler+0x3a8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_DMA_IRQHandler+0x458>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d030      	beq.n	8002256 <HAL_DMA_IRQHandler+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a45      	ldr	r2, [pc, #276]	; (8002310 <HAL_DMA_IRQHandler+0x45c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d028      	beq.n	8002250 <HAL_DMA_IRQHandler+0x39c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <HAL_DMA_IRQHandler+0x444>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d020      	beq.n	800224a <HAL_DMA_IRQHandler+0x396>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_DMA_IRQHandler+0x460>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_DMA_IRQHandler+0x392>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_DMA_IRQHandler+0x464>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d012      	beq.n	8002242 <HAL_DMA_IRQHandler+0x38e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_DMA_IRQHandler+0x468>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00a      	beq.n	800223c <HAL_DMA_IRQHandler+0x388>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_DMA_IRQHandler+0x46c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_DMA_IRQHandler+0x382>
 8002230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002234:	e01b      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223a:	e018      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002240:	e015      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002242:	2320      	movs	r3, #32
 8002244:	e013      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002246:	2302      	movs	r3, #2
 8002248:	e011      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	e00e      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002254:	e00b      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225a:	e008      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 800225c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002260:	e005      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002266:	e002      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 8002268:	2320      	movs	r3, #32
 800226a:	e000      	b.n	800226e <HAL_DMA_IRQHandler+0x3ba>
 800226c:	2302      	movs	r3, #2
 800226e:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <HAL_DMA_IRQHandler+0x474>)
 8002270:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d034      	beq.n	80022ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800228a:	e02f      	b.n	80022ec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2208      	movs	r2, #8
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d028      	beq.n	80022ee <HAL_DMA_IRQHandler+0x43a>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d023      	beq.n	80022ee <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 020e 	bic.w	r2, r2, #14
 80022b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
    }
  }
  return;
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
}
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40020080 	.word	0x40020080
 80022fc:	40020008 	.word	0x40020008
 8002300:	4002001c 	.word	0x4002001c
 8002304:	40020030 	.word	0x40020030
 8002308:	40020044 	.word	0x40020044
 800230c:	40020058 	.word	0x40020058
 8002310:	4002006c 	.word	0x4002006c
 8002314:	40020408 	.word	0x40020408
 8002318:	4002041c 	.word	0x4002041c
 800231c:	40020430 	.word	0x40020430
 8002320:	40020444 	.word	0x40020444
 8002324:	40020400 	.word	0x40020400
 8002328:	40020000 	.word	0x40020000

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e179      	b.n	8002634 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002340:	2201      	movs	r2, #1
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8168 	bne.w	800262e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a96      	ldr	r2, [pc, #600]	; (80025bc <HAL_GPIO_Init+0x290>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002368:	4a94      	ldr	r2, [pc, #592]	; (80025bc <HAL_GPIO_Init+0x290>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d875      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800236e:	4a94      	ldr	r2, [pc, #592]	; (80025c0 <HAL_GPIO_Init+0x294>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d058      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002374:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_GPIO_Init+0x294>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d86f      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800237a:	4a92      	ldr	r2, [pc, #584]	; (80025c4 <HAL_GPIO_Init+0x298>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d052      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002380:	4a90      	ldr	r2, [pc, #576]	; (80025c4 <HAL_GPIO_Init+0x298>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d869      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002386:	4a90      	ldr	r2, [pc, #576]	; (80025c8 <HAL_GPIO_Init+0x29c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d04c      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 800238c:	4a8e      	ldr	r2, [pc, #568]	; (80025c8 <HAL_GPIO_Init+0x29c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d863      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002392:	4a8e      	ldr	r2, [pc, #568]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d046      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002398:	4a8c      	ldr	r2, [pc, #560]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d85d      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d82a      	bhi.n	80023f8 <HAL_GPIO_Init+0xcc>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d859      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <HAL_GPIO_Init+0x80>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002413 	.word	0x08002413
 80023b8:	08002455 	.word	0x08002455
 80023bc:	0800245b 	.word	0x0800245b
 80023c0:	0800245b 	.word	0x0800245b
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800245b 	.word	0x0800245b
 80023cc:	0800245b 	.word	0x0800245b
 80023d0:	0800245b 	.word	0x0800245b
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	0800245b 	.word	0x0800245b
 80023dc:	0800245b 	.word	0x0800245b
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	0800245b 	.word	0x0800245b
 80023ec:	0800245b 	.word	0x0800245b
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	4a75      	ldr	r2, [pc, #468]	; (80025d0 <HAL_GPIO_Init+0x2a4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023fe:	e02c      	b.n	800245a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e029      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	3304      	adds	r3, #4
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e024      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e01f      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	330c      	adds	r3, #12
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e01a      	b.n	800245c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242e:	2304      	movs	r3, #4
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e013      	b.n	800245c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	611a      	str	r2, [r3, #16]
          break;
 8002446:	e009      	b.n	800245c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	615a      	str	r2, [r3, #20]
          break;
 8002452:	e003      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x130>
          break;
 800245a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d801      	bhi.n	8002466 <HAL_GPIO_Init+0x13a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <HAL_GPIO_Init+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d802      	bhi.n	8002478 <HAL_GPIO_Init+0x14c>
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x152>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3b08      	subs	r3, #8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	210f      	movs	r1, #15
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80c1 	beq.w	800262e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c4:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <HAL_GPIO_Init+0x2b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01f      	beq.n	8002530 <HAL_GPIO_Init+0x204>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x2b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d019      	beq.n	800252c <HAL_GPIO_Init+0x200>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1fc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_GPIO_Init+0x2bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1f8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a38      	ldr	r2, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x2c0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1f4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x2c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1f0>
 8002518:	2305      	movs	r3, #5
 800251a:	e00a      	b.n	8002532 <HAL_GPIO_Init+0x206>
 800251c:	2306      	movs	r3, #6
 800251e:	e008      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002520:	2304      	movs	r3, #4
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002524:	2303      	movs	r3, #3
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002528:	2302      	movs	r3, #2
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x206>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4924      	ldr	r1, [pc, #144]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4920      	ldr	r1, [pc, #128]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	491a      	ldr	r1, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d025      	beq.n	80025f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4910      	ldr	r1, [pc, #64]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e025      	b.n	8002606 <HAL_GPIO_Init+0x2da>
 80025ba:	bf00      	nop
 80025bc:	10320000 	.word	0x10320000
 80025c0:	10310000 	.word	0x10310000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	10210000 	.word	0x10210000
 80025cc:	10120000 	.word	0x10120000
 80025d0:	10110000 	.word	0x10110000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40010c00 	.word	0x40010c00
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40011800 	.word	0x40011800
 80025f0:	40011c00 	.word	0x40011c00
 80025f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_GPIO_Init+0x324>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	43db      	mvns	r3, r3
 8002600:	4913      	ldr	r1, [pc, #76]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002602:	4013      	ands	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	43db      	mvns	r3, r3
 8002628:	4909      	ldr	r1, [pc, #36]	; (8002650 <HAL_GPIO_Init+0x324>)
 800262a:	4013      	ands	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3301      	adds	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f ae7e 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	372c      	adds	r7, #44	; 0x2c
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43d9      	mvns	r1, r3
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	400b      	ands	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	611a      	str	r2, [r3, #16]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e12b      	b.n	8002922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fd ffba 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800271c:	f000 fcda 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a81      	ldr	r2, [pc, #516]	; (800292c <HAL_I2C_Init+0x274>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d807      	bhi.n	800273c <HAL_I2C_Init+0x84>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_I2C_Init+0x278>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e006      	b.n	800274a <HAL_I2C_Init+0x92>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a7d      	ldr	r2, [pc, #500]	; (8002934 <HAL_I2C_Init+0x27c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	bf94      	ite	ls
 8002744:	2301      	movls	r3, #1
 8002746:	2300      	movhi	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0e7      	b.n	8002922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_I2C_Init+0x280>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_I2C_Init+0x274>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d802      	bhi.n	800278c <HAL_I2C_Init+0xd4>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	e009      	b.n	80027a0 <HAL_I2C_Init+0xe8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_I2C_Init+0x284>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	495c      	ldr	r1, [pc, #368]	; (800292c <HAL_I2C_Init+0x274>)
 80027bc:	428b      	cmp	r3, r1
 80027be:	d819      	bhi.n	80027f4 <HAL_I2C_Init+0x13c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d4:	400b      	ands	r3, r1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_I2C_Init+0x138>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e59      	subs	r1, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	e051      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e04f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <HAL_I2C_Init+0x168>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e012      	b.n	8002846 <HAL_I2C_Init+0x18e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	0099      	lsls	r1, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x196>
 800284a:	2301      	movs	r3, #1
 800284c:	e022      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10e      	bne.n	8002874 <HAL_I2C_Init+0x1bc>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e58      	subs	r0, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	440b      	add	r3, r1
 8002864:	fbb0 f3f3 	udiv	r3, r0, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	e00f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e58      	subs	r0, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	0099      	lsls	r1, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	6809      	ldr	r1, [r1, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6911      	ldr	r1, [r2, #16]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	000186a0 	.word	0x000186a0
 8002930:	001e847f 	.word	0x001e847f
 8002934:	003d08ff 	.word	0x003d08ff
 8002938:	431bde83 	.word	0x431bde83
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e272      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8087 	beq.w	8002a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b04      	cmp	r3, #4
 800296a:	d00c      	beq.n	8002986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800296c:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d112      	bne.n	800299e <HAL_RCC_OscConfig+0x5e>
 8002978:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	4b89      	ldr	r3, [pc, #548]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d06c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x12c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d168      	bne.n	8002a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e24c      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x76>
 80029a8:	4b80      	ldr	r3, [pc, #512]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a7f      	ldr	r2, [pc, #508]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e02e      	b.n	8002a14 <HAL_RCC_OscConfig+0xd4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b7b      	ldr	r3, [pc, #492]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7a      	ldr	r2, [pc, #488]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b78      	ldr	r3, [pc, #480]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a77      	ldr	r2, [pc, #476]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e01d      	b.n	8002a14 <HAL_RCC_OscConfig+0xd4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0xbc>
 80029e2:	4b72      	ldr	r3, [pc, #456]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a71      	ldr	r2, [pc, #452]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b6f      	ldr	r3, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6e      	ldr	r2, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0xd4>
 80029fc:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6a      	ldr	r2, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a67      	ldr	r2, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd54 	bl	80014c8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fd50 	bl	80014c8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e200      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0xe4>
 8002a42:	e014      	b.n	8002a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fd40 	bl	80014c8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fd3c 	bl	80014c8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1ec      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x10c>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7a:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d11c      	bne.n	8002acc <HAL_RCC_OscConfig+0x18c>
 8002a92:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d116      	bne.n	8002acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x176>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1c0      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4939      	ldr	r1, [pc, #228]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	e03a      	b.n	8002b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fcf5 	bl	80014c8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fcf1 	bl	80014c8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e1a1      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4927      	ldr	r1, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fcd4 	bl	80014c8 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe fcd0 	bl	80014c8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e180      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d03a      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d019      	beq.n	8002b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fcb4 	bl	80014c8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe fcb0 	bl	80014c8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e160      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCC_OscConfig+0x26c>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f000 face 	bl	8003124 <RCC_Delay>
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe fc9a 	bl	80014c8 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fc96 	bl	80014c8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e146      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	42420000 	.word	0x42420000
 8002bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e9      	bne.n	8002b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a6 	beq.w	8002d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4a87      	ldr	r2, [pc, #540]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	61d3      	str	r3, [r2, #28]
 8002bee:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x4c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x4c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x4c8>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fc57 	bl	80014c8 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fc53 	bl	80014c8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e103      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x4c8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x312>
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	e02d      	b.n	8002cae <HAL_RCC_OscConfig+0x36e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x334>
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a69      	ldr	r2, [pc, #420]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6213      	str	r3, [r2, #32]
 8002c66:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6213      	str	r3, [r2, #32]
 8002c72:	e01c      	b.n	8002cae <HAL_RCC_OscConfig+0x36e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x356>
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x36e>
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a5a      	ldr	r2, [pc, #360]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fc07 	bl	80014c8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fc03 	bl	80014c8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0b1      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ee      	beq.n	8002cbe <HAL_RCC_OscConfig+0x37e>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fbf1 	bl	80014c8 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fbed 	bl	80014c8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e09b      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8087 	beq.w	8002e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d061      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d146      	bne.n	8002dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fbc1 	bl	80014c8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fbbd 	bl	80014c8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e06d      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d108      	bne.n	8002d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4921      	ldr	r1, [pc, #132]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a19      	ldr	r1, [r3, #32]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	430b      	orrs	r3, r1
 8002d96:	491b      	ldr	r1, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe fb91 	bl	80014c8 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe fb8d 	bl	80014c8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e03d      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x46a>
 8002dc8:	e035      	b.n	8002e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x4cc>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fb7a 	bl	80014c8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fb76 	bl	80014c8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e026      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x498>
 8002df6:	e01e      	b.n	8002e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e019      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_OscConfig+0x500>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d0      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d910      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4965      	ldr	r1, [pc, #404]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b8      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494d      	ldr	r1, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d040      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e073      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06b      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4936      	ldr	r1, [pc, #216]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fac8 	bl	80014c8 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fe fac4 	bl	80014c8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e053      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d210      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 0207 	bic.w	r2, r3, #7
 8002f7a:	4922      	ldr	r1, [pc, #136]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e032      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4916      	ldr	r1, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f821 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	490a      	ldr	r1, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	5ccb      	ldrb	r3, [r1, r3]
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1cc>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1d0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fa26 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40022000 	.word	0x40022000
 8003008:	40021000 	.word	0x40021000
 800300c:	08004ef8 	.word	0x08004ef8
 8003010:	20000010 	.word	0x20000010
 8003014:	20000014 	.word	0x20000014

08003018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x30>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x36>
 8003046:	e027      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	e027      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	0c9b      	lsrs	r3, r3, #18
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0c5b      	lsrs	r3, r3, #17
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e004      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	613b      	str	r3, [r7, #16]
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800309a:	613b      	str	r3, [r7, #16]
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	693b      	ldr	r3, [r7, #16]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	007a1200 	.word	0x007a1200
 80030b4:	08004f10 	.word	0x08004f10
 80030b8:	08004f20 	.word	0x08004f20
 80030bc:	003d0900 	.word	0x003d0900

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000010 	.word	0x20000010

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004f08 	.word	0x08004f08

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffde 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08004f08 	.word	0x08004f08

08003124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCC_Delay+0x34>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <RCC_Delay+0x38>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003140:	bf00      	nop
  }
  while (Delay --);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <RCC_Delay+0x1c>
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	20000010 	.word	0x20000010
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fe f982 	bl	80014c8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	e008      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe f97e 	bl	80014c8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e06d      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d027      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe f94d 	bl	80014c8 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe f949 	bl	80014c8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e036      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4917      	ldr	r1, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420440 	.word	0x42420440

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e076      	b.n	80033cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e005      	b.n	8003304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fbae 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1a      	lsrs	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f002 0204 	and.w	r2, r2, #4
 80033aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd fe26 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 fc56 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e044      	b.n	8003516 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_TIM_Base_Start_IT+0xac>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_TIM_Base_Start_IT+0xb0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d00e      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_TIM_Base_Start_IT+0xb4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a16      	ldr	r2, [pc, #88]	; (800352c <HAL_TIM_Base_Start_IT+0xb8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_TIM_Base_Start_IT+0xbc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d010      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	e007      	b.n	8003514 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40013400 	.word	0x40013400
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00

08003534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f839 	bl	80035d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fba6 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x24>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e022      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d109      	bne.n	8003622 <HAL_TIM_PWM_Start+0x3e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e015      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d109      	bne.n	800363c <HAL_TIM_PWM_Start+0x58>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e008      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e072      	b.n	800373c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003664:	e013      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0x92>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	e00b      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	e003      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fdd0 	bl	800423c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	; (8003744 <HAL_TIM_PWM_Start+0x160>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_PWM_Start+0xcc>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <HAL_TIM_PWM_Start+0x164>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_TIM_PWM_Start+0xd0>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_PWM_Start+0xd2>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_TIM_PWM_Start+0x160>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIM_PWM_Start+0x122>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_TIM_PWM_Start+0x164>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIM_PWM_Start+0x122>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d00e      	beq.n	8003706 <HAL_TIM_PWM_Start+0x122>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_TIM_PWM_Start+0x168>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIM_PWM_Start+0x122>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_TIM_PWM_Start+0x16c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIM_PWM_Start+0x122>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_TIM_PWM_Start+0x170>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d111      	bne.n	800372a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d010      	beq.n	800373a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e007      	b.n	800373a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa76 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa69 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa78 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0204 	mvn.w	r2, #4
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa4c 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa3f 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa4e 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa22 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa15 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa24 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9f8 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9eb 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9fa 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0201 	mvn.w	r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd f88c 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fd84 	bl	8004410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9be 	bl	8003cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0220 	mvn.w	r2, #32
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fd4f 	bl	80043fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0ae      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	f200 809f 	bhi.w	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003ad5 	.word	0x08003ad5
 80039a4:	08003ad5 	.word	0x08003ad5
 80039a8:	08003ad5 	.word	0x08003ad5
 80039ac:	08003a11 	.word	0x08003a11
 80039b0:	08003ad5 	.word	0x08003ad5
 80039b4:	08003ad5 	.word	0x08003ad5
 80039b8:	08003ad5 	.word	0x08003ad5
 80039bc:	08003a53 	.word	0x08003a53
 80039c0:	08003ad5 	.word	0x08003ad5
 80039c4:	08003ad5 	.word	0x08003ad5
 80039c8:	08003ad5 	.word	0x08003ad5
 80039cc:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f9ee 	bl	8003db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0208 	orr.w	r2, r2, #8
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
      break;
 8003a0e:	e064      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fa3e 	bl	8003e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
      break;
 8003a50:	e043      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa91 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0204 	bic.w	r2, r2, #4
 8003a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]
      break;
 8003a90:	e023      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fae5 	bl	8004068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d03e      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	f200 8087 	bhi.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_TIM_ConfigClockSource+0x172>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d87f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d01a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xa6>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d87b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d050      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x11a>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d877      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d03c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d873      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d058      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x13a>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d86f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d064      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d060      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d867      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d05a      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	f000 fb2c 	bl	80041fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	609a      	str	r2, [r3, #8]
      break;
 8003bbe:	e04f      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	f000 fb15 	bl	80041fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e03c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fa8c 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2150      	movs	r1, #80	; 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fae3 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c04:	e02c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 faaa 	bl	800416c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2160      	movs	r1, #96	; 0x60
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fad3 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c24:	e01c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fa6c 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fac3 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 faba 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a33      	ldr	r2, [pc, #204]	; (8003da4 <TIM_Base_SetConfig+0xe0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a32      	ldr	r2, [pc, #200]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <TIM_Base_SetConfig+0xe8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a2e      	ldr	r2, [pc, #184]	; (8003db0 <TIM_Base_SetConfig+0xec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <TIM_Base_SetConfig+0xf0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <TIM_Base_SetConfig+0xe0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <TIM_Base_SetConfig+0xe8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <TIM_Base_SetConfig+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <TIM_Base_SetConfig+0xf0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <TIM_Base_SetConfig+0xe0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0xc8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00

08003db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f023 0201 	bic.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0302 	bic.w	r3, r3, #2
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <TIM_OC1_SetConfig+0xd8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC1_SetConfig+0x64>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <TIM_OC1_SetConfig+0xdc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10c      	bne.n	8003e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0308 	bic.w	r3, r3, #8
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <TIM_OC1_SetConfig+0xd8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC1_SetConfig+0x8e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <TIM_OC1_SetConfig+0xdc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d111      	bne.n	8003e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40013400 	.word	0x40013400

08003e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 0210 	bic.w	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0320 	bic.w	r3, r3, #32
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <TIM_OC2_SetConfig+0xe0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC2_SetConfig+0x68>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <TIM_OC2_SetConfig+0xe4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10d      	bne.n	8003f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC2_SetConfig+0xe0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC2_SetConfig+0x94>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC2_SetConfig+0xe4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d113      	bne.n	8003f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a21      	ldr	r2, [pc, #132]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC3_SetConfig+0x66>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <TIM_OC4_SetConfig+0xa0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC4_SetConfig+0x68>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <TIM_OC4_SetConfig+0xa4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40013400 	.word	0x40013400

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	031b      	lsls	r3, r3, #12
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	021a      	lsls	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2201      	movs	r2, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e050      	b.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d00e      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a15      	ldr	r2, [pc, #84]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a14      	ldr	r2, [pc, #80]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40013400 	.word	0x40013400
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00

0800435c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004374:	2302      	movs	r3, #2
 8004376:	e03d      	b.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e042      	b.n	80044ba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fc ff2b 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	; 0x24
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004464:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fc80 	bl	8004d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b0ba      	sub	sp, #232	; 0xe8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <HAL_UART_IRQHandler+0x66>
 8004516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fb63 	bl	8004bee <UART_Receive_IT>
      return;
 8004528:	e25b      	b.n	80049e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800452a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80de 	beq.w	80046f0 <HAL_UART_IRQHandler+0x22c>
 8004534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80d1 	beq.w	80046f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_UART_IRQHandler+0xae>
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0xd2>
 800457e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f043 0202 	orr.w	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0xf6>
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <HAL_UART_IRQHandler+0x126>
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f043 0208 	orr.w	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 81f2 	beq.w	80049d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_UART_IRQHandler+0x14e>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 faee 	bl	8004bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_UART_IRQHandler+0x17a>
 8004636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04f      	beq.n	80046de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9f8 	bl	8004a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d041      	beq.n	80046d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3314      	adds	r3, #20
 8004658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800468a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1d9      	bne.n	8004652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	4a7e      	ldr	r2, [pc, #504]	; (80048a4 <HAL_UART_IRQHandler+0x3e0>)
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd faf6 	bl	8001ca4 <HAL_DMA_Abort_IT>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e00e      	b.n	80046ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f99c 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e00a      	b.n	80046ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f998 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e006      	b.n	80046ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f994 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80046ea:	e175      	b.n	80049d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	bf00      	nop
    return;
 80046ee:	e173      	b.n	80049d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 814f 	bne.w	8004998 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8148 	beq.w	8004998 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8141 	beq.w	8004998 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80b6 	beq.w	80048a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8145 	beq.w	80049dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475a:	429a      	cmp	r2, r3
 800475c:	f080 813e 	bcs.w	80049dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b20      	cmp	r3, #32
 8004770:	f000 8088 	beq.w	8004884 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800478a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800478e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1d9      	bne.n	8004774 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e1      	bne.n	80047c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800482e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e3      	bne.n	80047fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004866:	65ba      	str	r2, [r7, #88]	; 0x58
 8004868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800486c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e3      	bne.n	8004842 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd f9d4 	bl	8001c2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004892:	b29b      	uxth	r3, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8bf 	bl	8004a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048a0:	e09c      	b.n	80049dc <HAL_UART_IRQHandler+0x518>
 80048a2:	bf00      	nop
 80048a4:	08004af9 	.word	0x08004af9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 808e 	beq.w	80049e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8089 	beq.w	80049e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048f2:	647a      	str	r2, [r7, #68]	; 0x44
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	623b      	str	r3, [r7, #32]
   return(result);
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800492a:	633a      	str	r2, [r7, #48]	; 0x30
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60fb      	str	r3, [r7, #12]
   return(result);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	617b      	str	r3, [r7, #20]
   return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800498a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f844 	bl	8004a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004996:	e023      	b.n	80049e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d009      	beq.n	80049b8 <HAL_UART_IRQHandler+0x4f4>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f8b5 	bl	8004b20 <UART_Transmit_IT>
    return;
 80049b6:	e014      	b.n	80049e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <HAL_UART_IRQHandler+0x51e>
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8f4 	bl	8004bbe <UART_EndTransmit_IT>
    return;
 80049d6:	e004      	b.n	80049e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049e0:	bf00      	nop
  }
}
 80049e2:	37e8      	adds	r7, #232	; 0xe8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b095      	sub	sp, #84	; 0x54
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d119      	bne.n	8004ae0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0310 	bic.w	r3, r3, #16
 8004ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004acc:	61ba      	str	r2, [r7, #24]
 8004ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6979      	ldr	r1, [r7, #20]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aee:	bf00      	nop
 8004af0:	3754      	adds	r7, #84	; 0x54
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff ff7a 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b21      	cmp	r3, #33	; 0x21
 8004b32:	d13e      	bne.n	8004bb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d114      	bne.n	8004b68 <UART_Transmit_IT+0x48>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d110      	bne.n	8004b68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]
 8004b66:	e008      	b.n	8004b7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6211      	str	r1, [r2, #32]
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4619      	mov	r1, r3
 8004b88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff02 	bl	80049e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b08c      	sub	sp, #48	; 0x30
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b22      	cmp	r3, #34	; 0x22
 8004c00:	f040 80ae 	bne.w	8004d60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d117      	bne.n	8004c3e <UART_Receive_IT+0x50>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d113      	bne.n	8004c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c3c:	e026      	b.n	8004c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d007      	beq.n	8004c62 <UART_Receive_IT+0x74>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <UART_Receive_IT+0x82>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e008      	b.n	8004c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d15d      	bne.n	8004d5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0220 	bic.w	r2, r2, #32
 8004cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d135      	bne.n	8004d52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	623a      	str	r2, [r7, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d10a      	bne.n	8004d44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fe67 	bl	8004a1e <HAL_UARTEx_RxEventCallback>
 8004d50:	e002      	b.n	8004d58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fe51 	bl	80049fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e002      	b.n	8004d62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004da6:	f023 030c 	bic.w	r3, r3, #12
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <UART_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d103      	bne.n	8004ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fe f992 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	e002      	b.n	8004de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fe f97a 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009a      	lsls	r2, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <UART_SetConfig+0x118>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	0119      	lsls	r1, r3, #4
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <UART_SetConfig+0x118>)
 8004e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2064      	movs	r0, #100	; 0x64
 8004e22:	fb00 f303 	mul.w	r3, r0, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	3332      	adds	r3, #50	; 0x32
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <UART_SetConfig+0x118>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	4419      	add	r1, r3
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <UART_SetConfig+0x118>)
 8004e52:	fba3 0302 	umull	r0, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2064      	movs	r0, #100	; 0x64
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	3332      	adds	r3, #50	; 0x32
 8004e64:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <UART_SetConfig+0x118>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	440a      	add	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40013800 	.word	0x40013800
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <memset>:
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4402      	add	r2, r0
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d100      	bne.n	8004e92 <memset+0xa>
 8004e90:	4770      	bx	lr
 8004e92:	f803 1b01 	strb.w	r1, [r3], #1
 8004e96:	e7f9      	b.n	8004e8c <memset+0x4>

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	4d0c      	ldr	r5, [pc, #48]	; (8004ed0 <__libc_init_array+0x38>)
 8004e9e:	4c0d      	ldr	r4, [pc, #52]	; (8004ed4 <__libc_init_array+0x3c>)
 8004ea0:	1b64      	subs	r4, r4, r5
 8004ea2:	10a4      	asrs	r4, r4, #2
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	f000 f81a 	bl	8004ee0 <_init>
 8004eac:	2600      	movs	r6, #0
 8004eae:	4d0a      	ldr	r5, [pc, #40]	; (8004ed8 <__libc_init_array+0x40>)
 8004eb0:	4c0a      	ldr	r4, [pc, #40]	; (8004edc <__libc_init_array+0x44>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	08004f24 	.word	0x08004f24
 8004ed4:	08004f24 	.word	0x08004f24
 8004ed8:	08004f24 	.word	0x08004f24
 8004edc:	08004f28 	.word	0x08004f28

08004ee0 <_init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr

08004eec <_fini>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr
