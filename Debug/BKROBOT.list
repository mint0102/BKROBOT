
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005308  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005518  08005518  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005518  08005518  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000001c  0800553c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800553c  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136c0  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a9  00000000  00000000  00033748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  000368f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efc  00000000  00000000  00037c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3f2  00000000  00000000  00038b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acc8  00000000  00000000  00053f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009edb6  00000000  00000000  0006ebce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f00  00000000  00000000  0010d984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00112884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	00000000 	.word	0x00000000
 8000204:	080054d4 	.word	0x080054d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000020 	.word	0x20000020
 8000220:	080054d4 	.word	0x080054d4

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000236:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <MX_ADC1_Init+0x140>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b49      	ldr	r3, [pc, #292]	; (8000360 <MX_ADC1_Init+0x13c>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b47      	ldr	r3, [pc, #284]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <MX_ADC1_Init+0x13c>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b44      	ldr	r3, [pc, #272]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b42      	ldr	r3, [pc, #264]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800025c:	4b40      	ldr	r3, [pc, #256]	; (8000360 <MX_ADC1_Init+0x13c>)
 800025e:	2208      	movs	r2, #8
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	483f      	ldr	r0, [pc, #252]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000264:	f001 fa78 	bl	8001758 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fb61 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000272:	2308      	movs	r3, #8
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800027a:	2303      	movs	r3, #3
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4837      	ldr	r0, [pc, #220]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000284:	f001 fb52 	bl	800192c <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fb51 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000292:	2309      	movs	r3, #9
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4830      	ldr	r0, [pc, #192]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002a0:	f001 fb44 	bl	800192c <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fb43 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002bc:	f001 fb36 	bl	800192c <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fb35 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002ca:	230b      	movs	r3, #11
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	4822      	ldr	r0, [pc, #136]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002d8:	f001 fb28 	bl	800192c <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002e2:	f000 fb27 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002e6:	230c      	movs	r3, #12
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002ea:	2305      	movs	r3, #5
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	481b      	ldr	r0, [pc, #108]	; (8000360 <MX_ADC1_Init+0x13c>)
 80002f4:	f001 fb1a 	bl	800192c <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002fe:	f000 fb19 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000302:	230d      	movs	r3, #13
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000306:	2306      	movs	r3, #6
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4814      	ldr	r0, [pc, #80]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000310:	f001 fb0c 	bl	800192c <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800031a:	f000 fb0b 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800031e:	230e      	movs	r3, #14
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000322:	2307      	movs	r3, #7
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x13c>)
 800032c:	f001 fafe 	bl	800192c <HAL_ADC_ConfigChannel>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000336:	f000 fafd 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800033e:	2308      	movs	r3, #8
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <MX_ADC1_Init+0x13c>)
 8000348:	f001 faf0 	bl	800192c <HAL_ADC_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000352:	f000 faef 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000038 	.word	0x20000038
 8000364:	40012400 	.word	0x40012400

08000368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a33      	ldr	r2, [pc, #204]	; (8000450 <HAL_ADC_MspInit+0xe8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d15f      	bne.n	8000448 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <HAL_ADC_MspInit+0xec>)
 800038e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <HAL_ADC_MspInit+0xec>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a25      	ldr	r2, [pc, #148]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <HAL_ADC_MspInit+0xec>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003d0:	233f      	movs	r3, #63	; 0x3f
 80003d2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d4:	2303      	movs	r3, #3
 80003d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4619      	mov	r1, r3
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <HAL_ADC_MspInit+0xf0>)
 80003e0:	f002 f8e2 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4619      	mov	r1, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <HAL_ADC_MspInit+0xf4>)
 80003f4:	f002 f8d8 	bl	80025a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <HAL_ADC_MspInit+0xfc>)
 80003fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 800042e:	f001 fcc5 	bl	8001dbc <HAL_DMA_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000438:	f000 fa7c 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000440:	621a      	str	r2, [r3, #32]
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_ADC_MspInit+0xf8>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40012400 	.word	0x40012400
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010c00 	.word	0x40010c00
 8000460:	20000068 	.word	0x20000068
 8000464:	40020008 	.word	0x40020008

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_DMA_Init+0x38>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	200b      	movs	r0, #11
 800048c:	f001 fc5f 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	200b      	movs	r0, #11
 8000492:	f001 fc78 	bl	8001d86 <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <MX_GPIO_Init+0x160>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a51      	ldr	r2, [pc, #324]	; (8000604 <MX_GPIO_Init+0x160>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b4f      	ldr	r3, [pc, #316]	; (8000604 <MX_GPIO_Init+0x160>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0310 	and.w	r3, r3, #16
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b4c      	ldr	r3, [pc, #304]	; (8000604 <MX_GPIO_Init+0x160>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a4b      	ldr	r2, [pc, #300]	; (8000604 <MX_GPIO_Init+0x160>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <MX_GPIO_Init+0x160>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b46      	ldr	r3, [pc, #280]	; (8000604 <MX_GPIO_Init+0x160>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a45      	ldr	r2, [pc, #276]	; (8000604 <MX_GPIO_Init+0x160>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b43      	ldr	r3, [pc, #268]	; (8000604 <MX_GPIO_Init+0x160>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b40      	ldr	r3, [pc, #256]	; (8000604 <MX_GPIO_Init+0x160>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a3f      	ldr	r2, [pc, #252]	; (8000604 <MX_GPIO_Init+0x160>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <MX_GPIO_Init+0x160>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800051e:	483a      	ldr	r0, [pc, #232]	; (8000608 <MX_GPIO_Init+0x164>)
 8000520:	f002 f9d6 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8000524:	2200      	movs	r2, #0
 8000526:	f649 1102 	movw	r1, #39170	; 0x9902
 800052a:	4838      	ldr	r0, [pc, #224]	; (800060c <MX_GPIO_Init+0x168>)
 800052c:	f002 f9d0 	bl	80028d0 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2124      	movs	r1, #36	; 0x24
 8000534:	4836      	ldr	r0, [pc, #216]	; (8000610 <MX_GPIO_Init+0x16c>)
 8000536:	f002 f9cb 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 800053a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	482d      	ldr	r0, [pc, #180]	; (8000608 <MX_GPIO_Init+0x164>)
 8000554:	f002 f828 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8000558:	f649 1302 	movw	r3, #39170	; 0x9902
 800055c:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2302      	movs	r3, #2
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	4826      	ldr	r0, [pc, #152]	; (800060c <MX_GPIO_Init+0x168>)
 8000572:	f002 f819 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 8000576:	2304      	movs	r3, #4
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	4820      	ldr	r0, [pc, #128]	; (8000610 <MX_GPIO_Init+0x16c>)
 800058e:	f002 f80b 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 8000592:	f24f 2308 	movw	r3, #61960	; 0xf208
 8000596:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	481a      	ldr	r0, [pc, #104]	; (8000610 <MX_GPIO_Init+0x16c>)
 80005a8:	f001 fffe 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80005ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <MX_GPIO_Init+0x164>)
 80005c2:	f001 fff1 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80005c6:	2304      	movs	r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <MX_GPIO_Init+0x170>)
 80005da:	f001 ffe5 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 80005de:	2320      	movs	r3, #32
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <MX_GPIO_Init+0x16c>)
 80005f6:	f001 ffd7 	bl	80025a8 <HAL_GPIO_Init>

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	40011000 	.word	0x40011000
 800060c:	40010800 	.word	0x40010800
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40011400 	.word	0x40011400

08000618 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C2_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C2_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C2_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C2_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C2_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C2_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C2_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C2_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C2_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C2_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C2_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C2_Init+0x50>)
 8000656:	f002 f96d 	bl	8002934 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f968 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000ac 	.word	0x200000ac
 800066c:	40005800 	.word	0x40005800
 8000670:	000186a0 	.word	0x000186a0

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d124      	bne.n	80006de <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_I2C_MspInit+0x78>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_I2C_MspInit+0x78>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_I2C_MspInit+0x78>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b2:	2312      	movs	r3, #18
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_I2C_MspInit+0x7c>)
 80006c2:	f001 ff71 	bl	80025a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_I2C_MspInit+0x78>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_I2C_MspInit+0x78>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_I2C_MspInit+0x78>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40005800 	.word	0x40005800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010c00 	.word	0x40010c00

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 ffcc 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f84e 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff fed0 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff feb0 	bl	8000468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000708:	f7ff fd8c 	bl	8000224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800070c:	f000 feb4 	bl	8001478 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000710:	f000 fedc 	bl	80014cc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000714:	f7ff ff80 	bl	8000618 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000718:	f000 f9ea 	bl	8000af0 <MX_SPI1_Init>
  MX_TIM8_Init();
 800071c:	f000 fcc0 	bl	80010a0 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000720:	f000 fbba 	bl	8000e98 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000724:	f000 fc46 	bl	8000fb4 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000728:	f000 faf4 	bl	8000d14 <MX_TIM2_Init>
  MX_TIM3_Init();
 800072c:	f000 fb3e 	bl	8000dac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000730:	4817      	ldr	r0, [pc, #92]	; (8000790 <main+0x9c>)
 8000732:	f002 ffdd 	bl	80036f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000736:	2100      	movs	r1, #0
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <main+0xa0>)
 800073a:	f003 f891 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800073e:	2104      	movs	r1, #4
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <main+0xa0>)
 8000742:	f003 f88d 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000746:	2108      	movs	r1, #8
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <main+0xa0>)
 800074a:	f003 f889 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800074e:	210c      	movs	r1, #12
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <main+0xa0>)
 8000752:	f003 f885 	bl	8003860 <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 8000756:	210a      	movs	r1, #10
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f989 	bl	8000a70 <setTimer>
  setTimer(1, 1000);
 800075e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f984 	bl	8000a70 <setTimer>
  servo_init(SERVO1);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f8e9 	bl	8000940 <servo_init>
  moveSM(3);
 800076e:	2003      	movs	r0, #3
 8000770:	f000 f8be 	bl	80008f0 <moveSM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <main+0xa4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d1fb      	bne.n	8000774 <main+0x80>
		  setTimer(0, 10);
 800077c:	210a      	movs	r1, #10
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f976 	bl	8000a70 <setTimer>
		  ledBlink();
 8000784:	f000 f89a 	bl	80008bc <ledBlink>
		  testServo();
 8000788:	f000 f938 	bl	80009fc <testServo>
	  if(timer_flag[0] == 1){
 800078c:	e7f2      	b.n	8000774 <main+0x80>
 800078e:	bf00      	nop
 8000790:	20000204 	.word	0x20000204
 8000794:	20000324 	.word	0x20000324
 8000798:	2000015c 	.word	0x2000015c

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	; 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fe66 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f9e0 	bl	8002bbc <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000802:	f000 f897 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fc4c 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082e:	f000 f881 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000832:	2302      	movs	r3, #2
 8000834:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fdcc 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800084a:	f000 f873 	bl	8000934 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3758      	adds	r7, #88	; 0x58
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000866:	d105      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x1e>
		timerRun(0);
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f919 	bl	8000aa0 <timerRun>
		timerRun(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 f916 	bl	8000aa0 <timerRun>
	}
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10c      	bne.n	80008a8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000896:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	dc03      	bgt.n	80008a8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80008a4:	f003 f99e 	bl	8003be4 <HAL_TIM_PWM_Stop_IT>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40000400 	.word	0x40000400
 80008b4:	20000100 	.word	0x20000100
 80008b8:	2000024c 	.word	0x2000024c

080008bc <ledBlink>:

int led_debug_count = 0;
void ledBlink(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	led_debug_count++;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <ledBlink+0x2c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <ledBlink+0x2c>)
 80008c8:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <ledBlink+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b64      	cmp	r3, #100	; 0x64
 80008d0:	d107      	bne.n	80008e2 <ledBlink+0x26>
		led_debug_count = 0;
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <ledBlink+0x2c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <ledBlink+0x30>)
 80008de:	f002 f80f 	bl	8002900 <HAL_GPIO_TogglePin>
	}
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000104 	.word	0x20000104
 80008ec:	40011000 	.word	0x40011000

080008f0 <moveSM>:

void moveSM(int cycle){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
//	if(cycle >= 0){
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <moveSM+0x38>)
 80008fe:	f001 ffe7 	bl	80028d0 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	22c8      	movs	r2, #200	; 0xc8
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <moveSM+0x3c>)
 800090c:	6013      	str	r3, [r2, #0]
//	}
//	if(cycle < 0){
//		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
//		count_spr = SPR * cycle * -1;
//	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <moveSM+0x40>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2232      	movs	r2, #50	; 0x32
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000916:	2100      	movs	r1, #0
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <moveSM+0x40>)
 800091a:	f003 f85b 	bl	80039d4 <HAL_TIM_PWM_Start_IT>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010c00 	.word	0x40010c00
 800092c:	20000100 	.word	0x20000100
 8000930:	2000024c 	.word	0x2000024c

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <servo_init+0x20>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <servo_init+0x24>)
 8000954:	f002 ff84 	bl	8003860 <HAL_TIM_PWM_Start>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000294 	.word	0x20000294

08000968 <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db35      	blt.n	80009e4 <servo_set_angle+0x7c>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2bb4      	cmp	r3, #180	; 0xb4
 800097c:	dc32      	bgt.n	80009e4 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <servo_set_angle+0x88>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	441a      	add	r2, r3
 800098e:	11d2      	asrs	r2, r2, #7
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	3319      	adds	r3, #25
 8000996:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <servo_set_angle+0x8c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d104      	bne.n	80009ae <servo_set_angle+0x46>
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <servo_set_angle+0x90>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
 80009ac:	e01b      	b.n	80009e6 <servo_set_angle+0x7e>
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <servo_set_angle+0x8c>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d104      	bne.n	80009c4 <servo_set_angle+0x5c>
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <servo_set_angle+0x90>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6393      	str	r3, [r2, #56]	; 0x38
 80009c2:	e010      	b.n	80009e6 <servo_set_angle+0x7e>
 80009c4:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <servo_set_angle+0x8c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	d104      	bne.n	80009da <servo_set_angle+0x72>
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <servo_set_angle+0x90>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009d8:	e005      	b.n	80009e6 <servo_set_angle+0x7e>
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <servo_set_angle+0x90>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	e000      	b.n	80009e6 <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 80009e4:	bf00      	nop
}
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	b60b60b7 	.word	0xb60b60b7
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000294 	.word	0x20000294

080009fc <testServo>:

int servo_count = 0;
int angle = 90;
void testServo(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	servo_count++;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <testServo+0x68>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <testServo+0x68>)
 8000a0a:	6013      	str	r3, [r2, #0]
	if(servo_count == 500){
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <testServo+0x68>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a14:	d122      	bne.n	8000a5c <testServo+0x60>
		servo_count = 0;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <testServo+0x68>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
		angle += 45;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <testServo+0x6c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	332d      	adds	r3, #45	; 0x2d
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <testServo+0x6c>)
 8000a24:	6013      	str	r3, [r2, #0]
		if(angle > 45) angle = 0;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <testServo+0x6c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b2d      	cmp	r3, #45	; 0x2d
 8000a2c:	dd02      	ble.n	8000a34 <testServo+0x38>
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <testServo+0x6c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 3; i++){
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	e00d      	b.n	8000a56 <testServo+0x5a>
			servo_set_angle(servo_channel[i],angle);
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <testServo+0x70>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <testServo+0x6c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	f7ff ff8c 	bl	8000968 <servo_set_angle>
		for(int i = 0; i < 3; i++){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	ddee      	ble.n	8000a3a <testServo+0x3e>
		}

	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000108 	.word	0x20000108
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000000 	.word	0x20000000

08000a70 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <setTimer+0x28>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <setTimer+0x2c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	2000010c 	.word	0x2000010c
 8000a9c:	2000015c 	.word	0x2000015c

08000aa0 <timerRun>:

void timerRun(int index){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <timerRun+0x48>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	dd13      	ble.n	8000adc <timerRun+0x3c>
		timer_counter[index]--;
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <timerRun+0x48>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	1e5a      	subs	r2, r3, #1
 8000abe:	490a      	ldr	r1, [pc, #40]	; (8000ae8 <timerRun+0x48>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <timerRun+0x48>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dc04      	bgt.n	8000adc <timerRun+0x3c>
			timer_flag[index] = 1;
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <timerRun+0x4c>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	2000010c 	.word	0x2000010c
 8000aec:	2000015c 	.word	0x2000015c

08000af0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b42:	f002 fd01 	bl	8003548 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f7ff fef2 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001ac 	.word	0x200001ac
 8000b58:	40013000 	.word	0x40013000

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d12f      	bne.n	8000bdc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000bac:	23b0      	movs	r3, #176	; 0xb0
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000bc0:	f001 fcf2 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x90>)
 8000bd8:	f001 fce6 	bl	80025a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x60>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_MspInit+0x60>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9a:	f000 fd41 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000caa:	f001 fa41 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000068 	.word	0x20000068

08000cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM2_IRQHandler+0x10>)
 8000cbe:	f003 f84f 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000204 	.word	0x20000204

08000ccc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM3_IRQHandler+0x10>)
 8000cd2:	f003 f845 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000024c 	.word	0x2000024c

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f003 fee7 	bl	8004ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000036c 	.word	0x2000036c

08000cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART2_IRQHandler+0x10>)
 8000cfa:	f003 fedd 	bl	8004ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200003b4 	.word	0x200003b4

08000d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d3a:	2247      	movs	r2, #71	; 0x47
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d5a:	f002 fc79 	bl	8003650 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d64:	f7ff fde6 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d76:	f003 f9bd 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d80:	f7ff fdd8 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d92:	f003 fd71 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f7ff fdca 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000204 	.word	0x20000204

08000dac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MX_TIM3_Init+0xe8>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000de4:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000df2:	2263      	movs	r2, #99	; 0x63
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e04:	f002 fc24 	bl	8003650 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e0e:	f7ff fd91 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e20:	f003 f968 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e2a:	f7ff fd83 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e30:	f002 fcbe 	bl	80037b0 <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e3a:	f7ff fd7b 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e4e:	f003 fd13 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e58:	f7ff fd6c 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5c:	2360      	movs	r3, #96	; 0x60
 8000e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e74:	f003 f87c 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e7e:	f7ff fd59 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM3_Init+0xe4>)
 8000e84:	f000 fa4c 	bl	8001320 <HAL_TIM_MspPostInit>
//  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000024c 	.word	0x2000024c
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <MX_TIM4_Init+0x114>)
 8000eca:	4a39      	ldr	r2, [pc, #228]	; (8000fb0 <MX_TIM4_Init+0x118>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_TIM4_Init+0x114>)
 8000ed0:	f240 529f 	movw	r2, #1439	; 0x59f
 8000ed4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MX_TIM4_Init+0x114>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_TIM4_Init+0x114>)
 8000ede:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_TIM4_Init+0x114>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <MX_TIM4_Init+0x114>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ef0:	482e      	ldr	r0, [pc, #184]	; (8000fac <MX_TIM4_Init+0x114>)
 8000ef2:	f002 fbad 	bl	8003650 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000efc:	f7ff fd1a 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f0e:	f003 f8f1 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f18:	f7ff fd0c 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f1c:	4823      	ldr	r0, [pc, #140]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f1e:	f002 fc47 	bl	80037b0 <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f28:	f7ff fd04 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f3c:	f003 fc9c 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f46:	f7ff fcf5 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4a:	2360      	movs	r3, #96	; 0x60
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8000f4e:	2319      	movs	r3, #25
 8000f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f62:	f003 f805 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f6c:	f7ff fce2 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2204      	movs	r2, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f78:	f002 fffa 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f82:	f7ff fcd7 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f8e:	f002 ffef 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f98:	f7ff fccc 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <MX_TIM4_Init+0x114>)
 8000f9e:	f000 f9bf 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3738      	adds	r7, #56	; 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000294 	.word	0x20000294
 8000fb0:	40000800 	.word	0x40000800

08000fb4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_TIM5_Init+0xe4>)
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <MX_TIM5_Init+0xe8>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <MX_TIM5_Init+0xe4>)
 8000fec:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000ff0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_TIM5_Init+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_TIM5_Init+0xe4>)
 8000ffa:	2263      	movs	r2, #99	; 0x63
 8000ffc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_TIM5_Init+0xe4>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_TIM5_Init+0xe4>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800100a:	4823      	ldr	r0, [pc, #140]	; (8001098 <MX_TIM5_Init+0xe4>)
 800100c:	f002 fb20 	bl	8003650 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001016:	f7ff fc8d 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001024:	4619      	mov	r1, r3
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <MX_TIM5_Init+0xe4>)
 8001028:	f003 f864 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001032:	f7ff fc7f 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <MX_TIM5_Init+0xe4>)
 8001038:	f002 fbba 	bl	80037b0 <HAL_TIM_PWM_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001042:	f7ff fc77 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4619      	mov	r1, r3
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_TIM5_Init+0xe4>)
 8001056:	f003 fc0f 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001060:	f7ff fc68 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM5_Init+0xe4>)
 800107c:	f002 ff78 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001086:	f7ff fc55 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM5_Init+0xe4>)
 800108c:	f000 f948 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8001090:	bf00      	nop
 8001092:	3738      	adds	r7, #56	; 0x38
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200002dc 	.word	0x200002dc
 800109c:	40000c00 	.word	0x40000c00

080010a0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b096      	sub	sp, #88	; 0x58
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 f9cf 	bl	800547c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <MX_TIM8_Init+0x180>)
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <MX_TIM8_Init+0x184>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <MX_TIM8_Init+0x180>)
 80010e6:	f240 1267 	movw	r2, #359	; 0x167
 80010ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <MX_TIM8_Init+0x180>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <MX_TIM8_Init+0x180>)
 80010f4:	2263      	movs	r2, #99	; 0x63
 80010f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <MX_TIM8_Init+0x180>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010fe:	4b48      	ldr	r3, [pc, #288]	; (8001220 <MX_TIM8_Init+0x180>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <MX_TIM8_Init+0x180>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800110a:	4845      	ldr	r0, [pc, #276]	; (8001220 <MX_TIM8_Init+0x180>)
 800110c:	f002 faa0 	bl	8003650 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001116:	f7ff fc0d 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001124:	4619      	mov	r1, r3
 8001126:	483e      	ldr	r0, [pc, #248]	; (8001220 <MX_TIM8_Init+0x180>)
 8001128:	f002 ffe4 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001132:	f7ff fbff 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001136:	483a      	ldr	r0, [pc, #232]	; (8001220 <MX_TIM8_Init+0x180>)
 8001138:	f002 fb3a 	bl	80037b0 <HAL_TIM_PWM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001142:	f7ff fbf7 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800114e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001152:	4619      	mov	r1, r3
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <MX_TIM8_Init+0x180>)
 8001156:	f003 fb8f 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001160:	f7ff fbe8 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001164:	2360      	movs	r3, #96	; 0x60
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <MX_TIM8_Init+0x180>)
 800118a:	f002 fef1 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001194:	f7ff fbce 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	; (8001220 <MX_TIM8_Init+0x180>)
 80011a2:	f002 fee5 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80011ac:	f7ff fbc2 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	2208      	movs	r2, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <MX_TIM8_Init+0x180>)
 80011ba:	f002 fed9 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80011c4:	f7ff fbb6 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	220c      	movs	r2, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_TIM8_Init+0x180>)
 80011d2:	f002 fecd 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80011dc:	f7ff fbaa 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM8_Init+0x180>)
 8001204:	f003 fba4 	bl	8004950 <HAL_TIMEx_ConfigBreakDeadTime>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800120e:	f7ff fb91 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM8_Init+0x180>)
 8001214:	f000 f884 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000324 	.word	0x20000324
 8001224:	40013400 	.word	0x40013400

08001228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d114      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a33      	ldr	r2, [pc, #204]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fd79 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fd92 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001262:	e04e      	b.n	8001302 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_TIM_Base_MspInit+0xe8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d114      	bne.n	8001298 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	201d      	movs	r0, #29
 800128c:	f000 fd5f 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001290:	201d      	movs	r0, #29
 8001292:	f000 fd78 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 8001296:	e034      	b.n	8001302 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_TIM_Base_MspInit+0xec>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10c      	bne.n	80012bc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
}
 80012ba:	e022      	b.n	8001302 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM5)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10c      	bne.n	80012e0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
}
 80012de:	e010      	b.n	8001302 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_TIM_Base_MspInit+0xf4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_TIM_Base_MspInit+0xe4>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40000400 	.word	0x40000400
 8001314:	40000800 	.word	0x40000800
 8001318:	40000c00 	.word	0x40000c00
 800131c:	40013400 	.word	0x40013400

08001320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_TIM_MspPostInit+0x134>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d12a      	bne.n	8001396 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8001358:	2310      	movs	r3, #16
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	483c      	ldr	r0, [pc, #240]	; (800145c <HAL_TIM_MspPostInit+0x13c>)
 800136c:	f001 f91c 	bl	80025a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_TIM_MspPostInit+0x140>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <HAL_TIM_MspPostInit+0x140>)
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001394:	e05a      	b.n	800144c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d119      	bne.n	80013d4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a2c      	ldr	r2, [pc, #176]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 80013b8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4823      	ldr	r0, [pc, #140]	; (800145c <HAL_TIM_MspPostInit+0x13c>)
 80013ce:	f001 f8eb 	bl	80025a8 <HAL_GPIO_Init>
}
 80013d2:	e03b      	b.n	800144c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a23      	ldr	r2, [pc, #140]	; (8001468 <HAL_TIM_MspPostInit+0x148>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d118      	bne.n	8001410 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <HAL_TIM_MspPostInit+0x14c>)
 800140a:	f001 f8cd 	bl	80025a8 <HAL_GPIO_Init>
}
 800140e:	e01d      	b.n	800144c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d118      	bne.n	800144c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_TIM_MspPostInit+0x138>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8001432:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_TIM_MspPostInit+0x154>)
 8001448:	f001 f8ae 	bl	80025a8 <HAL_GPIO_Init>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40000400 	.word	0x40000400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40010000 	.word	0x40010000
 8001464:	40000800 	.word	0x40000800
 8001468:	40000c00 	.word	0x40000c00
 800146c:	40010800 	.word	0x40010800
 8001470:	40013400 	.word	0x40013400
 8001474:	40011000 	.word	0x40011000

08001478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f003 fab1 	bl	8004a16 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f7ff fa3b 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000036c 	.word	0x2000036c
 80014c8:	40013800 	.word	0x40013800

080014cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 8001504:	f003 fa87 	bl	8004a16 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f7ff fa11 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003b4 	.word	0x200003b4
 800151c:	40004400 	.word	0x40004400

08001520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a3f      	ldr	r2, [pc, #252]	; (8001638 <HAL_UART_MspInit+0x118>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d13a      	bne.n	80015b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_UART_MspInit+0x11c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_UART_MspInit+0x11c>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_UART_MspInit+0x11c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_UART_MspInit+0x11c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a37      	ldr	r2, [pc, #220]	; (800163c <HAL_UART_MspInit+0x11c>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <HAL_UART_MspInit+0x11c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	4619      	mov	r1, r3
 8001584:	482e      	ldr	r0, [pc, #184]	; (8001640 <HAL_UART_MspInit+0x120>)
 8001586:	f001 f80f 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4619      	mov	r1, r3
 800159e:	4828      	ldr	r0, [pc, #160]	; (8001640 <HAL_UART_MspInit+0x120>)
 80015a0:	f001 f802 	bl	80025a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2025      	movs	r0, #37	; 0x25
 80015aa:	f000 fbd0 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ae:	2025      	movs	r0, #37	; 0x25
 80015b0:	f000 fbe9 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015b4:	e03c      	b.n	8001630 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_UART_MspInit+0x124>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d137      	bne.n	8001630 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ca:	61d3      	str	r3, [r2, #28]
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0x11c>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f0:	2304      	movs	r3, #4
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4619      	mov	r1, r3
 8001602:	480f      	ldr	r0, [pc, #60]	; (8001640 <HAL_UART_MspInit+0x120>)
 8001604:	f000 ffd0 	bl	80025a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001608:	2308      	movs	r3, #8
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	4619      	mov	r1, r3
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0x120>)
 800161c:	f000 ffc4 	bl	80025a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2026      	movs	r0, #38	; 0x26
 8001626:	f000 fb92 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162a:	2026      	movs	r0, #38	; 0x26
 800162c:	f000 fbab 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40013800 	.word	0x40013800
 800163c:	40021000 	.word	0x40021000
 8001640:	40010800 	.word	0x40010800
 8001644:	40004400 	.word	0x40004400

08001648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff fb5e 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001664:	4c09      	ldr	r4, [pc, #36]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f003 ff0b 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff f83d 	bl	80006f4 <main>
  bx lr
 800167a:	4770      	bx	lr
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001684:	08005520 	.word	0x08005520
  ldr r2, =_sbss
 8001688:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800168c:	20000400 	.word	0x20000400

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x28>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x28>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 fb47 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fa9e 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fb5f 	bl	8001da2 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 fb27 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000010 	.word	0x20000010
 8001718:	20000018 	.word	0x20000018
 800171c:	20000014 	.word	0x20000014

08001720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x1c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_IncTick+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <HAL_IncTick+0x20>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000018 	.word	0x20000018
 8001740:	200003fc 	.word	0x200003fc

08001744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <HAL_GetTick+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	200003fc 	.word	0x200003fc

08001758 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0ce      	b.n	8001918 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fde6 	bl	8000368 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f9bd 	bl	8001b1c <ADC_ConversionStop_Disable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 80a9 	bne.w	8001906 <HAL_ADC_Init+0x1ae>
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 80a5 	bne.w	8001906 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4951      	ldr	r1, [pc, #324]	; (8001920 <HAL_ADC_Init+0x1c8>)
 80017da:	428b      	cmp	r3, r1
 80017dc:	d10a      	bne.n	80017f4 <HAL_ADC_Init+0x9c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017e6:	d002      	beq.n	80017ee <HAL_ADC_Init+0x96>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	e004      	b.n	80017f8 <HAL_ADC_Init+0xa0>
 80017ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017f2:	e001      	b.n	80017f8 <HAL_ADC_Init+0xa0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001800:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4313      	orrs	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001810:	d003      	beq.n	800181a <HAL_ADC_Init+0xc2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d102      	bne.n	8001820 <HAL_ADC_Init+0xc8>
 800181a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181e:	e000      	b.n	8001822 <HAL_ADC_Init+0xca>
 8001820:	2300      	movs	r3, #0
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7d1b      	ldrb	r3, [r3, #20]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d119      	bne.n	8001864 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	3b01      	subs	r3, #1
 800183e:	035a      	lsls	r2, r3, #13
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e00b      	b.n	8001864 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_ADC_Init+0x1cc>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001894:	d003      	beq.n	800189e <HAL_ADC_Init+0x146>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d104      	bne.n	80018a8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	051b      	lsls	r3, r3, #20
 80018a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_ADC_Init+0x1d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10b      	bne.n	80018e4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e2:	e018      	b.n	8001916 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f023 0312 	bic.w	r3, r3, #18
 80018ec:	f043 0210 	orr.w	r2, r3, #16
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001904:	e007      	b.n	8001916 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001916:	7dfb      	ldrb	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013c00 	.word	0x40013c00
 8001924:	ffe1f7fd 	.word	0xffe1f7fd
 8001928:	ff1f0efe 	.word	0xff1f0efe

0800192c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x20>
 8001948:	2302      	movs	r3, #2
 800194a:	e0dc      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1da>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d81c      	bhi.n	8001996 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b05      	subs	r3, #5
 800196e:	221f      	movs	r2, #31
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
 8001994:	e03c      	b.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d81c      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3b23      	subs	r3, #35	; 0x23
 80019b0:	221f      	movs	r2, #31
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4019      	ands	r1, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	3b23      	subs	r3, #35	; 0x23
 80019ca:	fa00 f203 	lsl.w	r2, r0, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
 80019d6:	e01b      	b.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b41      	subs	r3, #65	; 0x41
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b41      	subs	r3, #65	; 0x41
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d91c      	bls.n	8001a52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	3b1e      	subs	r3, #30
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	3b1e      	subs	r3, #30
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	e019      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6919      	ldr	r1, [r3, #16]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6898      	ldr	r0, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d132      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d125      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d126      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001abc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d11a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x1b2>
 8001aea:	e007      	b.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40012400 	.word	0x40012400
 8001b14:	20000010 	.word	0x20000010
 8001b18:	431bde83 	.word	0x431bde83

08001b1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d12e      	bne.n	8001b94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b46:	f7ff fdfd 	bl	8001744 <HAL_GetTick>
 8001b4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b4c:	e01b      	b.n	8001b86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b4e:	f7ff fdf9 	bl	8001744 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d914      	bls.n	8001b86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10d      	bne.n	8001b86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e007      	b.n	8001b96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d0dc      	beq.n	8001b4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e059      	b.n	8001e86 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_DMA_Init+0xd4>)
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d80f      	bhi.n	8001dfe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_DMA_Init+0xd8>)
 8001de6:	4413      	add	r3, r2
 8001de8:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <HAL_DMA_Init+0xdc>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	009a      	lsls	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <HAL_DMA_Init+0xe0>)
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dfc:	e00e      	b.n	8001e1c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_DMA_Init+0xe4>)
 8001e06:	4413      	add	r3, r2
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_DMA_Init+0xdc>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	009a      	lsls	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_DMA_Init+0xe8>)
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40020407 	.word	0x40020407
 8001e94:	bffdfff8 	.word	0xbffdfff8
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	bffdfbf8 	.word	0xbffdfbf8
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e020      	b.n	8001f14 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 020e 	bic.w	r2, r2, #14
 8001ee0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d005      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e0d6      	b.n	80020f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020e 	bic.w	r2, r2, #14
 8001f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_DMA_Abort_IT+0x1dc>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d958      	bls.n	8002022 <HAL_DMA_Abort_IT+0x102>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_DMA_Abort_IT+0x1e0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04f      	beq.n	800201a <HAL_DMA_Abort_IT+0xfa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a61      	ldr	r2, [pc, #388]	; (8002104 <HAL_DMA_Abort_IT+0x1e4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d048      	beq.n	8002016 <HAL_DMA_Abort_IT+0xf6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_DMA_Abort_IT+0x1e8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Abort_IT+0xf0>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_DMA_Abort_IT+0x1ec>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d038      	beq.n	800200a <HAL_DMA_Abort_IT+0xea>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <HAL_DMA_Abort_IT+0x1f0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d030      	beq.n	8002004 <HAL_DMA_Abort_IT+0xe4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_DMA_Abort_IT+0x1f4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d028      	beq.n	8001ffe <HAL_DMA_Abort_IT+0xde>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_DMA_Abort_IT+0x1dc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d020      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0xd8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_DMA_Abort_IT+0x1f8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d019      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0xd4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_DMA_Abort_IT+0x1fc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d012      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0xd0>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_DMA_Abort_IT+0x200>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00a      	beq.n	8001fea <HAL_DMA_Abort_IT+0xca>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_DMA_Abort_IT+0x204>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d102      	bne.n	8001fe4 <HAL_DMA_Abort_IT+0xc4>
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	e01b      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe8:	e018      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fee:	e015      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	e013      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e011      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffc:	e00e      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8001ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002002:	e00b      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8002004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002008:	e008      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	e005      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8002010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002014:	e002      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 8002016:	2310      	movs	r3, #16
 8002018:	e000      	b.n	800201c <HAL_DMA_Abort_IT+0xfc>
 800201a:	2301      	movs	r3, #1
 800201c:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_DMA_Abort_IT+0x208>)
 800201e:	6053      	str	r3, [r2, #4]
 8002020:	e057      	b.n	80020d2 <HAL_DMA_Abort_IT+0x1b2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a36      	ldr	r2, [pc, #216]	; (8002100 <HAL_DMA_Abort_IT+0x1e0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04f      	beq.n	80020cc <HAL_DMA_Abort_IT+0x1ac>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <HAL_DMA_Abort_IT+0x1e4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d048      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x1a8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <HAL_DMA_Abort_IT+0x1e8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d040      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x1a2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_DMA_Abort_IT+0x1ec>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d038      	beq.n	80020bc <HAL_DMA_Abort_IT+0x19c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a30      	ldr	r2, [pc, #192]	; (8002110 <HAL_DMA_Abort_IT+0x1f0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d030      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x196>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <HAL_DMA_Abort_IT+0x1f4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d028      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x190>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a26      	ldr	r2, [pc, #152]	; (80020fc <HAL_DMA_Abort_IT+0x1dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d020      	beq.n	80020aa <HAL_DMA_Abort_IT+0x18a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_DMA_Abort_IT+0x1f8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_DMA_Abort_IT+0x186>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_DMA_Abort_IT+0x1fc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x182>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_DMA_Abort_IT+0x200>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00a      	beq.n	800209c <HAL_DMA_Abort_IT+0x17c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <HAL_DMA_Abort_IT+0x204>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <HAL_DMA_Abort_IT+0x176>
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	e01b      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 8002096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800209a:	e018      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 800209c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a0:	e015      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020a2:	2310      	movs	r3, #16
 80020a4:	e013      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e011      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ae:	e00e      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020b4:	e00b      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ba:	e008      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c0:	e005      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c6:	e002      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020c8:	2310      	movs	r3, #16
 80020ca:	e000      	b.n	80020ce <HAL_DMA_Abort_IT+0x1ae>
 80020cc:	2301      	movs	r3, #1
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_DMA_Abort_IT+0x20c>)
 80020d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    } 
  }
  return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020080 	.word	0x40020080
 8002100:	40020008 	.word	0x40020008
 8002104:	4002001c 	.word	0x4002001c
 8002108:	40020030 	.word	0x40020030
 800210c:	40020044 	.word	0x40020044
 8002110:	40020058 	.word	0x40020058
 8002114:	4002006c 	.word	0x4002006c
 8002118:	40020408 	.word	0x40020408
 800211c:	4002041c 	.word	0x4002041c
 8002120:	40020430 	.word	0x40020430
 8002124:	40020444 	.word	0x40020444
 8002128:	40020400 	.word	0x40020400
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80f1 	beq.w	800233c <HAL_DMA_IRQHandler+0x20c>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80eb 	beq.w	800233c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_DMA_IRQHandler+0x1d8>)
 800218c:	429a      	cmp	r2, r3
 800218e:	d958      	bls.n	8002242 <HAL_DMA_IRQHandler+0x112>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5d      	ldr	r2, [pc, #372]	; (800230c <HAL_DMA_IRQHandler+0x1dc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d04f      	beq.n	800223a <HAL_DMA_IRQHandler+0x10a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_DMA_IRQHandler+0x1e0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d048      	beq.n	8002236 <HAL_DMA_IRQHandler+0x106>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_DMA_IRQHandler+0x1e4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_DMA_IRQHandler+0x100>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a59      	ldr	r2, [pc, #356]	; (8002318 <HAL_DMA_IRQHandler+0x1e8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d038      	beq.n	800222a <HAL_DMA_IRQHandler+0xfa>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_DMA_IRQHandler+0x1ec>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d030      	beq.n	8002224 <HAL_DMA_IRQHandler+0xf4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d028      	beq.n	800221e <HAL_DMA_IRQHandler+0xee>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_DMA_IRQHandler+0x1d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d020      	beq.n	8002218 <HAL_DMA_IRQHandler+0xe8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d019      	beq.n	8002214 <HAL_DMA_IRQHandler+0xe4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d012      	beq.n	8002210 <HAL_DMA_IRQHandler+0xe0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4f      	ldr	r2, [pc, #316]	; (800232c <HAL_DMA_IRQHandler+0x1fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00a      	beq.n	800220a <HAL_DMA_IRQHandler+0xda>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4d      	ldr	r2, [pc, #308]	; (8002330 <HAL_DMA_IRQHandler+0x200>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d102      	bne.n	8002204 <HAL_DMA_IRQHandler+0xd4>
 80021fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002202:	e01b      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002208:	e018      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	e015      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002210:	2340      	movs	r3, #64	; 0x40
 8002212:	e013      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002214:	2304      	movs	r3, #4
 8002216:	e011      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002218:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800221c:	e00e      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	e00b      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002228:	e008      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 800222a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222e:	e005      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002234:	e002      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	e000      	b.n	800223c <HAL_DMA_IRQHandler+0x10c>
 800223a:	2304      	movs	r3, #4
 800223c:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <HAL_DMA_IRQHandler+0x204>)
 800223e:	6053      	str	r3, [r2, #4]
 8002240:	e057      	b.n	80022f2 <HAL_DMA_IRQHandler+0x1c2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_DMA_IRQHandler+0x1dc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04f      	beq.n	80022ec <HAL_DMA_IRQHandler+0x1bc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <HAL_DMA_IRQHandler+0x1e0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d048      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x1b8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <HAL_DMA_IRQHandler+0x1e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x1b2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <HAL_DMA_IRQHandler+0x1e8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d038      	beq.n	80022dc <HAL_DMA_IRQHandler+0x1ac>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2b      	ldr	r2, [pc, #172]	; (800231c <HAL_DMA_IRQHandler+0x1ec>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d030      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1a6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d028      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x1a0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DMA_IRQHandler+0x1d8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d020      	beq.n	80022ca <HAL_DMA_IRQHandler+0x19a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x196>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a24      	ldr	r2, [pc, #144]	; (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d012      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x192>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_DMA_IRQHandler+0x1fc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00a      	beq.n	80022bc <HAL_DMA_IRQHandler+0x18c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_DMA_IRQHandler+0x200>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x186>
 80022b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b4:	e01b      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ba:	e018      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c0:	e015      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	e013      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e011      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ce:	e00e      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d4:	e00b      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022da:	e008      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022e0:	e005      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	e002      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	e000      	b.n	80022ee <HAL_DMA_IRQHandler+0x1be>
 80022ec:	2304      	movs	r3, #4
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_DMA_IRQHandler+0x208>)
 80022f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8136 	beq.w	8002568 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002304:	e130      	b.n	8002568 <HAL_DMA_IRQHandler+0x438>
 8002306:	bf00      	nop
 8002308:	40020080 	.word	0x40020080
 800230c:	40020008 	.word	0x40020008
 8002310:	4002001c 	.word	0x4002001c
 8002314:	40020030 	.word	0x40020030
 8002318:	40020044 	.word	0x40020044
 800231c:	40020058 	.word	0x40020058
 8002320:	4002006c 	.word	0x4002006c
 8002324:	40020408 	.word	0x40020408
 8002328:	4002041c 	.word	0x4002041c
 800232c:	40020430 	.word	0x40020430
 8002330:	40020444 	.word	0x40020444
 8002334:	40020400 	.word	0x40020400
 8002338:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2202      	movs	r2, #2
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80dd 	beq.w	8002508 <HAL_DMA_IRQHandler+0x3d8>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80d7 	beq.w	8002508 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020a 	bic.w	r2, r2, #10
 8002376:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_DMA_IRQHandler+0x444>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d958      	bls.n	800243e <HAL_DMA_IRQHandler+0x30e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_DMA_IRQHandler+0x448>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d04f      	beq.n	8002436 <HAL_DMA_IRQHandler+0x306>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a78      	ldr	r2, [pc, #480]	; (800257c <HAL_DMA_IRQHandler+0x44c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d048      	beq.n	8002432 <HAL_DMA_IRQHandler+0x302>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a76      	ldr	r2, [pc, #472]	; (8002580 <HAL_DMA_IRQHandler+0x450>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d040      	beq.n	800242c <HAL_DMA_IRQHandler+0x2fc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a75      	ldr	r2, [pc, #468]	; (8002584 <HAL_DMA_IRQHandler+0x454>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d038      	beq.n	8002426 <HAL_DMA_IRQHandler+0x2f6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a73      	ldr	r2, [pc, #460]	; (8002588 <HAL_DMA_IRQHandler+0x458>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d030      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2f0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_DMA_IRQHandler+0x45c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d028      	beq.n	800241a <HAL_DMA_IRQHandler+0x2ea>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_DMA_IRQHandler+0x444>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d020      	beq.n	8002414 <HAL_DMA_IRQHandler+0x2e4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <HAL_DMA_IRQHandler+0x460>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d019      	beq.n	8002410 <HAL_DMA_IRQHandler+0x2e0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_DMA_IRQHandler+0x464>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d012      	beq.n	800240c <HAL_DMA_IRQHandler+0x2dc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6b      	ldr	r2, [pc, #428]	; (8002598 <HAL_DMA_IRQHandler+0x468>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00a      	beq.n	8002406 <HAL_DMA_IRQHandler+0x2d6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a69      	ldr	r2, [pc, #420]	; (800259c <HAL_DMA_IRQHandler+0x46c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d102      	bne.n	8002400 <HAL_DMA_IRQHandler+0x2d0>
 80023fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fe:	e01b      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002404:	e018      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240a:	e015      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 800240c:	2320      	movs	r3, #32
 800240e:	e013      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002410:	2302      	movs	r3, #2
 8002412:	e011      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002418:	e00e      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 800241a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800241e:	e00b      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	e008      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242a:	e005      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 800242c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002430:	e002      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002432:	2320      	movs	r3, #32
 8002434:	e000      	b.n	8002438 <HAL_DMA_IRQHandler+0x308>
 8002436:	2302      	movs	r3, #2
 8002438:	4a59      	ldr	r2, [pc, #356]	; (80025a0 <HAL_DMA_IRQHandler+0x470>)
 800243a:	6053      	str	r3, [r2, #4]
 800243c:	e057      	b.n	80024ee <HAL_DMA_IRQHandler+0x3be>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <HAL_DMA_IRQHandler+0x448>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d04f      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x3b8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_DMA_IRQHandler+0x44c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d048      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x3b4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_DMA_IRQHandler+0x450>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d040      	beq.n	80024de <HAL_DMA_IRQHandler+0x3ae>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_DMA_IRQHandler+0x454>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d038      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x3a8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_DMA_IRQHandler+0x458>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d030      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_DMA_IRQHandler+0x45c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d028      	beq.n	80024cc <HAL_DMA_IRQHandler+0x39c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a3d      	ldr	r2, [pc, #244]	; (8002574 <HAL_DMA_IRQHandler+0x444>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d020      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x396>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_DMA_IRQHandler+0x460>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x392>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a40      	ldr	r2, [pc, #256]	; (8002594 <HAL_DMA_IRQHandler+0x464>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d012      	beq.n	80024be <HAL_DMA_IRQHandler+0x38e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <HAL_DMA_IRQHandler+0x468>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x388>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3d      	ldr	r2, [pc, #244]	; (800259c <HAL_DMA_IRQHandler+0x46c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x382>
 80024ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b0:	e01b      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b6:	e018      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024bc:	e015      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024be:	2320      	movs	r3, #32
 80024c0:	e013      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e011      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	e00e      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024d0:	e00b      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d6:	e008      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024dc:	e005      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e2:	e002      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024e4:	2320      	movs	r3, #32
 80024e6:	e000      	b.n	80024ea <HAL_DMA_IRQHandler+0x3ba>
 80024e8:	2302      	movs	r3, #2
 80024ea:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <HAL_DMA_IRQHandler+0x474>)
 80024ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d034      	beq.n	8002568 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002506:	e02f      	b.n	8002568 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2208      	movs	r2, #8
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d028      	beq.n	800256a <HAL_DMA_IRQHandler+0x43a>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 020e 	bic.w	r2, r2, #14
 8002530:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
    }
  }
  return;
 8002568:	bf00      	nop
 800256a:	bf00      	nop
}
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40020080 	.word	0x40020080
 8002578:	40020008 	.word	0x40020008
 800257c:	4002001c 	.word	0x4002001c
 8002580:	40020030 	.word	0x40020030
 8002584:	40020044 	.word	0x40020044
 8002588:	40020058 	.word	0x40020058
 800258c:	4002006c 	.word	0x4002006c
 8002590:	40020408 	.word	0x40020408
 8002594:	4002041c 	.word	0x4002041c
 8002598:	40020430 	.word	0x40020430
 800259c:	40020444 	.word	0x40020444
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020000 	.word	0x40020000

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ba:	e179      	b.n	80028b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025bc:	2201      	movs	r2, #1
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 8168 	bne.w	80028aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a96      	ldr	r2, [pc, #600]	; (8002838 <HAL_GPIO_Init+0x290>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d05e      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025e4:	4a94      	ldr	r2, [pc, #592]	; (8002838 <HAL_GPIO_Init+0x290>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d875      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 80025ea:	4a94      	ldr	r2, [pc, #592]	; (800283c <HAL_GPIO_Init+0x294>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d058      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025f0:	4a92      	ldr	r2, [pc, #584]	; (800283c <HAL_GPIO_Init+0x294>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d86f      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 80025f6:	4a92      	ldr	r2, [pc, #584]	; (8002840 <HAL_GPIO_Init+0x298>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d052      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 80025fc:	4a90      	ldr	r2, [pc, #576]	; (8002840 <HAL_GPIO_Init+0x298>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d869      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 8002602:	4a90      	ldr	r2, [pc, #576]	; (8002844 <HAL_GPIO_Init+0x29c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04c      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 8002608:	4a8e      	ldr	r2, [pc, #568]	; (8002844 <HAL_GPIO_Init+0x29c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d863      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 800260e:	4a8e      	ldr	r2, [pc, #568]	; (8002848 <HAL_GPIO_Init+0x2a0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d046      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
 8002614:	4a8c      	ldr	r2, [pc, #560]	; (8002848 <HAL_GPIO_Init+0x2a0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d85d      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 800261a:	2b12      	cmp	r3, #18
 800261c:	d82a      	bhi.n	8002674 <HAL_GPIO_Init+0xcc>
 800261e:	2b12      	cmp	r3, #18
 8002620:	d859      	bhi.n	80026d6 <HAL_GPIO_Init+0x12e>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_GPIO_Init+0x80>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	080026a3 	.word	0x080026a3
 800262c:	0800267d 	.word	0x0800267d
 8002630:	0800268f 	.word	0x0800268f
 8002634:	080026d1 	.word	0x080026d1
 8002638:	080026d7 	.word	0x080026d7
 800263c:	080026d7 	.word	0x080026d7
 8002640:	080026d7 	.word	0x080026d7
 8002644:	080026d7 	.word	0x080026d7
 8002648:	080026d7 	.word	0x080026d7
 800264c:	080026d7 	.word	0x080026d7
 8002650:	080026d7 	.word	0x080026d7
 8002654:	080026d7 	.word	0x080026d7
 8002658:	080026d7 	.word	0x080026d7
 800265c:	080026d7 	.word	0x080026d7
 8002660:	080026d7 	.word	0x080026d7
 8002664:	080026d7 	.word	0x080026d7
 8002668:	080026d7 	.word	0x080026d7
 800266c:	08002685 	.word	0x08002685
 8002670:	08002699 	.word	0x08002699
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_GPIO_Init+0x2a4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800267a:	e02c      	b.n	80026d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	623b      	str	r3, [r7, #32]
          break;
 8002682:	e029      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	3304      	adds	r3, #4
 800268a:	623b      	str	r3, [r7, #32]
          break;
 800268c:	e024      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	3308      	adds	r3, #8
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e01f      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	330c      	adds	r3, #12
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e01a      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026aa:	2304      	movs	r3, #4
 80026ac:	623b      	str	r3, [r7, #32]
          break;
 80026ae:	e013      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b8:	2308      	movs	r3, #8
 80026ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	611a      	str	r2, [r3, #16]
          break;
 80026c2:	e009      	b.n	80026d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c4:	2308      	movs	r3, #8
 80026c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	615a      	str	r2, [r3, #20]
          break;
 80026ce:	e003      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
          break;
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x130>
          break;
 80026d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	; 0xff
 80026dc:	d801      	bhi.n	80026e2 <HAL_GPIO_Init+0x13a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e001      	b.n	80026e6 <HAL_GPIO_Init+0x13e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d802      	bhi.n	80026f4 <HAL_GPIO_Init+0x14c>
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	e002      	b.n	80026fa <HAL_GPIO_Init+0x152>
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	3b08      	subs	r3, #8
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	210f      	movs	r1, #15
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80c1 	beq.w	80028aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_GPIO_Init+0x2a8>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a48      	ldr	r2, [pc, #288]	; (8002850 <HAL_GPIO_Init+0x2a8>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_GPIO_Init+0x2a8>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002740:	4a44      	ldr	r2, [pc, #272]	; (8002854 <HAL_GPIO_Init+0x2ac>)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01f      	beq.n	80027ac <HAL_GPIO_Init+0x204>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_GPIO_Init+0x2b4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d019      	beq.n	80027a8 <HAL_GPIO_Init+0x200>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <HAL_GPIO_Init+0x2b8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_GPIO_Init+0x1fc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <HAL_GPIO_Init+0x2bc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00d      	beq.n	80027a0 <HAL_GPIO_Init+0x1f8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_GPIO_Init+0x2c0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <HAL_GPIO_Init+0x1f4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a37      	ldr	r2, [pc, #220]	; (800286c <HAL_GPIO_Init+0x2c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_GPIO_Init+0x1f0>
 8002794:	2305      	movs	r3, #5
 8002796:	e00a      	b.n	80027ae <HAL_GPIO_Init+0x206>
 8002798:	2306      	movs	r3, #6
 800279a:	e008      	b.n	80027ae <HAL_GPIO_Init+0x206>
 800279c:	2304      	movs	r3, #4
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x206>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e004      	b.n	80027ae <HAL_GPIO_Init+0x206>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x206>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_GPIO_Init+0x206>
 80027ac:	2300      	movs	r3, #0
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	4093      	lsls	r3, r2
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027be:	4925      	ldr	r1, [pc, #148]	; (8002854 <HAL_GPIO_Init+0x2ac>)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4924      	ldr	r1, [pc, #144]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4920      	ldr	r1, [pc, #128]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	491a      	ldr	r1, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4916      	ldr	r1, [pc, #88]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 8002818:	4013      	ands	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d025      	beq.n	8002874 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4910      	ldr	r1, [pc, #64]	; (8002870 <HAL_GPIO_Init+0x2c8>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
 8002834:	e025      	b.n	8002882 <HAL_GPIO_Init+0x2da>
 8002836:	bf00      	nop
 8002838:	10320000 	.word	0x10320000
 800283c:	10310000 	.word	0x10310000
 8002840:	10220000 	.word	0x10220000
 8002844:	10210000 	.word	0x10210000
 8002848:	10120000 	.word	0x10120000
 800284c:	10110000 	.word	0x10110000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	40011800 	.word	0x40011800
 800286c:	40011c00 	.word	0x40011c00
 8002870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	43db      	mvns	r3, r3
 800287c:	4913      	ldr	r1, [pc, #76]	; (80028cc <HAL_GPIO_Init+0x324>)
 800287e:	4013      	ands	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
 800289a:	e006      	b.n	80028aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_GPIO_Init+0x324>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	4909      	ldr	r1, [pc, #36]	; (80028cc <HAL_GPIO_Init+0x324>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	3301      	adds	r3, #1
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f ae7e 	bne.w	80025bc <HAL_GPIO_Init+0x14>
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	372c      	adds	r7, #44	; 0x2c
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43d9      	mvns	r1, r3
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	400b      	ands	r3, r1
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e12b      	b.n	8002b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fe8a 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	; 0x24
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002998:	f000 fcda 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 800299c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a81      	ldr	r2, [pc, #516]	; (8002ba8 <HAL_I2C_Init+0x274>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d807      	bhi.n	80029b8 <HAL_I2C_Init+0x84>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a80      	ldr	r2, [pc, #512]	; (8002bac <HAL_I2C_Init+0x278>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e006      	b.n	80029c6 <HAL_I2C_Init+0x92>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <HAL_I2C_Init+0x27c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0e7      	b.n	8002b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a78      	ldr	r2, [pc, #480]	; (8002bb4 <HAL_I2C_Init+0x280>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0c9b      	lsrs	r3, r3, #18
 80029d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a6a      	ldr	r2, [pc, #424]	; (8002ba8 <HAL_I2C_Init+0x274>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d802      	bhi.n	8002a08 <HAL_I2C_Init+0xd4>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3301      	adds	r3, #1
 8002a06:	e009      	b.n	8002a1c <HAL_I2C_Init+0xe8>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	4a69      	ldr	r2, [pc, #420]	; (8002bb8 <HAL_I2C_Init+0x284>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	495c      	ldr	r1, [pc, #368]	; (8002ba8 <HAL_I2C_Init+0x274>)
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	d819      	bhi.n	8002a70 <HAL_I2C_Init+0x13c>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e59      	subs	r1, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a50:	400b      	ands	r3, r1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_I2C_Init+0x138>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e59      	subs	r1, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6a:	e051      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e04f      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <HAL_I2C_Init+0x168>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e012      	b.n	8002ac2 <HAL_I2C_Init+0x18e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	0099      	lsls	r1, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x196>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e022      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10e      	bne.n	8002af0 <HAL_I2C_Init+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e58      	subs	r0, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	440b      	add	r3, r1
 8002ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	e00f      	b.n	8002b10 <HAL_I2C_Init+0x1dc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6809      	ldr	r1, [r1, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6911      	ldr	r1, [r2, #16]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68d2      	ldr	r2, [r2, #12]
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	000186a0 	.word	0x000186a0
 8002bac:	001e847f 	.word	0x001e847f
 8002bb0:	003d08ff 	.word	0x003d08ff
 8002bb4:	431bde83 	.word	0x431bde83
 8002bb8:	10624dd3 	.word	0x10624dd3

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e272      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8087 	beq.w	8002cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be8:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5e>
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x12c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d168      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e24c      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x76>
 8002c24:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7f      	ldr	r2, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a77      	ldr	r2, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xbc>
 8002c5e:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a71      	ldr	r2, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd4>
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fd54 	bl	8001744 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fd50 	bl	8001744 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e200      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe4>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fd40 	bl	8001744 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fd3c 	bl	8001744 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1ec      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x10c>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x18c>
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x176>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c0      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4939      	ldr	r1, [pc, #228]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_RCC_OscConfig+0x270>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fcf5 	bl	8001744 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fcf1 	bl	8001744 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a1      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4927      	ldr	r1, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_RCC_OscConfig+0x270>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fcd4 	bl	8001744 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fcd0 	bl	8001744 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e180      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03a      	beq.n	8002e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d019      	beq.n	8002e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fcb4 	bl	8001744 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fcb0 	bl	8001744 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e160      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f000 face 	bl	80033a0 <RCC_Delay>
 8002e04:	e01c      	b.n	8002e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_RCC_OscConfig+0x274>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fc9a 	bl	8001744 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fc96 	bl	8001744 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e146      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	42420000 	.word	0x42420000
 8002e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b92      	ldr	r3, [pc, #584]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e9      	bne.n	8002e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a6 	beq.w	8002f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a87      	ldr	r2, [pc, #540]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	61d3      	str	r3, [r2, #28]
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b82      	ldr	r3, [pc, #520]	; (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b7f      	ldr	r3, [pc, #508]	; (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7e      	ldr	r2, [pc, #504]	; (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fc57 	bl	8001744 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7fe fc53 	bl	8001744 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e103      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b75      	ldr	r3, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x4c8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x312>
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e02d      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x334>
 8002ed6:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	e01c      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x356>
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a60      	ldr	r2, [pc, #384]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a5d      	ldr	r2, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	e00b      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
 8002f12:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a57      	ldr	r2, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d015      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe fc07 	bl	8001744 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe fc03 	bl	8001744 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0b1      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCC_OscConfig+0x37e>
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fbf1 	bl	8001744 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fbed 	bl	8001744 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e09b      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ee      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa4:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d061      	beq.n	8003074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d146      	bne.n	8003046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fbc1 	bl	8001744 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fbbd 	bl	8001744 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e06d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d108      	bne.n	8003000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4921      	ldr	r1, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a19      	ldr	r1, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	430b      	orrs	r3, r1
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fb91 	bl	8001744 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fb8d 	bl	8001744 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x46a>
 8003044:	e035      	b.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fb7a 	bl	8001744 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fb76 	bl	8001744 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e026      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x498>
 8003072:	e01e      	b.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e019      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_OscConfig+0x500>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000

080030c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d0      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4965      	ldr	r1, [pc, #404]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800313e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d040      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d115      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e073      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4936      	ldr	r1, [pc, #216]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe fac8 	bl	8001744 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fac4 	bl	8001744 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e053      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d210      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1cc>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1d0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fa26 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40022000 	.word	0x40022000
 8003284:	40021000 	.word	0x40021000
 8003288:	080054ec 	.word	0x080054ec
 800328c:	20000010 	.word	0x20000010
 8003290:	20000014 	.word	0x20000014

08003294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0x94>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x30>
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x36>
 80032c2:	e027      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 80032c6:	613b      	str	r3, [r7, #16]
      break;
 80032c8:	e027      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0c9b      	lsrs	r3, r3, #18
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c5b      	lsrs	r3, r3, #17
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a0d      	ldr	r2, [pc, #52]	; (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 80032f6:	fb03 f202 	mul.w	r2, r3, r2
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	613b      	str	r3, [r7, #16]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	613b      	str	r3, [r7, #16]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	693b      	ldr	r3, [r7, #16]
}
 800331c:	4618      	mov	r0, r3
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	08005504 	.word	0x08005504
 8003334:	08005514 	.word	0x08005514
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000010 	.word	0x20000010

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	080054fc 	.word	0x080054fc

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	080054fc 	.word	0x080054fc

080033a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <RCC_Delay+0x34>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <RCC_Delay+0x38>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a5b      	lsrs	r3, r3, #9
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033bc:	bf00      	nop
  }
  while (Delay --);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	60fa      	str	r2, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f9      	bne.n	80033bc <RCC_Delay+0x1c>
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	20000010 	.word	0x20000010
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d07d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fc:	4b4f      	ldr	r3, [pc, #316]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b4c      	ldr	r3, [pc, #304]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4a4b      	ldr	r2, [pc, #300]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	61d3      	str	r3, [r2, #28]
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d118      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343c:	f7fe f982 	bl	8001744 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fe f97e 	bl	8001744 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e06d      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003462:	4b36      	ldr	r3, [pc, #216]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02e      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d027      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003480:	4b2e      	ldr	r3, [pc, #184]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe f94d 	bl	8001744 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe f949 	bl	8001744 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ee      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4917      	ldr	r1, [pc, #92]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	490b      	ldr	r1, [pc, #44]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
 8003544:	42420440 	.word	0x42420440

08003548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e076      	b.n	8003648 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d009      	beq.n	8003580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
 8003572:	e005      	b.n	8003580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fade 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1a      	lsrs	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f002 0204 	and.w	r2, r2, #4
 8003626:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e041      	b.n	80036e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fdd6 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fe12 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d001      	beq.n	8003708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e044      	b.n	8003792 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_TIM_Base_Start_IT+0xac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x6c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x6c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d00e      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x6c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x6c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_Base_Start_IT+0xb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x6c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_TIM_Base_Start_IT+0xbc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d010      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e007      	b.n	8003790 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40013400 	.word	0x40013400
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00

080037b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f839 	bl	800384e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fd62 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x24>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e022      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <HAL_TIM_PWM_Start+0x3e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e015      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d109      	bne.n	80038b8 <HAL_TIM_PWM_Start+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e072      	b.n	80039b8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x82>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	e013      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	e00b      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	e003      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ff8c 	bl	8004830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <HAL_TIM_PWM_Start+0x160>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_PWM_Start+0xcc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <HAL_TIM_PWM_Start+0x164>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_TIM_PWM_Start+0xd0>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_TIM_PWM_Start+0xd2>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_TIM_PWM_Start+0x160>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x122>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_TIM_PWM_Start+0x164>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x122>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x122>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_TIM_PWM_Start+0x168>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x122>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_TIM_PWM_Start+0x16c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x122>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIM_PWM_Start+0x170>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00

080039d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_TIM_PWM_Start_IT+0x28>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e022      	b.n	8003a42 <HAL_TIM_PWM_Start_IT+0x6e>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d109      	bne.n	8003a16 <HAL_TIM_PWM_Start_IT+0x42>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	e015      	b.n	8003a42 <HAL_TIM_PWM_Start_IT+0x6e>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d109      	bne.n	8003a30 <HAL_TIM_PWM_Start_IT+0x5c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e008      	b.n	8003a42 <HAL_TIM_PWM_Start_IT+0x6e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0bd      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <HAL_TIM_PWM_Start_IT+0x86>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a58:	e013      	b.n	8003a82 <HAL_TIM_PWM_Start_IT+0xae>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start_IT+0x96>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	e00b      	b.n	8003a82 <HAL_TIM_PWM_Start_IT+0xae>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start_IT+0xa6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a78:	e003      	b.n	8003a82 <HAL_TIM_PWM_Start_IT+0xae>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b0c      	cmp	r3, #12
 8003a86:	d841      	bhi.n	8003b0c <HAL_TIM_PWM_Start_IT+0x138>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003b0d 	.word	0x08003b0d
 8003a98:	08003b0d 	.word	0x08003b0d
 8003a9c:	08003b0d 	.word	0x08003b0d
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003b0d 	.word	0x08003b0d
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003b0d 	.word	0x08003b0d
 8003ac0:	08003afb 	.word	0x08003afb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0202 	orr.w	r2, r2, #2
 8003ad2:	60da      	str	r2, [r3, #12]
      break;
 8003ad4:	e01d      	b.n	8003b12 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0204 	orr.w	r2, r2, #4
 8003ae4:	60da      	str	r2, [r3, #12]
      break;
 8003ae6:	e014      	b.n	8003b12 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	60da      	str	r2, [r3, #12]
      break;
 8003af8:	e00b      	b.n	8003b12 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0210 	orr.w	r2, r2, #16
 8003b08:	60da      	str	r2, [r3, #12]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d155      	bne.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fe85 	bl	8004830 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a29      	ldr	r2, [pc, #164]	; (8003bd0 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_TIM_PWM_Start_IT+0x166>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_TIM_PWM_Start_IT+0x200>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_PWM_Start_IT+0x16a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_PWM_Start_IT+0x16c>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d018      	beq.n	8003b90 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIM_PWM_Start_IT+0x200>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d00e      	beq.n	8003b90 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_TIM_PWM_Start_IT+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d009      	beq.n	8003b90 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <HAL_TIM_PWM_Start_IT+0x208>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_TIM_PWM_Start_IT+0x20c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d111      	bne.n	8003bb4 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d010      	beq.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb2:	e007      	b.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00

08003be4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d841      	bhi.n	8003c7c <HAL_TIM_PWM_Stop_IT+0x98>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c7d 	.word	0x08003c7d
 8003c08:	08003c7d 	.word	0x08003c7d
 8003c0c:	08003c7d 	.word	0x08003c7d
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c7d 	.word	0x08003c7d
 8003c18:	08003c7d 	.word	0x08003c7d
 8003c1c:	08003c7d 	.word	0x08003c7d
 8003c20:	08003c59 	.word	0x08003c59
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003c6b 	.word	0x08003c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0202 	bic.w	r2, r2, #2
 8003c42:	60da      	str	r2, [r3, #12]
      break;
 8003c44:	e01d      	b.n	8003c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0204 	bic.w	r2, r2, #4
 8003c54:	60da      	str	r2, [r3, #12]
      break;
 8003c56:	e014      	b.n	8003c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0208 	bic.w	r2, r2, #8
 8003c66:	60da      	str	r2, [r3, #12]
      break;
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0210 	bic.w	r2, r2, #16
 8003c78:	60da      	str	r2, [r3, #12]
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d161      	bne.n	8003d4c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	6839      	ldr	r1, [r7, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fdcd 	bl	8004830 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	; (8003d58 <HAL_TIM_PWM_Stop_IT+0x174>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_PWM_Stop_IT+0xc6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_TIM_PWM_Stop_IT+0x178>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_Stop_IT+0xca>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_TIM_PWM_Stop_IT+0xcc>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10f      	bne.n	8003ce4 <HAL_TIM_PWM_Stop_IT+0x100>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	f240 4344 	movw	r3, #1092	; 0x444
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_PWM_Stop_IT+0x100>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10f      	bne.n	8003d14 <HAL_TIM_PWM_Stop_IT+0x130>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	f240 4344 	movw	r3, #1092	; 0x444
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_TIM_PWM_Stop_IT+0x130>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_TIM_PWM_Stop_IT+0x140>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d22:	e013      	b.n	8003d4c <HAL_TIM_PWM_Stop_IT+0x168>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d104      	bne.n	8003d34 <HAL_TIM_PWM_Stop_IT+0x150>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d32:	e00b      	b.n	8003d4c <HAL_TIM_PWM_Stop_IT+0x168>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d104      	bne.n	8003d44 <HAL_TIM_PWM_Stop_IT+0x160>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d42:	e003      	b.n	8003d4c <HAL_TIM_PWM_Stop_IT+0x168>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa76 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa69 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fc fd63 	bl	800087c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa4c 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa3f 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fc fd39 	bl	800087c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa22 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa15 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc fd0f 	bl	800087c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9f8 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9eb 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fc fce5 	bl	800087c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc fcb9 	bl	8000856 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fd7a 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b5 	bl	80042a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0220 	mvn.w	r2, #32
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fd45 	bl	80049f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0ae      	b.n	80040ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	f200 809f 	bhi.w	80040dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	080040dd 	.word	0x080040dd
 8003fac:	080040dd 	.word	0x080040dd
 8003fb0:	080040dd 	.word	0x080040dd
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	080040dd 	.word	0x080040dd
 8003fbc:	080040dd 	.word	0x080040dd
 8003fc0:	080040dd 	.word	0x080040dd
 8003fc4:	0800405b 	.word	0x0800405b
 8003fc8:	080040dd 	.word	0x080040dd
 8003fcc:	080040dd 	.word	0x080040dd
 8003fd0:	080040dd 	.word	0x080040dd
 8003fd4:	0800409b 	.word	0x0800409b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f9e4 	bl	80043ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0208 	orr.w	r2, r2, #8
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	619a      	str	r2, [r3, #24]
      break;
 8004016:	e064      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa34 	bl	800448c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6999      	ldr	r1, [r3, #24]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	619a      	str	r2, [r3, #24]
      break;
 8004058:	e043      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fa87 	bl	8004574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0204 	bic.w	r2, r2, #4
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
      break;
 8004098:	e023      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fadb 	bl	800465c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69d9      	ldr	r1, [r3, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	021a      	lsls	r2, r3, #8
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	61da      	str	r2, [r3, #28]
      break;
 80040da:	e002      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]
      break;
 80040e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIM_ConfigClockSource+0x1c>
 800410c:	2302      	movs	r3, #2
 800410e:	e0b4      	b.n	800427a <HAL_TIM_ConfigClockSource+0x186>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d03e      	beq.n	80041c8 <HAL_TIM_ConfigClockSource+0xd4>
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	f200 8087 	bhi.w	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	f000 8086 	beq.w	8004266 <HAL_TIM_ConfigClockSource+0x172>
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d87f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d01a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0xa6>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d87b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d050      	beq.n	800420e <HAL_TIM_ConfigClockSource+0x11a>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d877      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b50      	cmp	r3, #80	; 0x50
 8004172:	d03c      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0xfa>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d873      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d058      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x13a>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d86f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b30      	cmp	r3, #48	; 0x30
 8004182:	d064      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d86b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b20      	cmp	r3, #32
 800418a:	d060      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d867      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	2b10      	cmp	r3, #16
 8004196:	d05a      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	e062      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041aa:	f000 fb22 	bl	80047f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
      break;
 80041c6:	e04f      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d8:	f000 fb0b 	bl	80047f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ea:	609a      	str	r2, [r3, #8]
      break;
 80041ec:	e03c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	461a      	mov	r2, r3
 80041fc:	f000 fa82 	bl	8004704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2150      	movs	r1, #80	; 0x50
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fad9 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800420c:	e02c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 faa0 	bl	8004760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2160      	movs	r1, #96	; 0x60
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fac9 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800422c:	e01c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 fa62 	bl	8004704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fab9 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800424c:	e00c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f000 fab0 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800425e:	e003      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e000      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a33      	ldr	r2, [pc, #204]	; (8004398 <TIM_Base_SetConfig+0xe0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a32      	ldr	r2, [pc, #200]	; (800439c <TIM_Base_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0xe8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <TIM_Base_SetConfig+0xec>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <TIM_Base_SetConfig+0xf0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <TIM_Base_SetConfig+0xe0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <TIM_Base_SetConfig+0x82>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a21      	ldr	r2, [pc, #132]	; (800439c <TIM_Base_SetConfig+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_Base_SetConfig+0x82>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x82>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <TIM_Base_SetConfig+0xe8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x82>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <TIM_Base_SetConfig+0xec>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x82>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <TIM_Base_SetConfig+0xf0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <TIM_Base_SetConfig+0xe0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0xc8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <TIM_Base_SetConfig+0xe4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d103      	bne.n	8004388 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	615a      	str	r2, [r3, #20]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00

080043ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0201 	bic.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 0302 	bic.w	r3, r3, #2
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <TIM_OC1_SetConfig+0xd8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC1_SetConfig+0x64>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <TIM_OC1_SetConfig+0xdc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10c      	bne.n	800442a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0308 	bic.w	r3, r3, #8
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a15      	ldr	r2, [pc, #84]	; (8004484 <TIM_OC1_SetConfig+0xd8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_OC1_SetConfig+0x8e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a14      	ldr	r2, [pc, #80]	; (8004488 <TIM_OC1_SetConfig+0xdc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400

0800448c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0210 	bic.w	r2, r3, #16
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a21      	ldr	r2, [pc, #132]	; (800456c <TIM_OC2_SetConfig+0xe0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_OC2_SetConfig+0x68>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <TIM_OC2_SetConfig+0xe4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d10d      	bne.n	8004510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <TIM_OC2_SetConfig+0xe0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_OC2_SetConfig+0x94>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <TIM_OC2_SetConfig+0xe4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d113      	bne.n	8004548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40013400 	.word	0x40013400

08004574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <TIM_OC3_SetConfig+0xe0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC3_SetConfig+0x66>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <TIM_OC3_SetConfig+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10d      	bne.n	80045f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a16      	ldr	r2, [pc, #88]	; (8004654 <TIM_OC3_SetConfig+0xe0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC3_SetConfig+0x92>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <TIM_OC3_SetConfig+0xe4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d113      	bne.n	800462e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800460c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40013400 	.word	0x40013400

0800465c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a11      	ldr	r2, [pc, #68]	; (80046fc <TIM_OC4_SetConfig+0xa0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC4_SetConfig+0x68>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <TIM_OC4_SetConfig+0xa4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d109      	bne.n	80046d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40013400 	.word	0x40013400

08004704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 030a 	bic.w	r3, r3, #10
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0210 	bic.w	r2, r3, #16
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	031b      	lsls	r3, r3, #12
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	431a      	orrs	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4313      	orrs	r3, r2
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e050      	b.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d00e      	beq.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10c      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	4313      	orrs	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40000c00 	.word	0x40000c00

08004950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004968:	2302      	movs	r3, #2
 800496a:	e03d      	b.n	80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e042      	b.n	8004aae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fd6f 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2224      	movs	r2, #36	; 0x24
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fc80 	bl	8005360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b0ba      	sub	sp, #232	; 0xe8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_UART_IRQHandler+0x66>
 8004b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fb63 	bl	80051e2 <UART_Receive_IT>
      return;
 8004b1c:	e25b      	b.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80de 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x22c>
 8004b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80d1 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_UART_IRQHandler+0xae>
 8004b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_UART_IRQHandler+0xd2>
 8004b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_UART_IRQHandler+0xf6>
 8004b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d011      	beq.n	8004bde <HAL_UART_IRQHandler+0x126>
 8004bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f043 0208 	orr.w	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 81f2 	beq.w	8004fcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_UART_IRQHandler+0x14e>
 8004bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 faee 	bl	80051e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <HAL_UART_IRQHandler+0x17a>
 8004c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04f      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9f8 	bl	8005028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d041      	beq.n	8004cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1d9      	bne.n	8004c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d013      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_UART_IRQHandler+0x3e0>)
 8004ca0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd f93a 	bl	8001f20 <HAL_DMA_Abort_IT>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e00e      	b.n	8004ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f99c 	bl	8005000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e00a      	b.n	8004ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f998 	bl	8005000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e006      	b.n	8004ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f994 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cde:	e175      	b.n	8004fcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	bf00      	nop
    return;
 8004ce2:	e173      	b.n	8004fcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	f040 814f 	bne.w	8004f8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8148 	beq.w	8004f8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8141 	beq.w	8004f8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80b6 	beq.w	8004e9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8145 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	f080 813e 	bcs.w	8004fd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	f000 8088 	beq.w	8004e78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1d9      	bne.n	8004d68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e1      	bne.n	8004db4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e3      	bne.n	8004df0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e3      	bne.n	8004e36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f818 	bl	8001ea8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f8bf 	bl	8005012 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e94:	e09c      	b.n	8004fd0 <HAL_UART_IRQHandler+0x518>
 8004e96:	bf00      	nop
 8004e98:	080050ed 	.word	0x080050ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 808e 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8089 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e3      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	623b      	str	r3, [r7, #32]
   return(result);
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e3      	bne.n	8004efa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f64:	61fa      	str	r2, [r7, #28]
 8004f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	69b9      	ldr	r1, [r7, #24]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	617b      	str	r3, [r7, #20]
   return(result);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e3      	bne.n	8004f40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f844 	bl	8005012 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f8a:	e023      	b.n	8004fd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_UART_IRQHandler+0x4f4>
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8b5 	bl	8005114 <UART_Transmit_IT>
    return;
 8004faa:	e014      	b.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00e      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8f4 	bl	80051b2 <UART_EndTransmit_IT>
    return;
 8004fca:	e004      	b.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fcc:	bf00      	nop
 8004fce:	e002      	b.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fd0:	bf00      	nop
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fd4:	bf00      	nop
  }
}
 8004fd6:	37e8      	adds	r7, #232	; 0xe8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b095      	sub	sp, #84	; 0x54
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005050:	643a      	str	r2, [r7, #64]	; 0x40
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e5      	bne.n	8005030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	61fb      	str	r3, [r7, #28]
   return(result);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d119      	bne.n	80050d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c0:	61ba      	str	r2, [r7, #24]
 80050c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	613b      	str	r3, [r7, #16]
   return(result);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e5      	bne.n	80050a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050e2:	bf00      	nop
 80050e4:	3754      	adds	r7, #84	; 0x54
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff ff7a 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b21      	cmp	r3, #33	; 0x21
 8005126:	d13e      	bne.n	80051a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d114      	bne.n	800515c <UART_Transmit_IT+0x48>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d110      	bne.n	800515c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]
 800515a:	e008      	b.n	800516e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	1c59      	adds	r1, r3, #1
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6211      	str	r1, [r2, #32]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29b      	uxth	r3, r3
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4619      	mov	r1, r3
 800517c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005190:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ff02 	bl	8004fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b08c      	sub	sp, #48	; 0x30
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b22      	cmp	r3, #34	; 0x22
 80051f4:	f040 80ae 	bne.w	8005354 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005200:	d117      	bne.n	8005232 <UART_Receive_IT+0x50>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d113      	bne.n	8005232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005220:	b29a      	uxth	r2, r3
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
 8005230:	e026      	b.n	8005280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d007      	beq.n	8005256 <UART_Receive_IT+0x74>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <UART_Receive_IT+0x82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e008      	b.n	8005276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4619      	mov	r1, r3
 800528e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005290:	2b00      	cmp	r3, #0
 8005292:	d15d      	bne.n	8005350 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0220 	bic.w	r2, r2, #32
 80052a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d135      	bne.n	8005346 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	623a      	str	r2, [r7, #32]
 8005302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	61bb      	str	r3, [r7, #24]
   return(result);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d10a      	bne.n	8005338 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe67 	bl	8005012 <HAL_UARTEx_RxEventCallback>
 8005344:	e002      	b.n	800534c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fe51 	bl	8004fee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e002      	b.n	8005356 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3730      	adds	r7, #48	; 0x30
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800539a:	f023 030c 	bic.w	r3, r3, #12
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	430b      	orrs	r3, r1
 80053a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <UART_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fd ffd6 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	e002      	b.n	80053d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fd ffbe 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80053d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <UART_SetConfig+0x118>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	0119      	lsls	r1, r3, #4
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009a      	lsls	r2, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	fbb2 f2f3 	udiv	r2, r2, r3
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <UART_SetConfig+0x118>)
 800540e:	fba3 0302 	umull	r0, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2064      	movs	r0, #100	; 0x64
 8005416:	fb00 f303 	mul.w	r3, r0, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	3332      	adds	r3, #50	; 0x32
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <UART_SetConfig+0x118>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542c:	4419      	add	r1, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009a      	lsls	r2, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	fbb2 f2f3 	udiv	r2, r2, r3
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <UART_SetConfig+0x118>)
 8005446:	fba3 0302 	umull	r0, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2064      	movs	r0, #100	; 0x64
 800544e:	fb00 f303 	mul.w	r3, r0, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	3332      	adds	r3, #50	; 0x32
 8005458:	4a07      	ldr	r2, [pc, #28]	; (8005478 <UART_SetConfig+0x118>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	440a      	add	r2, r1
 800546a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40013800 	.word	0x40013800
 8005478:	51eb851f 	.word	0x51eb851f

0800547c <memset>:
 800547c:	4603      	mov	r3, r0
 800547e:	4402      	add	r2, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	2600      	movs	r6, #0
 8005490:	4d0c      	ldr	r5, [pc, #48]	; (80054c4 <__libc_init_array+0x38>)
 8005492:	4c0d      	ldr	r4, [pc, #52]	; (80054c8 <__libc_init_array+0x3c>)
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	f000 f81a 	bl	80054d4 <_init>
 80054a0:	2600      	movs	r6, #0
 80054a2:	4d0a      	ldr	r5, [pc, #40]	; (80054cc <__libc_init_array+0x40>)
 80054a4:	4c0a      	ldr	r4, [pc, #40]	; (80054d0 <__libc_init_array+0x44>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	08005518 	.word	0x08005518
 80054c8:	08005518 	.word	0x08005518
 80054cc:	08005518 	.word	0x08005518
 80054d0:	0800551c 	.word	0x0800551c

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
