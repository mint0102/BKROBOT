
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004610  08004610  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004610  08004610  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004610  08004610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  08004624  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004624  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a47  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245e  00000000  00000000  00031abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00033f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e33  00000000  00000000  00035100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a22c  00000000  00000000  00035f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016090  00000000  00000000  0005015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eb2a  00000000  00000000  000661ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb0  00000000  00000000  00104d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  001099cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080045cc 	.word	0x080045cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080045cc 	.word	0x080045cc

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 ff02 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f815 	bl	800025a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 fb4c 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000234:	f000 fb2c 	bl	8000890 <MX_DMA_Init>
  MX_ADC1_Init();
 8000238:	f000 f86c 	bl	8000314 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800023c:	f000 fad4 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000240:	f000 fafc 	bl	800083c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000244:	f000 f8a4 	bl	8000390 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000248:	f000 f8d0 	bl	80003ec <MX_SPI1_Init>
  MX_TIM8_Init();
 800024c:	f000 fa08 	bl	8000660 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000250:	f000 f902 	bl	8000458 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000254:	f000 f98e 	bl	8000574 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x34>

0800025a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b096      	sub	sp, #88	; 0x58
 800025e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000264:	2228      	movs	r2, #40	; 0x28
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f004 f983 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	f107 031c 	add.w	r3, r7, #28
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
 800028c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	2301      	movs	r3, #1
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 f935 	bl	8002524 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002c0:	f000 fbb0 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	2102      	movs	r1, #2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fba1 	bl	8002a28 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ec:	f000 fb9a 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f0:	2302      	movs	r3, #2
 80002f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fd21 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000308:	f000 fb8c 	bl	8000a24 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3758      	adds	r7, #88	; 0x58
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_ADC1_Init+0x74>)
 8000326:	4a19      	ldr	r2, [pc, #100]	; (800038c <MX_ADC1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC1_Init+0x74>)
 800033e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000342:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_ADC1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_ADC1_Init+0x74>)
 8000352:	f000 fecf 	bl	80010f4 <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 fb62 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000360:	2308      	movs	r3, #8
 8000362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_ADC1_Init+0x74>)
 8000372:	f000 ffa9 	bl	80012c8 <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 fb52 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40012400 	.word	0x40012400

08000390 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_I2C2_Init+0x50>)
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <MX_I2C2_Init+0x54>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_I2C2_Init+0x50>)
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_I2C2_Init+0x58>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_I2C2_Init+0x50>)
 80003ce:	f001 ff65 	bl	800229c <HAL_I2C_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003d8:	f000 fb24 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000009c 	.word	0x2000009c
 80003e4:	40005800 	.word	0x40005800
 80003e8:	000186a0 	.word	0x000186a0

080003ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_SPI1_Init+0x64>)
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <MX_SPI1_Init+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_SPI1_Init+0x64>)
 80003f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_SPI1_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_SPI1_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_SPI1_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_SPI1_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_SPI1_Init+0x64>)
 8000418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800041c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_SPI1_Init+0x64>)
 8000420:	2208      	movs	r2, #8
 8000422:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_SPI1_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_SPI1_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_SPI1_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_SPI1_Init+0x64>)
 8000438:	220a      	movs	r2, #10
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_SPI1_Init+0x64>)
 800043e:	f002 fd37 	bl	8002eb0 <HAL_SPI_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000448:	f000 faec 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000f0 	.word	0x200000f0
 8000454:	40013000 	.word	0x40013000

08000458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08e      	sub	sp, #56	; 0x38
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	f107 0320 	add.w	r3, r7, #32
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000488:	4b38      	ldr	r3, [pc, #224]	; (800056c <MX_TIM4_Init+0x114>)
 800048a:	4a39      	ldr	r2, [pc, #228]	; (8000570 <MX_TIM4_Init+0x118>)
 800048c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600-1;
 800048e:	4b37      	ldr	r3, [pc, #220]	; (800056c <MX_TIM4_Init+0x114>)
 8000490:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000494:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b35      	ldr	r3, [pc, #212]	; (800056c <MX_TIM4_Init+0x114>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800049c:	4b33      	ldr	r3, [pc, #204]	; (800056c <MX_TIM4_Init+0x114>)
 800049e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b31      	ldr	r3, [pc, #196]	; (800056c <MX_TIM4_Init+0x114>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004aa:	4b30      	ldr	r3, [pc, #192]	; (800056c <MX_TIM4_Init+0x114>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004b0:	482e      	ldr	r0, [pc, #184]	; (800056c <MX_TIM4_Init+0x114>)
 80004b2:	f002 fd81 	bl	8002fb8 <HAL_TIM_Base_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80004bc:	f000 fab2 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ca:	4619      	mov	r1, r3
 80004cc:	4827      	ldr	r0, [pc, #156]	; (800056c <MX_TIM4_Init+0x114>)
 80004ce:	f002 fedd 	bl	800328c <HAL_TIM_ConfigClockSource>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80004d8:	f000 faa4 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004dc:	4823      	ldr	r0, [pc, #140]	; (800056c <MX_TIM4_Init+0x114>)
 80004de:	f002 fdba 	bl	8003056 <HAL_TIM_PWM_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80004e8:	f000 fa9c 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004f4:	f107 0320 	add.w	r3, r7, #32
 80004f8:	4619      	mov	r1, r3
 80004fa:	481c      	ldr	r0, [pc, #112]	; (800056c <MX_TIM4_Init+0x114>)
 80004fc:	f003 fa4a 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000506:	f000 fa8d 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050a:	2360      	movs	r3, #96	; 0x60
 800050c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_TIM4_Init+0x114>)
 8000522:	f002 fdf1 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800052c:	f000 fa7a 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2204      	movs	r2, #4
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_TIM4_Init+0x114>)
 8000538:	f002 fde6 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000542:	f000 fa6f 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2208      	movs	r2, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <MX_TIM4_Init+0x114>)
 800054e:	f002 fddb 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000558:	f000 fa64 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <MX_TIM4_Init+0x114>)
 800055e:	f000 fbe9 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000562:	bf00      	nop
 8000564:	3738      	adds	r7, #56	; 0x38
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000148 	.word	0x20000148
 8000570:	40000800 	.word	0x40000800

08000574 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <MX_TIM5_Init+0xe8>)
 80005a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005ac:	f240 22cf 	movw	r2, #719	; 0x2cf
 80005b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005ba:	2263      	movs	r2, #99	; 0x63
 80005bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80005ca:	4823      	ldr	r0, [pc, #140]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005cc:	f002 fcf4 	bl	8002fb8 <HAL_TIM_Base_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80005d6:	f000 fa25 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80005e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e4:	4619      	mov	r1, r3
 80005e6:	481c      	ldr	r0, [pc, #112]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005e8:	f002 fe50 	bl	800328c <HAL_TIM_ConfigClockSource>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80005f2:	f000 fa17 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <MX_TIM5_Init+0xe4>)
 80005f8:	f002 fd2d 	bl	8003056 <HAL_TIM_PWM_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 fa0f 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_TIM5_Init+0xe4>)
 8000616:	f003 f9bd 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000620:	f000 fa00 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <MX_TIM5_Init+0xe4>)
 800063c:	f002 fd64 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000646:	f000 f9ed 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <MX_TIM5_Init+0xe4>)
 800064c:	f000 fb72 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000650:	bf00      	nop
 8000652:	3738      	adds	r7, #56	; 0x38
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000190 	.word	0x20000190
 800065c:	40000c00 	.word	0x40000c00

08000660 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2220      	movs	r2, #32
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f003 ff6b 	bl	8004574 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800069e:	4b50      	ldr	r3, [pc, #320]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006a0:	4a50      	ldr	r2, [pc, #320]	; (80007e4 <MX_TIM8_Init+0x184>)
 80006a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 80006a4:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006a6:	f240 1267 	movw	r2, #359	; 0x167
 80006aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b4c      	ldr	r3, [pc, #304]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80006b2:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006b4:	2263      	movs	r2, #99	; 0x63
 80006b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b49      	ldr	r3, [pc, #292]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80006ca:	4845      	ldr	r0, [pc, #276]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006cc:	f002 fc74 	bl	8002fb8 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80006d6:	f000 f9a5 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e4:	4619      	mov	r1, r3
 80006e6:	483e      	ldr	r0, [pc, #248]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006e8:	f002 fdd0 	bl	800328c <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80006f2:	f000 f997 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <MX_TIM8_Init+0x180>)
 80006f8:	f002 fcad 	bl	8003056 <HAL_TIM_PWM_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000702:	f000 f98f 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800070e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000712:	4619      	mov	r1, r3
 8000714:	4832      	ldr	r0, [pc, #200]	; (80007e0 <MX_TIM8_Init+0x180>)
 8000716:	f003 f93d 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000720:	f000 f980 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000724:	2360      	movs	r3, #96	; 0x60
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4825      	ldr	r0, [pc, #148]	; (80007e0 <MX_TIM8_Init+0x180>)
 800074a:	f002 fcdd 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000754:	f000 f966 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	2204      	movs	r2, #4
 800075e:	4619      	mov	r1, r3
 8000760:	481f      	ldr	r0, [pc, #124]	; (80007e0 <MX_TIM8_Init+0x180>)
 8000762:	f002 fcd1 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800076c:	f000 f95a 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	2208      	movs	r2, #8
 8000776:	4619      	mov	r1, r3
 8000778:	4819      	ldr	r0, [pc, #100]	; (80007e0 <MX_TIM8_Init+0x180>)
 800077a:	f002 fcc5 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000784:	f000 f94e 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	220c      	movs	r2, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM8_Init+0x180>)
 8000792:	f002 fcb9 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800079c:	f000 f942 	bl	8000a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM8_Init+0x180>)
 80007c4:	f003 f952 	bl	8003a6c <HAL_TIMEx_ConfigBreakDeadTime>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80007ce:	f000 f929 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM8_Init+0x180>)
 80007d4:	f000 faae 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001d8 	.word	0x200001d8
 80007e4:	40013400 	.word	0x40013400

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f003 f975 	bl	8003b0e <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f8fb 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000220 	.word	0x20000220
 8000838:	40013800 	.word	0x40013800

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f003 f94b 	bl	8003b0e <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f8d1 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000268 	.word	0x20000268
 800088c:	40004400 	.word	0x40004400

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x38>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <MX_DMA_Init+0x38>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x38>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	200b      	movs	r0, #11
 80008b4:	f000 ff19 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008b8:	200b      	movs	r0, #11
 80008ba:	f000 ff32 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f8:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <MX_GPIO_Init+0x144>)
 80008fe:	f043 0320 	orr.w	r3, r3, #32
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0320 	and.w	r3, r3, #32
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x144>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x144>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a38      	ldr	r2, [pc, #224]	; (8000a10 <MX_GPIO_Init+0x144>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <MX_GPIO_Init+0x144>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000946:	4833      	ldr	r0, [pc, #204]	; (8000a14 <MX_GPIO_Init+0x148>)
 8000948:	f001 fc90 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 800094c:	2200      	movs	r2, #0
 800094e:	f649 1102 	movw	r1, #39170	; 0x9902
 8000952:	4831      	ldr	r0, [pc, #196]	; (8000a18 <MX_GPIO_Init+0x14c>)
 8000954:	f001 fc8a 	bl	800226c <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_STEP_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2134      	movs	r1, #52	; 0x34
 800095c:	482f      	ldr	r0, [pc, #188]	; (8000a1c <MX_GPIO_Init+0x150>)
 800095e:	f001 fc85 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin DEBUG_LED_Pin LED_LATCH_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 8000962:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4826      	ldr	r0, [pc, #152]	; (8000a14 <MX_GPIO_Init+0x148>)
 800097c:	f001 fae2 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_DIR_Pin LED_EN_Pin LED7_EN1_Pin LED7_EN2_Pin
                           INPUT_LOAD_Pin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8000980:	f649 1302 	movw	r3, #39170	; 0x9902
 8000984:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4619      	mov	r1, r3
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <MX_GPIO_Init+0x14c>)
 800099a:	f001 fad3 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_DIR_Pin SM_STEP_Pin SM_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_STEP_Pin|SM_DIR_Pin;
 800099e:	2334      	movs	r3, #52	; 0x34
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MX_GPIO_Init+0x150>)
 80009b6:	f001 fac5 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER3_B_Pin ENCODER3_A_Pin ENCODER4_B_Pin ENCODER4_A_Pin
                           SM_FAULT_Pin ENCODER1_A_Pin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80009ba:	f24f 2308 	movw	r3, #61960	; 0xf208
 80009be:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0x150>)
 80009d0:	f001 fab8 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER2_A_Pin ENCODER2_B_Pin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80009d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <MX_GPIO_Init+0x148>)
 80009ea:	f001 faab 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER1_B_Pin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80009ee:	2304      	movs	r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_GPIO_Init+0x154>)
 8000a02:	f001 fa9f 	bl	8001f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	40011400 	.word	0x40011400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <HAL_ADC_MspInit+0xe8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d15f      	bne.n	8000b74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_ADC_MspInit+0xec>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000afc:	233f      	movs	r3, #63	; 0x3f
 8000afe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <HAL_ADC_MspInit+0xf0>)
 8000b0c:	f001 fa1a 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b10:	2303      	movs	r3, #3
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <HAL_ADC_MspInit+0xf4>)
 8000b20:	f001 fa10 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0xfc>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b5a:	f000 fdfd 	bl	8001758 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000b64:	f7ff ff5e 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b6c:	621a      	str	r2, [r3, #32]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_ADC_MspInit+0xf8>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40012400 	.word	0x40012400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	20000058 	.word	0x20000058
 8000b90:	40020008 	.word	0x40020008

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d124      	bne.n	8000bfe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <HAL_I2C_MspInit+0x7c>)
 8000be2:	f001 f9af 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40005800 	.word	0x40005800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010c00 	.word	0x40010c00

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d12f      	bne.n	8000c94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c64:	23b0      	movs	r3, #176	; 0xb0
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_SPI_MspInit+0x90>)
 8000c78:	f001 f964 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x90>)
 8000c90:	f001 f958 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_TIM_Base_MspInit+0x7c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000cd2:	e022      	b.n	8000d1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_TIM_Base_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
}
 8000cf6:	e010      	b.n	8000d1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_TIM_Base_MspInit+0x88>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10b      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_TIM_Base_MspInit+0x80>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	bf00      	nop
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40000800 	.word	0x40000800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40000c00 	.word	0x40000c00
 8000d30:	40013400 	.word	0x40013400

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_TIM_MspPostInit+0xd4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d119      	bne.n	8000d88 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a2c      	ldr	r2, [pc, #176]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8000d6c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0318 	add.w	r3, r7, #24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4823      	ldr	r0, [pc, #140]	; (8000e10 <HAL_TIM_MspPostInit+0xdc>)
 8000d82:	f001 f8df 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d86:	e03b      	b.n	8000e00 <HAL_TIM_MspPostInit+0xcc>
  else if(htim->Instance==TIM5)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <HAL_TIM_MspPostInit+0xe0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d118      	bne.n	8000dc4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2302      	movs	r3, #2
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <HAL_TIM_MspPostInit+0xe4>)
 8000dbe:	f001 f8c1 	bl	8001f44 <HAL_GPIO_Init>
}
 8000dc2:	e01d      	b.n	8000e00 <HAL_TIM_MspPostInit+0xcc>
  else if(htim->Instance==TIM8)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_TIM_MspPostInit+0xe8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d118      	bne.n	8000e00 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_MspPostInit+0xd8>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8000de6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_TIM_MspPostInit+0xec>)
 8000dfc:	f001 f8a2 	bl	8001f44 <HAL_GPIO_Init>
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40000c00 	.word	0x40000c00
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	40013400 	.word	0x40013400
 8000e20:	40011000 	.word	0x40011000

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a3f      	ldr	r2, [pc, #252]	; (8000f3c <HAL_UART_MspInit+0x118>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13a      	bne.n	8000eba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	4619      	mov	r1, r3
 8000e88:	482e      	ldr	r0, [pc, #184]	; (8000f44 <HAL_UART_MspInit+0x120>)
 8000e8a:	f001 f85b 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4828      	ldr	r0, [pc, #160]	; (8000f44 <HAL_UART_MspInit+0x120>)
 8000ea4:	f001 f84e 	bl	8001f44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2025      	movs	r0, #37	; 0x25
 8000eae:	f000 fc1c 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb2:	2025      	movs	r0, #37	; 0x25
 8000eb4:	f000 fc35 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb8:	e03c      	b.n	8000f34 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <HAL_UART_MspInit+0x124>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d137      	bne.n	8000f34 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ece:	61d3      	str	r3, [r2, #28]
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_UART_MspInit+0x11c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4619      	mov	r1, r3
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <HAL_UART_MspInit+0x120>)
 8000f08:	f001 f81c 	bl	8001f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <HAL_UART_MspInit+0x120>)
 8000f20:	f001 f810 	bl	8001f44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fbde 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f000 fbf7 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40004400 	.word	0x40004400

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f893 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA1_Channel1_IRQHandler+0x10>)
 8000fa2:	f000 fd93 	bl	8001acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000058 	.word	0x20000058

08000fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART1_IRQHandler+0x10>)
 8000fb6:	f002 fdfb 	bl	8003bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000220 	.word	0x20000220

08000fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART2_IRQHandler+0x10>)
 8000fca:	f002 fdf1 	bl	8003bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000268 	.word	0x20000268

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff fff8 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001000:	4c09      	ldr	r4, [pc, #36]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 fab9 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff f907 	bl	8000224 <main>
  bx lr
 8001016:	4770      	bx	lr
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001020:	08004618 	.word	0x08004618
  ldr r2, =_sbss
 8001024:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001028:	200002b4 	.word	0x200002b4

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x28>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 fb47 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fcf0 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fb5f 	bl	800173e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 fb27 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000008 	.word	0x20000008
 80010dc:	200002b0 	.word	0x200002b0

080010e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200002b0 	.word	0x200002b0

080010f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e0ce      	b.n	80012b4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fcae 	bl	8000a94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f9bd 	bl	80014b8 <ADC_ConversionStop_Disable>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80a9 	bne.w	80012a2 <HAL_ADC_Init+0x1ae>
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80a5 	bne.w	80012a2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001160:	f023 0302 	bic.w	r3, r3, #2
 8001164:	f043 0202 	orr.w	r2, r3, #2
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4951      	ldr	r1, [pc, #324]	; (80012bc <HAL_ADC_Init+0x1c8>)
 8001176:	428b      	cmp	r3, r1
 8001178:	d10a      	bne.n	8001190 <HAL_ADC_Init+0x9c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001182:	d002      	beq.n	800118a <HAL_ADC_Init+0x96>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	e004      	b.n	8001194 <HAL_ADC_Init+0xa0>
 800118a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800118e:	e001      	b.n	8001194 <HAL_ADC_Init+0xa0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001194:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7b1b      	ldrb	r3, [r3, #12]
 800119a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800119c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ac:	d003      	beq.n	80011b6 <HAL_ADC_Init+0xc2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_ADC_Init+0xc8>
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	e000      	b.n	80011be <HAL_ADC_Init+0xca>
 80011bc:	2300      	movs	r3, #0
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7d1b      	ldrb	r3, [r3, #20]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d119      	bne.n	8001200 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d109      	bne.n	80011e8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	3b01      	subs	r3, #1
 80011da:	035a      	lsls	r2, r3, #13
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e00b      	b.n	8001200 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f043 0220 	orr.w	r2, r3, #32
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_ADC_Init+0x1cc>)
 800121c:	4013      	ands	r3, r2
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	430b      	orrs	r3, r1
 8001226:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001230:	d003      	beq.n	800123a <HAL_ADC_Init+0x146>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d104      	bne.n	8001244 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	3b01      	subs	r3, #1
 8001240:	051b      	lsls	r3, r3, #20
 8001242:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	430a      	orrs	r2, r1
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_ADC_Init+0x1d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	429a      	cmp	r2, r3
 8001266:	d10b      	bne.n	8001280 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f023 0303 	bic.w	r3, r3, #3
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800127e:	e018      	b.n	80012b2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	f023 0312 	bic.w	r3, r3, #18
 8001288:	f043 0210 	orr.w	r2, r3, #16
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a0:	e007      	b.n	80012b2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013c00 	.word	0x40013c00
 80012c0:	ffe1f7fd 	.word	0xffe1f7fd
 80012c4:	ff1f0efe 	.word	0xff1f0efe

080012c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x20>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e0dc      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1da>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d81c      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b05      	subs	r3, #5
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b05      	subs	r3, #5
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
 8001330:	e03c      	b.n	80013ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b0c      	cmp	r3, #12
 8001338:	d81c      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b23      	subs	r3, #35	; 0x23
 800134c:	221f      	movs	r2, #31
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	4019      	ands	r1, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b23      	subs	r3, #35	; 0x23
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
 8001372:	e01b      	b.n	80013ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b41      	subs	r3, #65	; 0x41
 8001386:	221f      	movs	r2, #31
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b41      	subs	r3, #65	; 0x41
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d91c      	bls.n	80013ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68d9      	ldr	r1, [r3, #12]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1e      	subs	r3, #30
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3b1e      	subs	r3, #30
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	e019      	b.n	8001422 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6919      	ldr	r1, [r3, #16]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	2207      	movs	r2, #7
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	4019      	ands	r1, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6898      	ldr	r0, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d003      	beq.n	8001432 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800142e:	2b11      	cmp	r3, #17
 8001430:	d132      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d125      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d126      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001458:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d11a      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9a      	lsrs	r2, r3, #18
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001478:	e002      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3b01      	subs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <HAL_ADC_ConfigChannel+0x1b2>
 8001486:	e007      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f043 0220 	orr.w	r2, r3, #32
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40012400 	.word	0x40012400
 80014b0:	20000000 	.word	0x20000000
 80014b4:	431bde83 	.word	0x431bde83

080014b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d12e      	bne.n	8001530 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e2:	f7ff fdfd 	bl	80010e0 <HAL_GetTick>
 80014e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014e8:	e01b      	b.n	8001522 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ea:	f7ff fdf9 	bl	80010e0 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d914      	bls.n	8001522 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10d      	bne.n	8001522 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	f043 0210 	orr.w	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e007      	b.n	8001532 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d0dc      	beq.n	80014ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e059      	b.n	8001822 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_DMA_Init+0xd4>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d80f      	bhi.n	800179a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_DMA_Init+0xd8>)
 8001782:	4413      	add	r3, r2
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <HAL_DMA_Init+0xdc>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_DMA_Init+0xe0>)
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
 8001798:	e00e      	b.n	80017b8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_DMA_Init+0xe4>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_DMA_Init+0xdc>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <HAL_DMA_Init+0xe8>)
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40020407 	.word	0x40020407
 8001830:	bffdfff8 	.word	0xbffdfff8
 8001834:	cccccccd 	.word	0xcccccccd
 8001838:	40020000 	.word	0x40020000
 800183c:	bffdfbf8 	.word	0xbffdfbf8
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d008      	beq.n	800186e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2204      	movs	r2, #4
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e020      	b.n	80018b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 020e 	bic.w	r2, r2, #14
 800187c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d005      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e0d6      	b.n	8001a8e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020e 	bic.w	r2, r2, #14
 80018ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_DMA_Abort_IT+0x1dc>)
 8001908:	429a      	cmp	r2, r3
 800190a:	d958      	bls.n	80019be <HAL_DMA_Abort_IT+0x102>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a62      	ldr	r2, [pc, #392]	; (8001a9c <HAL_DMA_Abort_IT+0x1e0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d04f      	beq.n	80019b6 <HAL_DMA_Abort_IT+0xfa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a61      	ldr	r2, [pc, #388]	; (8001aa0 <HAL_DMA_Abort_IT+0x1e4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d048      	beq.n	80019b2 <HAL_DMA_Abort_IT+0xf6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a5f      	ldr	r2, [pc, #380]	; (8001aa4 <HAL_DMA_Abort_IT+0x1e8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d040      	beq.n	80019ac <HAL_DMA_Abort_IT+0xf0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_DMA_Abort_IT+0x1ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d038      	beq.n	80019a6 <HAL_DMA_Abort_IT+0xea>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_DMA_Abort_IT+0x1f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d030      	beq.n	80019a0 <HAL_DMA_Abort_IT+0xe4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_DMA_Abort_IT+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d028      	beq.n	800199a <HAL_DMA_Abort_IT+0xde>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <HAL_DMA_Abort_IT+0x1dc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d020      	beq.n	8001994 <HAL_DMA_Abort_IT+0xd8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_DMA_Abort_IT+0x1f8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d019      	beq.n	8001990 <HAL_DMA_Abort_IT+0xd4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a55      	ldr	r2, [pc, #340]	; (8001ab8 <HAL_DMA_Abort_IT+0x1fc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d012      	beq.n	800198c <HAL_DMA_Abort_IT+0xd0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_DMA_Abort_IT+0x200>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00a      	beq.n	8001986 <HAL_DMA_Abort_IT+0xca>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_DMA_Abort_IT+0x204>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d102      	bne.n	8001980 <HAL_DMA_Abort_IT+0xc4>
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	e01b      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	e018      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 8001986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198a:	e015      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 800198c:	2310      	movs	r3, #16
 800198e:	e013      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 8001990:	2301      	movs	r3, #1
 8001992:	e011      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 8001994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001998:	e00e      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 800199a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800199e:	e00b      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 80019a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a4:	e008      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	e005      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	e002      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 80019b2:	2310      	movs	r3, #16
 80019b4:	e000      	b.n	80019b8 <HAL_DMA_Abort_IT+0xfc>
 80019b6:	2301      	movs	r3, #1
 80019b8:	4a42      	ldr	r2, [pc, #264]	; (8001ac4 <HAL_DMA_Abort_IT+0x208>)
 80019ba:	6053      	str	r3, [r2, #4]
 80019bc:	e057      	b.n	8001a6e <HAL_DMA_Abort_IT+0x1b2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <HAL_DMA_Abort_IT+0x1e0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04f      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x1ac>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <HAL_DMA_Abort_IT+0x1e4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d048      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x1a8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <HAL_DMA_Abort_IT+0x1e8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d040      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x1a2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_DMA_Abort_IT+0x1ec>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d038      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x19c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_DMA_Abort_IT+0x1f0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d030      	beq.n	8001a52 <HAL_DMA_Abort_IT+0x196>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_DMA_Abort_IT+0x1f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d028      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x190>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_DMA_Abort_IT+0x1dc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d020      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x18a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <HAL_DMA_Abort_IT+0x1f8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x186>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_DMA_Abort_IT+0x1fc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_Abort_IT+0x182>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_DMA_Abort_IT+0x200>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00a      	beq.n	8001a38 <HAL_DMA_Abort_IT+0x17c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_DMA_Abort_IT+0x204>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <HAL_DMA_Abort_IT+0x176>
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	e01b      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a36:	e018      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	e015      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a3e:	2310      	movs	r3, #16
 8001a40:	e013      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e011      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a4a:	e00e      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a50:	e00b      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a56:	e008      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	e005      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	e002      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a64:	2310      	movs	r3, #16
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_Abort_IT+0x1ae>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_DMA_Abort_IT+0x20c>)
 8001a6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
    } 
  }
  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40020080 	.word	0x40020080
 8001a9c:	40020008 	.word	0x40020008
 8001aa0:	4002001c 	.word	0x4002001c
 8001aa4:	40020030 	.word	0x40020030
 8001aa8:	40020044 	.word	0x40020044
 8001aac:	40020058 	.word	0x40020058
 8001ab0:	4002006c 	.word	0x4002006c
 8001ab4:	40020408 	.word	0x40020408
 8001ab8:	4002041c 	.word	0x4002041c
 8001abc:	40020430 	.word	0x40020430
 8001ac0:	40020444 	.word	0x40020444
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40020000 	.word	0x40020000

08001acc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2204      	movs	r2, #4
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80f1 	beq.w	8001cd8 <HAL_DMA_IRQHandler+0x20c>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80eb 	beq.w	8001cd8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0204 	bic.w	r2, r2, #4
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d958      	bls.n	8001bde <HAL_DMA_IRQHandler+0x112>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d04f      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x10a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_DMA_IRQHandler+0x1e0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d048      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x106>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d040      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x100>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d038      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0xfa>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d030      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xf4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <HAL_DMA_IRQHandler+0x1f0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d028      	beq.n	8001bba <HAL_DMA_IRQHandler+0xee>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d020      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xe8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d019      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xe4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d012      	beq.n	8001bac <HAL_DMA_IRQHandler+0xe0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xda>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_DMA_IRQHandler+0x200>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d102      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0xd4>
 8001b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b9e:	e01b      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001ba0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ba4:	e018      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	e015      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bac:	2340      	movs	r3, #64	; 0x40
 8001bae:	e013      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e011      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bb8:	e00e      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbe:	e00b      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bc4:	e008      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bca:	e005      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd0:	e002      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bd2:	2340      	movs	r3, #64	; 0x40
 8001bd4:	e000      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x10c>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <HAL_DMA_IRQHandler+0x204>)
 8001bda:	6053      	str	r3, [r2, #4]
 8001bdc:	e057      	b.n	8001c8e <HAL_DMA_IRQHandler+0x1c2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04f      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x1bc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_DMA_IRQHandler+0x1e0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d048      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x1b8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2e      	ldr	r2, [pc, #184]	; (8001cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d040      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x1b2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d038      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x1ac>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d030      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x1a6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <HAL_DMA_IRQHandler+0x1f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d028      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x1a0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d020      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x19a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x196>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x192>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x18c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_DMA_IRQHandler+0x200>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x186>
 8001c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c50:	e01b      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c56:	e018      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5c:	e015      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c5e:	2340      	movs	r3, #64	; 0x40
 8001c60:	e013      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e011      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c6a:	e00e      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c70:	e00b      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c76:	e008      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7c:	e005      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	e002      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x1be>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_DMA_IRQHandler+0x208>)
 8001c8c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8136 	beq.w	8001f04 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca0:	e130      	b.n	8001f04 <HAL_DMA_IRQHandler+0x438>
 8001ca2:	bf00      	nop
 8001ca4:	40020080 	.word	0x40020080
 8001ca8:	40020008 	.word	0x40020008
 8001cac:	4002001c 	.word	0x4002001c
 8001cb0:	40020030 	.word	0x40020030
 8001cb4:	40020044 	.word	0x40020044
 8001cb8:	40020058 	.word	0x40020058
 8001cbc:	4002006c 	.word	0x4002006c
 8001cc0:	40020408 	.word	0x40020408
 8001cc4:	4002041c 	.word	0x4002041c
 8001cc8:	40020430 	.word	0x40020430
 8001ccc:	40020444 	.word	0x40020444
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2202      	movs	r2, #2
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80dd 	beq.w	8001ea4 <HAL_DMA_IRQHandler+0x3d8>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80d7 	beq.w	8001ea4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020a 	bic.w	r2, r2, #10
 8001d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_DMA_IRQHandler+0x444>)
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d958      	bls.n	8001dda <HAL_DMA_IRQHandler+0x30e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_DMA_IRQHandler+0x448>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04f      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x306>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a78      	ldr	r2, [pc, #480]	; (8001f18 <HAL_DMA_IRQHandler+0x44c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d048      	beq.n	8001dce <HAL_DMA_IRQHandler+0x302>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a76      	ldr	r2, [pc, #472]	; (8001f1c <HAL_DMA_IRQHandler+0x450>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x2fc>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a75      	ldr	r2, [pc, #468]	; (8001f20 <HAL_DMA_IRQHandler+0x454>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d038      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x2f6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a73      	ldr	r2, [pc, #460]	; (8001f24 <HAL_DMA_IRQHandler+0x458>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d030      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x2f0>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_DMA_IRQHandler+0x45c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d028      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x2ea>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_DMA_IRQHandler+0x444>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d020      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2e4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_DMA_IRQHandler+0x460>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d019      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2e0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_DMA_IRQHandler+0x464>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d012      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x2dc>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6b      	ldr	r2, [pc, #428]	; (8001f34 <HAL_DMA_IRQHandler+0x468>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00a      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x2d6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_DMA_IRQHandler+0x46c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d102      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x2d0>
 8001d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9a:	e01b      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da0:	e018      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da6:	e015      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001da8:	2320      	movs	r3, #32
 8001daa:	e013      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e011      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db4:	e00e      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dba:	e00b      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	e008      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc6:	e005      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dcc:	e002      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x308>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	4a59      	ldr	r2, [pc, #356]	; (8001f3c <HAL_DMA_IRQHandler+0x470>)
 8001dd6:	6053      	str	r3, [r2, #4]
 8001dd8:	e057      	b.n	8001e8a <HAL_DMA_IRQHandler+0x3be>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <HAL_DMA_IRQHandler+0x448>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04f      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x3b8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_DMA_IRQHandler+0x44c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d048      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x3b4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_DMA_IRQHandler+0x450>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d040      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x3ae>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_DMA_IRQHandler+0x454>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d038      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x3a8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_DMA_IRQHandler+0x458>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d030      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x3a2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_DMA_IRQHandler+0x45c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d028      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x39c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <HAL_DMA_IRQHandler+0x444>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d020      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x396>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <HAL_DMA_IRQHandler+0x460>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x392>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <HAL_DMA_IRQHandler+0x464>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d012      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x38e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3e      	ldr	r2, [pc, #248]	; (8001f34 <HAL_DMA_IRQHandler+0x468>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00a      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x388>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3d      	ldr	r2, [pc, #244]	; (8001f38 <HAL_DMA_IRQHandler+0x46c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d102      	bne.n	8001e4e <HAL_DMA_IRQHandler+0x382>
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	e01b      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e52:	e018      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e58:	e015      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e013      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e011      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	e00e      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e6c:	e00b      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e72:	e008      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e78:	e005      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7e:	e002      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e80:	2320      	movs	r3, #32
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_IRQHandler+0x3ba>
 8001e84:	2302      	movs	r3, #2
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_DMA_IRQHandler+0x474>)
 8001e88:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d034      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ea2:	e02f      	b.n	8001f04 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d028      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x43a>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d023      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020e 	bic.w	r2, r2, #14
 8001ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
    }
  }
  return;
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
}
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40020080 	.word	0x40020080
 8001f14:	40020008 	.word	0x40020008
 8001f18:	4002001c 	.word	0x4002001c
 8001f1c:	40020030 	.word	0x40020030
 8001f20:	40020044 	.word	0x40020044
 8001f24:	40020058 	.word	0x40020058
 8001f28:	4002006c 	.word	0x4002006c
 8001f2c:	40020408 	.word	0x40020408
 8001f30:	4002041c 	.word	0x4002041c
 8001f34:	40020430 	.word	0x40020430
 8001f38:	40020444 	.word	0x40020444
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e179      	b.n	800224c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8168 	bne.w	8002246 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a96      	ldr	r2, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x290>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d05e      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f80:	4a94      	ldr	r2, [pc, #592]	; (80021d4 <HAL_GPIO_Init+0x290>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d875      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f86:	4a94      	ldr	r2, [pc, #592]	; (80021d8 <HAL_GPIO_Init+0x294>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d058      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f8c:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_GPIO_Init+0x294>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d86f      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f92:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_GPIO_Init+0x298>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d052      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f98:	4a90      	ldr	r2, [pc, #576]	; (80021dc <HAL_GPIO_Init+0x298>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d869      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f9e:	4a90      	ldr	r2, [pc, #576]	; (80021e0 <HAL_GPIO_Init+0x29c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04c      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fa4:	4a8e      	ldr	r2, [pc, #568]	; (80021e0 <HAL_GPIO_Init+0x29c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d863      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001faa:	4a8e      	ldr	r2, [pc, #568]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d046      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a8c      	ldr	r2, [pc, #560]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d85d      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d82a      	bhi.n	8002010 <HAL_GPIO_Init+0xcc>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d859      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_GPIO_Init+0x80>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	0800206d 	.word	0x0800206d
 8001fd4:	08002073 	.word	0x08002073
 8001fd8:	08002073 	.word	0x08002073
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	08002073 	.word	0x08002073
 8001fe4:	08002073 	.word	0x08002073
 8001fe8:	08002073 	.word	0x08002073
 8001fec:	08002073 	.word	0x08002073
 8001ff0:	08002073 	.word	0x08002073
 8001ff4:	08002073 	.word	0x08002073
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002073 	.word	0x08002073
 8002000:	08002073 	.word	0x08002073
 8002004:	08002073 	.word	0x08002073
 8002008:	08002021 	.word	0x08002021
 800200c:	08002035 	.word	0x08002035
 8002010:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <HAL_GPIO_Init+0x2a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e029      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e024      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01f      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e01a      	b.n	8002074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e013      	b.n	8002074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e009      	b.n	8002074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e003      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x130>
          break;
 8002072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d801      	bhi.n	800207e <HAL_GPIO_Init+0x13a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_Init+0x13e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d802      	bhi.n	8002090 <HAL_GPIO_Init+0x14c>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x152>
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3b08      	subs	r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80c1 	beq.w	8002246 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020dc:	4a44      	ldr	r2, [pc, #272]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3c      	ldr	r2, [pc, #240]	; (80021f4 <HAL_GPIO_Init+0x2b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01f      	beq.n	8002148 <HAL_GPIO_Init+0x204>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_GPIO_Init+0x2b4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d019      	beq.n	8002144 <HAL_GPIO_Init+0x200>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_GPIO_Init+0x1fc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a39      	ldr	r2, [pc, #228]	; (8002200 <HAL_GPIO_Init+0x2bc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00d      	beq.n	800213c <HAL_GPIO_Init+0x1f8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x2c0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <HAL_GPIO_Init+0x1f4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <HAL_GPIO_Init+0x2c4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_GPIO_Init+0x1f0>
 8002130:	2305      	movs	r3, #5
 8002132:	e00a      	b.n	800214a <HAL_GPIO_Init+0x206>
 8002134:	2306      	movs	r3, #6
 8002136:	e008      	b.n	800214a <HAL_GPIO_Init+0x206>
 8002138:	2304      	movs	r3, #4
 800213a:	e006      	b.n	800214a <HAL_GPIO_Init+0x206>
 800213c:	2303      	movs	r3, #3
 800213e:	e004      	b.n	800214a <HAL_GPIO_Init+0x206>
 8002140:	2302      	movs	r3, #2
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x206>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_GPIO_Init+0x206>
 8002148:	2300      	movs	r3, #0
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	f002 0203 	and.w	r2, r2, #3
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	4093      	lsls	r3, r2
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800215a:	4925      	ldr	r1, [pc, #148]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4924      	ldr	r1, [pc, #144]	; (800220c <HAL_GPIO_Init+0x2c8>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	4920      	ldr	r1, [pc, #128]	; (800220c <HAL_GPIO_Init+0x2c8>)
 800218c:	4013      	ands	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_GPIO_Init+0x2c8>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4916      	ldr	r1, [pc, #88]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d025      	beq.n	8002210 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4910      	ldr	r1, [pc, #64]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	e025      	b.n	800221e <HAL_GPIO_Init+0x2da>
 80021d2:	bf00      	nop
 80021d4:	10320000 	.word	0x10320000
 80021d8:	10310000 	.word	0x10310000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	10210000 	.word	0x10210000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	40011800 	.word	0x40011800
 8002208:	40011c00 	.word	0x40011c00
 800220c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_GPIO_Init+0x324>)
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	43db      	mvns	r3, r3
 8002218:	4913      	ldr	r1, [pc, #76]	; (8002268 <HAL_GPIO_Init+0x324>)
 800221a:	4013      	ands	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_GPIO_Init+0x324>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <HAL_GPIO_Init+0x324>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_GPIO_Init+0x324>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <HAL_GPIO_Init+0x324>)
 8002242:	4013      	ands	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f ae7e 	bne.w	8001f58 <HAL_GPIO_Init+0x14>
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	372c      	adds	r7, #44	; 0x2c
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e12b      	b.n	8002506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fc66 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002300:	f000 fcda 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a81      	ldr	r2, [pc, #516]	; (8002510 <HAL_I2C_Init+0x274>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d807      	bhi.n	8002320 <HAL_I2C_Init+0x84>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a80      	ldr	r2, [pc, #512]	; (8002514 <HAL_I2C_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e006      	b.n	800232e <HAL_I2C_Init+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a7d      	ldr	r2, [pc, #500]	; (8002518 <HAL_I2C_Init+0x27c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0e7      	b.n	8002506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a78      	ldr	r2, [pc, #480]	; (800251c <HAL_I2C_Init+0x280>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a6a      	ldr	r2, [pc, #424]	; (8002510 <HAL_I2C_Init+0x274>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d802      	bhi.n	8002370 <HAL_I2C_Init+0xd4>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	e009      	b.n	8002384 <HAL_I2C_Init+0xe8>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_I2C_Init+0x284>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	495c      	ldr	r1, [pc, #368]	; (8002510 <HAL_I2C_Init+0x274>)
 80023a0:	428b      	cmp	r3, r1
 80023a2:	d819      	bhi.n	80023d8 <HAL_I2C_Init+0x13c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e59      	subs	r1, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023b8:	400b      	ands	r3, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_I2C_Init+0x138>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e59      	subs	r1, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	e051      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e04f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_I2C_Init+0x168>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e012      	b.n	800242a <HAL_I2C_Init+0x18e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	0099      	lsls	r1, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x196>
 800242e:	2301      	movs	r3, #1
 8002430:	e022      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10e      	bne.n	8002458 <HAL_I2C_Init+0x1bc>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1e58      	subs	r0, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	fbb0 f3f3 	udiv	r3, r0, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	e00f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e58      	subs	r0, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	0099      	lsls	r1, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	fbb0 f3f3 	udiv	r3, r0, r3
 800246e:	3301      	adds	r3, #1
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6809      	ldr	r1, [r1, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6911      	ldr	r1, [r2, #16]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d2      	ldr	r2, [r2, #12]
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	000186a0 	.word	0x000186a0
 8002514:	001e847f 	.word	0x001e847f
 8002518:	003d08ff 	.word	0x003d08ff
 800251c:	431bde83 	.word	0x431bde83
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e272      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8087 	beq.w	8002652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002544:	4b92      	ldr	r3, [pc, #584]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b04      	cmp	r3, #4
 800254e:	d00c      	beq.n	800256a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002550:	4b8f      	ldr	r3, [pc, #572]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d112      	bne.n	8002582 <HAL_RCC_OscConfig+0x5e>
 800255c:	4b8c      	ldr	r3, [pc, #560]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d10b      	bne.n	8002582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	4b89      	ldr	r3, [pc, #548]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d06c      	beq.n	8002650 <HAL_RCC_OscConfig+0x12c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d168      	bne.n	8002650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e24c      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x76>
 800258c:	4b80      	ldr	r3, [pc, #512]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a7f      	ldr	r2, [pc, #508]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e02e      	b.n	80025f8 <HAL_RCC_OscConfig+0xd4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x98>
 80025a2:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7a      	ldr	r2, [pc, #488]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b78      	ldr	r3, [pc, #480]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a77      	ldr	r2, [pc, #476]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e01d      	b.n	80025f8 <HAL_RCC_OscConfig+0xd4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0xbc>
 80025c6:	4b72      	ldr	r3, [pc, #456]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a71      	ldr	r2, [pc, #452]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6e      	ldr	r2, [pc, #440]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0xd4>
 80025e0:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a67      	ldr	r2, [pc, #412]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fd6e 	bl	80010e0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fd6a 	bl	80010e0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e200      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0xe4>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fd5a 	bl	80010e0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fd56 	bl	80010e0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1ec      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x10c>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265e:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800266a:	4b49      	ldr	r3, [pc, #292]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x18c>
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x176>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1c0      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4939      	ldr	r1, [pc, #228]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	e03a      	b.n	8002726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe fd0f 	bl	80010e0 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe fd0b 	bl	80010e0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1a1      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4927      	ldr	r1, [pc, #156]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_RCC_OscConfig+0x270>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fcee 	bl	80010e0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fcea 	bl	80010e0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e180      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d03a      	beq.n	80027a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d019      	beq.n	800276e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fcce 	bl	80010e0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fcca 	bl	80010e0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e160      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <HAL_RCC_OscConfig+0x26c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002766:	2001      	movs	r0, #1
 8002768:	f000 face 	bl	8002d08 <RCC_Delay>
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fcb4 	bl	80010e0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277a:	e00f      	b.n	800279c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fcb0 	bl	80010e0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d908      	bls.n	800279c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e146      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	42420000 	.word	0x42420000
 8002798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e9      	bne.n	800277c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a6 	beq.w	8002902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b8b      	ldr	r3, [pc, #556]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a87      	ldr	r2, [pc, #540]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b82      	ldr	r3, [pc, #520]	; (80029ec <HAL_RCC_OscConfig+0x4c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x4c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7e      	ldr	r2, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x4c8>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fc71 	bl	80010e0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fc6d 	bl	80010e0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e103      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x4c8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x312>
 8002828:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	e02d      	b.n	8002892 <HAL_RCC_OscConfig+0x36e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x334>
 800283e:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a66      	ldr	r2, [pc, #408]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	e01c      	b.n	8002892 <HAL_RCC_OscConfig+0x36e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d10c      	bne.n	800287a <HAL_RCC_OscConfig+0x356>
 8002860:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a60      	ldr	r2, [pc, #384]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4a5d      	ldr	r2, [pc, #372]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6213      	str	r3, [r2, #32]
 8002878:	e00b      	b.n	8002892 <HAL_RCC_OscConfig+0x36e>
 800287a:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a5a      	ldr	r2, [pc, #360]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	4b58      	ldr	r3, [pc, #352]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a57      	ldr	r2, [pc, #348]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d015      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe fc21 	bl	80010e0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fc1d 	bl	80010e0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0b1      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ee      	beq.n	80028a2 <HAL_RCC_OscConfig+0x37e>
 80028c4:	e014      	b.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fc0b 	bl	80010e0 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fc07 	bl	80010e0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e09b      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ee      	bne.n	80028ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d105      	bne.n	8002902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8087 	beq.w	8002a1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d061      	beq.n	80029dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d146      	bne.n	80029ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fbdb 	bl	80010e0 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe fbd7 	bl	80010e0 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e06d      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d108      	bne.n	8002968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4921      	ldr	r1, [pc, #132]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a19      	ldr	r1, [r3, #32]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	430b      	orrs	r3, r1
 800297a:	491b      	ldr	r1, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe fbab 	bl	80010e0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fba7 	bl	80010e0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e03d      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x46a>
 80029ac:	e035      	b.n	8002a1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_RCC_OscConfig+0x4cc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fb94 	bl	80010e0 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fb90 	bl	80010e0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e026      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x498>
 80029da:	e01e      	b.n	8002a1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e019      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x500>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d0      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4965      	ldr	r1, [pc, #404]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b8      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d040      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e073      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fae2 	bl	80010e0 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe fade 	bl	80010e0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e053      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d210      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	4922      	ldr	r1, [pc, #136]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bb6:	f000 f821 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fa40 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080045e4 	.word	0x080045e4
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e027      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	e027      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0c5b      	lsrs	r3, r3, #17
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	fb03 f202 	mul.w	r2, r3, r2
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	613b      	str	r3, [r7, #16]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7e:	613b      	str	r3, [r7, #16]
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	693b      	ldr	r3, [r7, #16]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	080045fc 	.word	0x080045fc
 8002c9c:	0800460c 	.word	0x0800460c
 8002ca0:	003d0900 	.word	0x003d0900

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cbc:	f7ff fff2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	080045f4 	.word	0x080045f4

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ce4:	f7ff ffde 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0adb      	lsrs	r3, r3, #11
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	080045f4 	.word	0x080045f4

08002d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <RCC_Delay+0x34>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <RCC_Delay+0x38>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d24:	bf00      	nop
  }
  while (Delay --);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e5a      	subs	r2, r3, #1
 8002d2a:	60fa      	str	r2, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f9      	bne.n	8002d24 <RCC_Delay+0x1c>
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	10624dd3 	.word	0x10624dd3

08002d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d07d      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d64:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
 8002d7c:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d118      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d98:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7fe f99c 	bl	80010e0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	e008      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fe f998 	bl	80010e0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e06d      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02e      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d027      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df2:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dfe:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe f967 	bl	80010e0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe f963 	bl	80010e0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e036      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ee      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42420440 	.word	0x42420440

08002eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e076      	b.n	8002fb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed2:	d009      	beq.n	8002ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
 8002eda:	e005      	b.n	8002ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fe86 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	ea42 0103 	orr.w	r1, r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	0c1a      	lsrs	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f002 0204 	and.w	r2, r2, #4
 8002f8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e041      	b.n	800304e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fe62 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 fa10 	bl	800341c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e041      	b.n	80030ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f839 	bl	80030f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 f9c1 	bl	800341c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
	...

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ae      	b.n	8003284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	f200 809f 	bhi.w	8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003171 	.word	0x08003171
 8003140:	08003275 	.word	0x08003275
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	080031b1 	.word	0x080031b1
 8003150:	08003275 	.word	0x08003275
 8003154:	08003275 	.word	0x08003275
 8003158:	08003275 	.word	0x08003275
 800315c:	080031f3 	.word	0x080031f3
 8003160:	08003275 	.word	0x08003275
 8003164:	08003275 	.word	0x08003275
 8003168:	08003275 	.word	0x08003275
 800316c:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f9ca 	bl	8003510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
      break;
 80031ae:	e064      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa1a 	bl	80035f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      break;
 80031f0:	e043      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa6d 	bl	80036d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0208 	orr.w	r2, r2, #8
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0204 	bic.w	r2, r2, #4
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
      break;
 8003230:	e023      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fac1 	bl	80037c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e002      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e0b4      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x186>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e0:	d03e      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0xd4>
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	f200 8087 	bhi.w	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	f000 8086 	beq.w	80033fe <HAL_TIM_ConfigClockSource+0x172>
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f6:	d87f      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b70      	cmp	r3, #112	; 0x70
 80032fa:	d01a      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xa6>
 80032fc:	2b70      	cmp	r3, #112	; 0x70
 80032fe:	d87b      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b60      	cmp	r3, #96	; 0x60
 8003302:	d050      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003304:	2b60      	cmp	r3, #96	; 0x60
 8003306:	d877      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b50      	cmp	r3, #80	; 0x50
 800330a:	d03c      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0xfa>
 800330c:	2b50      	cmp	r3, #80	; 0x50
 800330e:	d873      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d058      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d86f      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b30      	cmp	r3, #48	; 0x30
 800331a:	d064      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	2b30      	cmp	r3, #48	; 0x30
 800331e:	d86b      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b20      	cmp	r3, #32
 8003322:	d060      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	2b20      	cmp	r3, #32
 8003326:	d867      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05c      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	2b10      	cmp	r3, #16
 800332e:	d05a      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	e062      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003342:	f000 fb08 	bl	8003956 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
      break;
 800335e:	e04f      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003370:	f000 faf1 	bl	8003956 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003382:	609a      	str	r2, [r3, #8]
      break;
 8003384:	e03c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fa68 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2150      	movs	r1, #80	; 0x50
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fabf 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033a4:	e02c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa86 	bl	80038c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2160      	movs	r1, #96	; 0x60
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 faaf 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033c4:	e01c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	461a      	mov	r2, r3
 80033d4:	f000 fa48 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa9f 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033e4:	e00c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f000 fa96 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033f6:	e003      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e000      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a33      	ldr	r2, [pc, #204]	; (80034fc <TIM_Base_SetConfig+0xe0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <TIM_Base_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a2f      	ldr	r2, [pc, #188]	; (8003504 <TIM_Base_SetConfig+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <TIM_Base_SetConfig+0xec>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <TIM_Base_SetConfig+0xf0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a22      	ldr	r2, [pc, #136]	; (80034fc <TIM_Base_SetConfig+0xe0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <TIM_Base_SetConfig+0x82>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a21      	ldr	r2, [pc, #132]	; (8003500 <TIM_Base_SetConfig+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <TIM_Base_SetConfig+0x82>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d00b      	beq.n	800349e <TIM_Base_SetConfig+0x82>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <TIM_Base_SetConfig+0xe8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_Base_SetConfig+0x82>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <TIM_Base_SetConfig+0xec>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_Base_SetConfig+0x82>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <TIM_Base_SetConfig+0xf0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d108      	bne.n	80034b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <TIM_Base_SetConfig+0xe0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <TIM_Base_SetConfig+0xe4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40013400 	.word	0x40013400
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00

08003510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0201 	bic.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0302 	bic.w	r3, r3, #2
 8003558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <TIM_OC1_SetConfig+0xd8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_OC1_SetConfig+0x64>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <TIM_OC1_SetConfig+0xdc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10c      	bne.n	800358e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0308 	bic.w	r3, r3, #8
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <TIM_OC1_SetConfig+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_OC1_SetConfig+0x8e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <TIM_OC1_SetConfig+0xdc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d111      	bne.n	80035c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40013400 	.word	0x40013400

080035f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0210 	bic.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0320 	bic.w	r3, r3, #32
 800363a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <TIM_OC2_SetConfig+0xe0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC2_SetConfig+0x68>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <TIM_OC2_SetConfig+0xe4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10d      	bne.n	8003674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <TIM_OC2_SetConfig+0xe0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0x94>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <TIM_OC2_SetConfig+0xe4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d113      	bne.n	80036ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40013400 	.word	0x40013400

080036d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <TIM_OC3_SetConfig+0xe0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC3_SetConfig+0x66>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <TIM_OC3_SetConfig+0xe4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10d      	bne.n	800375a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <TIM_OC3_SetConfig+0xe0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_OC3_SetConfig+0x92>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <TIM_OC3_SetConfig+0xe4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d113      	bne.n	8003792 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400

080037c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a11      	ldr	r2, [pc, #68]	; (8003860 <TIM_OC4_SetConfig+0xa0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_OC4_SetConfig+0x68>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <TIM_OC4_SetConfig+0xa4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d109      	bne.n	800383c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40013400 	.word	0x40013400

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0210 	bic.w	r2, r3, #16
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	031b      	lsls	r3, r3, #12
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	f043 0307 	orr.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b087      	sub	sp, #28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	021a      	lsls	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	431a      	orrs	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	609a      	str	r2, [r3, #8]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e050      	b.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10c      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40013400 	.word	0x40013400
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00

08003a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e03d      	b.n	8003b04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e042      	b.n	8003ba6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd f975 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2224      	movs	r2, #36	; 0x24
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fc80 	bl	8004458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0ba      	sub	sp, #232	; 0xe8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb63 	bl	80042da <UART_Receive_IT>
      return;
 8003c14:	e25b      	b.n	80040ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80de 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
 8003c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80d1 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
 8003c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 81f2 	beq.w	80040c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 faee 	bl	80042da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_UART_IRQHandler+0x17a>
 8003d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04f      	beq.n	8003dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9f8 	bl	8004120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d041      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1d9      	bne.n	8003d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d013      	beq.n	8003dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	4a7e      	ldr	r2, [pc, #504]	; (8003f90 <HAL_UART_IRQHandler+0x3e0>)
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fd8c 	bl	80018bc <HAL_DMA_Abort_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003db4:	4610      	mov	r0, r2
 8003db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00e      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f99c 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00a      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f998 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e006      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f994 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003dd6:	e175      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	bf00      	nop
    return;
 8003dda:	e173      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 814f 	bne.w	8004084 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8148 	beq.w	8004084 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8141 	beq.w	8004084 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80b6 	beq.w	8003f94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8145 	beq.w	80040c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f080 813e 	bcs.w	80040c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f000 8088 	beq.w	8003f70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1d9      	bne.n	8003e60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ed0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e1      	bne.n	8003eac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3314      	adds	r3, #20
 8003eee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e3      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f40:	f023 0310 	bic.w	r3, r3, #16
 8003f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd fc6a 	bl	8001844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8bf 	bl	800410a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f8c:	e09c      	b.n	80040c8 <HAL_UART_IRQHandler+0x518>
 8003f8e:	bf00      	nop
 8003f90:	080041e5 	.word	0x080041e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 808e 	beq.w	80040cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8089 	beq.w	80040cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fde:	647a      	str	r2, [r7, #68]	; 0x44
 8003fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e3      	bne.n	8003fba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	623b      	str	r3, [r7, #32]
   return(result);
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004016:	633a      	str	r2, [r7, #48]	; 0x30
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e3      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60fb      	str	r3, [r7, #12]
   return(result);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0310 	bic.w	r3, r3, #16
 800404e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800405c:	61fa      	str	r2, [r7, #28]
 800405e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	617b      	str	r3, [r7, #20]
   return(result);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f844 	bl	800410a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004082:	e023      	b.n	80040cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_UART_IRQHandler+0x4f4>
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8b5 	bl	800420c <UART_Transmit_IT>
    return;
 80040a2:	e014      	b.n	80040ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <HAL_UART_IRQHandler+0x51e>
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8f4 	bl	80042aa <UART_EndTransmit_IT>
    return;
 80040c2:	e004      	b.n	80040ce <HAL_UART_IRQHandler+0x51e>
    return;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_UART_IRQHandler+0x51e>
      return;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_UART_IRQHandler+0x51e>
      return;
 80040cc:	bf00      	nop
  }
}
 80040ce:	37e8      	adds	r7, #232	; 0xe8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b095      	sub	sp, #84	; 0x54
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800413e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004148:	643a      	str	r2, [r7, #64]	; 0x40
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800414e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	61fb      	str	r3, [r7, #28]
   return(result);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	64bb      	str	r3, [r7, #72]	; 0x48
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800417c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d119      	bne.n	80041cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0310 	bic.w	r3, r3, #16
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b8:	61ba      	str	r2, [r7, #24]
 80041ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6979      	ldr	r1, [r7, #20]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	613b      	str	r3, [r7, #16]
   return(result);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041da:	bf00      	nop
 80041dc:	3754      	adds	r7, #84	; 0x54
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff ff7a 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b21      	cmp	r3, #33	; 0x21
 800421e:	d13e      	bne.n	800429e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d114      	bne.n	8004254 <UART_Transmit_IT+0x48>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d110      	bne.n	8004254 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004246:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	1c9a      	adds	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]
 8004252:	e008      	b.n	8004266 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6211      	str	r1, [r2, #32]
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4619      	mov	r1, r3
 8004274:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004288:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004298:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff02 	bl	80040d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08c      	sub	sp, #48	; 0x30
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b22      	cmp	r3, #34	; 0x22
 80042ec:	f040 80ae 	bne.w	800444c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d117      	bne.n	800432a <UART_Receive_IT+0x50>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004318:	b29a      	uxth	r2, r3
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
 8004328:	e026      	b.n	8004378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d007      	beq.n	800434e <UART_Receive_IT+0x74>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <UART_Receive_IT+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e008      	b.n	800436e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004368:	b2da      	uxtb	r2, r3
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4619      	mov	r1, r3
 8004386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004388:	2b00      	cmp	r3, #0
 800438a:	d15d      	bne.n	8004448 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0220 	bic.w	r2, r2, #32
 800439a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d135      	bne.n	800443e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	613b      	str	r3, [r7, #16]
   return(result);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	623a      	str	r2, [r7, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	61bb      	str	r3, [r7, #24]
   return(result);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fe67 	bl	800410a <HAL_UARTEx_RxEventCallback>
 800443c:	e002      	b.n	8004444 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fe51 	bl	80040e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e002      	b.n	800444e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	; 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004492:	f023 030c 	bic.w	r3, r3, #12
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	430b      	orrs	r3, r1
 800449e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2c      	ldr	r2, [pc, #176]	; (800456c <UART_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d103      	bne.n	80044c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fe fc0e 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	e002      	b.n	80044ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fe fbf6 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 80044cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	4a22      	ldr	r2, [pc, #136]	; (8004570 <UART_SetConfig+0x118>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	0119      	lsls	r1, r3, #4
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f2f3 	udiv	r2, r2, r3
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <UART_SetConfig+0x118>)
 8004506:	fba3 0302 	umull	r0, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2064      	movs	r0, #100	; 0x64
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004524:	4419      	add	r1, r3
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <UART_SetConfig+0x118>)
 800453e:	fba3 0302 	umull	r0, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2064      	movs	r0, #100	; 0x64
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	; 0x32
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f003 020f 	and.w	r2, r3, #15
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	440a      	add	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40013800 	.word	0x40013800
 8004570:	51eb851f 	.word	0x51eb851f

08004574 <memset>:
 8004574:	4603      	mov	r3, r0
 8004576:	4402      	add	r2, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	2600      	movs	r6, #0
 8004588:	4d0c      	ldr	r5, [pc, #48]	; (80045bc <__libc_init_array+0x38>)
 800458a:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458c:	1b64      	subs	r4, r4, r5
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	f000 f81a 	bl	80045cc <_init>
 8004598:	2600      	movs	r6, #0
 800459a:	4d0a      	ldr	r5, [pc, #40]	; (80045c4 <__libc_init_array+0x40>)
 800459c:	4c0a      	ldr	r4, [pc, #40]	; (80045c8 <__libc_init_array+0x44>)
 800459e:	1b64      	subs	r4, r4, r5
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	08004610 	.word	0x08004610
 80045c0:	08004610 	.word	0x08004610
 80045c4:	08004610 	.word	0x08004610
 80045c8:	08004614 	.word	0x08004614

080045cc <_init>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr

080045d8 <_fini>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr
