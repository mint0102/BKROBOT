
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007864  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007a50  08007a50  00017a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af0  08007af0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007af0  08007af0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007af0  08007af0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007af8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000080  08007b78  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08007b78  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150ad  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ec  00000000  00000000  00035199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00038988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbe  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4dd  00000000  00000000  0003ad76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b665  00000000  00000000  00057253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2a9d  00000000  00000000  000728b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056e8  00000000  00000000  00115358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000080 	.word	0x20000080
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a34 	.word	0x08007a34

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000084 	.word	0x20000084
 8000224:	08007a34 	.word	0x08007a34

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <MX_ADC1_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8e:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b90:	f001 ff4e 	bl	8002a30 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 fe37 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bb0:	f002 f828 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fe27 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bcc:	f002 f81a 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 fe19 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000be8:	f002 f80c 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 fe0b 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c04:	f001 fffe 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c0e:	f000 fdfd 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c20:	f001 fff0 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f000 fdef 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	2306      	movs	r3, #6
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c3c:	f001 ffe2 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c46:	f000 fde1 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c58:	f001 ffd4 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c62:	f000 fdd3 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c74:	f001 ffc6 	bl	8002c04 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c7e:	f000 fdc5 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000009c 	.word	0x2000009c
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <HAL_ADC_MspInit+0xe8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d15f      	bne.n	8000d74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfc:	233f      	movs	r3, #63	; 0x3f
 8000cfe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000d0c:	f002 fdb8 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <HAL_ADC_MspInit+0xf4>)
 8000d20:	f002 fdae 	bl	8003880 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d5a:	f002 f99b 	bl	8003094 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000d64:	f000 fd52 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d6c:	621a      	str	r2, [r3, #32]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	200000cc 	.word	0x200000cc
 8000d90:	40020008 	.word	0x40020008

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_DMA_Init+0x38>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <MX_DMA_Init+0x38>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_DMA_Init+0x38>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200b      	movs	r0, #11
 8000db8:	f002 f935 	bl	8003026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f002 f94e 	bl	800305e <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	220a      	movs	r2, #10
 8000dd8:	21aa      	movs	r1, #170	; 0xaa
 8000dda:	480a      	ldr	r0, [pc, #40]	; (8000e04 <gamepad_init+0x34>)
 8000ddc:	f003 fac6 	bl	800436c <HAL_I2C_IsDeviceReady>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <gamepad_init+0x1a>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e009      	b.n	8000dfe <gamepad_init+0x2e>
	is_receiver_connect = 1;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <gamepad_init+0x38>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <gamepad_init+0x3c>)
 8000df8:	f002 fed6 	bl	8003ba8 <HAL_GPIO_WritePin>
	return 1;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000164 	.word	0x20000164
 8000e08:	20000110 	.word	0x20000110
 8000e0c:	40011000 	.word	0x40011000

08000e10 <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 8000e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da02      	bge.n	8000e3c <_read_16+0x2c>
        return (raw - (1 << 16));
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	e001      	b.n	8000e40 <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 8000e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 8000e4a:	b490      	push	{r4, r7}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4604      	mov	r4, r0
 8000e52:	4608      	mov	r0, r1
 8000e54:	4611      	mov	r1, r2
 8000e56:	461a      	mov	r2, r3
 8000e58:	4623      	mov	r3, r4
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	460b      	mov	r3, r1
 8000e62:	717b      	strb	r3, [r7, #5]
 8000e64:	4613      	mov	r3, r2
 8000e66:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	061a      	lsls	r2, r3, #24
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	431a      	orrs	r2, r3
 8000e72:	797b      	ldrb	r3, [r7, #5]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431a      	orrs	r2, r3
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da01      	bge.n	8000e88 <_read_32+0x3e>
        return (raw - (1 << 32));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	e000      	b.n	8000e8a <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 8000e88:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc90      	pop	{r4, r7}
 8000e92:	4770      	bx	lr

08000e94 <_convert_data>:

void _convert_data(){
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <_convert_data+0x164>)
 8000e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e9e:	10db      	asrs	r3, r3, #3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <_convert_data+0x168>)
 8000eac:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 8000eae:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <_convert_data+0x164>)
 8000eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b50      	ldr	r3, [pc, #320]	; (8001000 <_convert_data+0x16c>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <_convert_data+0x164>)
 8000ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec6:	105b      	asrs	r3, r3, #1
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <_convert_data+0x170>)
 8000ed4:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <_convert_data+0x164>)
 8000ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8000edc:	109b      	asrs	r3, r3, #2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b47      	ldr	r3, [pc, #284]	; (8001008 <_convert_data+0x174>)
 8000eea:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <_convert_data+0x178>)
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	121b      	asrs	r3, r3, #8
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b44      	ldr	r3, [pc, #272]	; (8001010 <_convert_data+0x17c>)
 8000f00:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <_convert_data+0x178>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	125b      	asrs	r3, r3, #9
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <_convert_data+0x180>)
 8000f16:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <_convert_data+0x178>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <_convert_data+0x184>)
 8000f28:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <_convert_data+0x178>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <_convert_data+0x188>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <_convert_data+0x178>)
 8000f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f46:	109b      	asrs	r3, r3, #2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <_convert_data+0x18c>)
 8000f54:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <_convert_data+0x178>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	10db      	asrs	r3, r3, #3
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <_convert_data+0x190>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <_convert_data+0x178>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	111b      	asrs	r3, r3, #4
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <_convert_data+0x194>)
 8000f80:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <_convert_data+0x178>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	115b      	asrs	r3, r3, #5
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <_convert_data+0x198>)
 8000f96:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <_convert_data+0x178>)
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	119b      	asrs	r3, r3, #6
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <_convert_data+0x19c>)
 8000fac:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <_convert_data+0x178>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	11db      	asrs	r3, r3, #7
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <_convert_data+0x1a0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_convert_data+0x178>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	105b      	asrs	r3, r3, #1
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <_convert_data+0x1a4>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <_convert_data+0x178>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	109b      	asrs	r3, r3, #2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_convert_data+0x1a8>)
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000136 	.word	0x20000136
 8000ffc:	20000154 	.word	0x20000154
 8001000:	20000155 	.word	0x20000155
 8001004:	20000156 	.word	0x20000156
 8001008:	20000157 	.word	0x20000157
 800100c:	20000150 	.word	0x20000150
 8001010:	20000162 	.word	0x20000162
 8001014:	20000163 	.word	0x20000163
 8001018:	20000158 	.word	0x20000158
 800101c:	20000159 	.word	0x20000159
 8001020:	2000015a 	.word	0x2000015a
 8001024:	2000015b 	.word	0x2000015b
 8001028:	2000015c 	.word	0x2000015c
 800102c:	2000015d 	.word	0x2000015d
 8001030:	2000015e 	.word	0x2000015e
 8001034:	2000015f 	.word	0x2000015f
 8001038:	20000160 	.word	0x20000160
 800103c:	20000161 	.word	0x20000161

08001040 <gamepad_update>:

void gamepad_update(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <gamepad_update+0x120>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8085 	beq.w	800115a <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 8001050:	2332      	movs	r3, #50	; 0x32
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	231e      	movs	r3, #30
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <gamepad_update+0x124>)
 8001058:	21aa      	movs	r1, #170	; 0xaa
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <gamepad_update+0x128>)
 800105c:	f002 ff1a 	bl	8003e94 <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <gamepad_update+0x124>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d103      	bne.n	8001070 <gamepad_update+0x30>
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <gamepad_update+0x12c>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e002      	b.n	8001076 <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <gamepad_update+0x12c>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <gamepad_update+0x12c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d16a      	bne.n	8001154 <gamepad_update+0x114>
		dpad = result[1];
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <gamepad_update+0x124>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	b25a      	sxtb	r2, r3
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <gamepad_update+0x130>)
 8001086:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <gamepad_update+0x124>)
 800108a:	7898      	ldrb	r0, [r3, #2]
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <gamepad_update+0x124>)
 800108e:	78d9      	ldrb	r1, [r3, #3]
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <gamepad_update+0x124>)
 8001092:	791a      	ldrb	r2, [r3, #4]
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <gamepad_update+0x124>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	f7ff fed7 	bl	8000e4a <_read_32>
 800109c:	4603      	mov	r3, r0
 800109e:	4a35      	ldr	r2, [pc, #212]	; (8001174 <gamepad_update+0x134>)
 80010a0:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <gamepad_update+0x124>)
 80010a4:	7998      	ldrb	r0, [r3, #6]
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <gamepad_update+0x124>)
 80010a8:	79d9      	ldrb	r1, [r3, #7]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <gamepad_update+0x124>)
 80010ac:	7a1a      	ldrb	r2, [r3, #8]
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <gamepad_update+0x124>)
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	f7ff feca 	bl	8000e4a <_read_32>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <gamepad_update+0x138>)
 80010ba:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <gamepad_update+0x124>)
 80010be:	7a98      	ldrb	r0, [r3, #10]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <gamepad_update+0x124>)
 80010c2:	7ad9      	ldrb	r1, [r3, #11]
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <gamepad_update+0x124>)
 80010c6:	7b1a      	ldrb	r2, [r3, #12]
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <gamepad_update+0x124>)
 80010ca:	7b5b      	ldrb	r3, [r3, #13]
 80010cc:	f7ff febd 	bl	8000e4a <_read_32>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <gamepad_update+0x13c>)
 80010d4:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <gamepad_update+0x124>)
 80010d8:	7b98      	ldrb	r0, [r3, #14]
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <gamepad_update+0x124>)
 80010dc:	7bd9      	ldrb	r1, [r3, #15]
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <gamepad_update+0x124>)
 80010e0:	7c1a      	ldrb	r2, [r3, #16]
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <gamepad_update+0x124>)
 80010e4:	7c5b      	ldrb	r3, [r3, #17]
 80010e6:	f7ff feb0 	bl	8000e4a <_read_32>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <gamepad_update+0x140>)
 80010ee:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <gamepad_update+0x124>)
 80010f2:	7c98      	ldrb	r0, [r3, #18]
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <gamepad_update+0x124>)
 80010f6:	7cd9      	ldrb	r1, [r3, #19]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <gamepad_update+0x124>)
 80010fa:	7d1a      	ldrb	r2, [r3, #20]
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <gamepad_update+0x124>)
 80010fe:	7d5b      	ldrb	r3, [r3, #21]
 8001100:	f7ff fea3 	bl	8000e4a <_read_32>
 8001104:	4603      	mov	r3, r0
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <gamepad_update+0x144>)
 8001108:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <gamepad_update+0x124>)
 800110c:	7d98      	ldrb	r0, [r3, #22]
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <gamepad_update+0x124>)
 8001110:	7dd9      	ldrb	r1, [r3, #23]
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <gamepad_update+0x124>)
 8001114:	7e1a      	ldrb	r2, [r3, #24]
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <gamepad_update+0x124>)
 8001118:	7e5b      	ldrb	r3, [r3, #25]
 800111a:	f7ff fe96 	bl	8000e4a <_read_32>
 800111e:	4603      	mov	r3, r0
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <gamepad_update+0x148>)
 8001122:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <gamepad_update+0x124>)
 8001126:	7e9b      	ldrb	r3, [r3, #26]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <gamepad_update+0x124>)
 800112a:	7ed2      	ldrb	r2, [r2, #27]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe6e 	bl	8000e10 <_read_16>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <gamepad_update+0x14c>)
 800113a:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <gamepad_update+0x124>)
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <gamepad_update+0x124>)
 8001142:	7f52      	ldrb	r2, [r2, #29]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe62 	bl	8000e10 <_read_16>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <gamepad_update+0x150>)
 8001152:	801a      	strh	r2, [r3, #0]
	}
	_convert_data();
 8001154:	f7ff fe9e 	bl	8000e94 <_convert_data>
 8001158:	e000      	b.n	800115c <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 800115a:	bf00      	nop
}
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000110 	.word	0x20000110
 8001164:	20000118 	.word	0x20000118
 8001168:	20000164 	.word	0x20000164
 800116c:	20000114 	.word	0x20000114
 8001170:	20000136 	.word	0x20000136
 8001174:	20000138 	.word	0x20000138
 8001178:	2000013c 	.word	0x2000013c
 800117c:	20000140 	.word	0x20000140
 8001180:	20000144 	.word	0x20000144
 8001184:	20000148 	.word	0x20000148
 8001188:	2000014c 	.word	0x2000014c
 800118c:	20000150 	.word	0x20000150
 8001190:	20000152 	.word	0x20000152
 8001194:	00000000 	.word	0x00000000

08001198 <gamepad_calculate_leff_joystick>:

int gamepad_calculate_leff_joystick(){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
	if(is_gamepad_connect == 0) return -1;
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <gamepad_calculate_leff_joystick+0x188>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <gamepad_calculate_leff_joystick+0x14>
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e0ae      	b.n	800130a <gamepad_calculate_leff_joystick+0x172>
    int dir = -1;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	60fb      	str	r3, [r7, #12]

    int distance = (int)(sqrt(aLX*aLX + aLY*aLY));
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4959      	ldr	r1, [pc, #356]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 80011c4:	6809      	ldr	r1, [r1, #0]
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f97d 	bl	80004cc <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f006 f8cf 	bl	800737c <sqrt>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc8b 	bl	8000b00 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	607b      	str	r3, [r7, #4]

    if (distance < 15){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0e      	cmp	r3, #14
 80011f2:	dc06      	bgt.n	8001202 <gamepad_calculate_leff_joystick+0x6a>
        distance = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
        dir = -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	60fb      	str	r3, [r7, #12]
        return dir;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e083      	b.n	800130a <gamepad_calculate_leff_joystick+0x172>
    }else if (distance > 100){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	dd01      	ble.n	800120c <gamepad_calculate_leff_joystick+0x74>
    	distance = 100;
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	607b      	str	r3, [r7, #4]
    }

    int angle = (int)(atan2(aLY, aLX) * 180 / 3.14);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f95b 	bl	80004cc <__aeabi_i2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4b42      	ldr	r3, [pc, #264]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f954 	bl	80004cc <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f006 f8a4 	bl	8007378 <atan2>
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <gamepad_calculate_leff_joystick+0x194>)
 8001236:	f7ff f9b3 	bl	80005a0 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	a335      	add	r3, pc, #212	; (adr r3, 8001318 <gamepad_calculate_leff_joystick+0x180>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff fad4 	bl	80007f4 <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc54 	bl	8000b00 <__aeabi_d2iz>
 8001258:	4603      	mov	r3, r0
 800125a:	60bb      	str	r3, [r7, #8]

    if (angle < 0) angle += 360;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da03      	bge.n	800126a <gamepad_calculate_leff_joystick+0xd2>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001268:	60bb      	str	r3, [r7, #8]

    if ((0 <= angle && angle < 10) || angle >= 350)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db02      	blt.n	8001276 <gamepad_calculate_leff_joystick+0xde>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b09      	cmp	r3, #9
 8001274:	dd03      	ble.n	800127e <gamepad_calculate_leff_joystick+0xe6>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800127c:	db02      	blt.n	8001284 <gamepad_calculate_leff_joystick+0xec>
        dir = ROBOT_DIR_R;
 800127e:	2301      	movs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e041      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (15 <= angle && angle < 75)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b0e      	cmp	r3, #14
 8001288:	dd05      	ble.n	8001296 <gamepad_calculate_leff_joystick+0xfe>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b4a      	cmp	r3, #74	; 0x4a
 800128e:	dc02      	bgt.n	8001296 <gamepad_calculate_leff_joystick+0xfe>
        dir = ROBOT_DIR_RF;
 8001290:	2302      	movs	r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e038      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (80 <= angle && angle < 110)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b4f      	cmp	r3, #79	; 0x4f
 800129a:	dd05      	ble.n	80012a8 <gamepad_calculate_leff_joystick+0x110>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b6d      	cmp	r3, #109	; 0x6d
 80012a0:	dc02      	bgt.n	80012a8 <gamepad_calculate_leff_joystick+0x110>
        dir = ROBOT_DIR_FW;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e02f      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (115 <= angle && angle < 165)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b72      	cmp	r3, #114	; 0x72
 80012ac:	dd05      	ble.n	80012ba <gamepad_calculate_leff_joystick+0x122>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2ba4      	cmp	r3, #164	; 0xa4
 80012b2:	dc02      	bgt.n	80012ba <gamepad_calculate_leff_joystick+0x122>
        dir = ROBOT_DIR_LF;
 80012b4:	2304      	movs	r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e026      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (170 <= angle && angle < 190)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2ba9      	cmp	r3, #169	; 0xa9
 80012be:	dd05      	ble.n	80012cc <gamepad_calculate_leff_joystick+0x134>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2bbd      	cmp	r3, #189	; 0xbd
 80012c4:	dc02      	bgt.n	80012cc <gamepad_calculate_leff_joystick+0x134>
        dir = ROBOT_DIR_L;
 80012c6:	230a      	movs	r3, #10
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e01d      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (195 <= angle && angle < 255)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2bc2      	cmp	r3, #194	; 0xc2
 80012d0:	dd05      	ble.n	80012de <gamepad_calculate_leff_joystick+0x146>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2bfe      	cmp	r3, #254	; 0xfe
 80012d6:	dc02      	bgt.n	80012de <gamepad_calculate_leff_joystick+0x146>
        dir = ROBOT_DIR_LB;
 80012d8:	2305      	movs	r3, #5
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e014      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (260 <= angle && angle < 280)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012e4:	db06      	blt.n	80012f4 <gamepad_calculate_leff_joystick+0x15c>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80012ec:	da02      	bge.n	80012f4 <gamepad_calculate_leff_joystick+0x15c>
        dir = ROBOT_DIR_BW;
 80012ee:	2309      	movs	r3, #9
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e009      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (285 <= angle && angle < 345)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80012fa:	dd05      	ble.n	8001308 <gamepad_calculate_leff_joystick+0x170>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8001302:	dc01      	bgt.n	8001308 <gamepad_calculate_leff_joystick+0x170>
        dir = ROBOT_DIR_RB;
 8001304:	2306      	movs	r3, #6
 8001306:	60fb      	str	r3, [r7, #12]
    return dir;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	51eb851f 	.word	0x51eb851f
 800131c:	40091eb8 	.word	0x40091eb8
 8001320:	20000114 	.word	0x20000114
 8001324:	20000138 	.word	0x20000138
 8001328:	2000013c 	.word	0x2000013c
 800132c:	40668000 	.word	0x40668000

08001330 <gamepad_run_tele>:

int sm_pos = 1;
void gamepad_run_tele(){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	int my_dir = -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	607b      	str	r3, [r7, #4]
	my_dir = gamepad_calculate_leff_joystick();
 800133c:	f7ff ff2c 	bl	8001198 <gamepad_calculate_leff_joystick>
 8001340:	6078      	str	r0, [r7, #4]
	if(b) {
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <gamepad_run_tele+0xac>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <gamepad_run_tele+0x22>
		servo_set_angle(SERVO1, 0);
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fc5d 	bl	8001c0c <servo_set_angle>
	}
	if(x){
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <gamepad_run_tele+0xb0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <gamepad_run_tele+0x32>
		servo_set_angle(SERVO1, 45);
 800135a:	212d      	movs	r1, #45	; 0x2d
 800135c:	2000      	movs	r0, #0
 800135e:	f000 fc55 	bl	8001c0c <servo_set_angle>
	}
	if(a){
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <gamepad_run_tele+0xb4>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <gamepad_run_tele+0x50>
		if(sm_pos == 1){
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <gamepad_run_tele+0xb8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d106      	bne.n	8001380 <gamepad_run_tele+0x50>
			sm_pos = 0;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <gamepad_run_tele+0xb8>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
			moveSM(-4);
 8001378:	f06f 0003 	mvn.w	r0, #3
 800137c:	f000 fd50 	bl	8001e20 <moveSM>
		}
	}
	if(y){
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <gamepad_run_tele+0xbc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d009      	beq.n	800139c <gamepad_run_tele+0x6c>
		if(sm_pos == 0){
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <gamepad_run_tele+0xb8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <gamepad_run_tele+0x6c>
			sm_pos = 1;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <gamepad_run_tele+0xb8>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
			moveSM(4);
 8001396:	2004      	movs	r0, #4
 8001398:	f000 fd42 	bl	8001e20 <moveSM>
		}
	}
	if(dpad_up){
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <gamepad_run_tele+0xc0>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <gamepad_run_tele+0x78>
		my_dir = ROBOT_DIR_FW;
 80013a4:	2303      	movs	r3, #3
 80013a6:	607b      	str	r3, [r7, #4]
	}
	if(dpad_down){
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <gamepad_run_tele+0xc4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <gamepad_run_tele+0x84>
		my_dir = ROBOT_DIR_BW;
 80013b0:	2309      	movs	r3, #9
 80013b2:	607b      	str	r3, [r7, #4]
	}
	if(dpad_left){
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <gamepad_run_tele+0xc8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <gamepad_run_tele+0x90>
		my_dir = ROBOT_DIR_L;
 80013bc:	230a      	movs	r3, #10
 80013be:	607b      	str	r3, [r7, #4]
	}
	if(dpad_right){
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <gamepad_run_tele+0xcc>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <gamepad_run_tele+0x9c>
		my_dir = ROBOT_DIR_R;
 80013c8:	2301      	movs	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
	}
	runDir(my_dir);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fbc3 	bl	8001b58 <runDir>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000159 	.word	0x20000159
 80013e0:	2000015a 	.word	0x2000015a
 80013e4:	20000158 	.word	0x20000158
 80013e8:	20000000 	.word	0x20000000
 80013ec:	2000015b 	.word	0x2000015b
 80013f0:	20000155 	.word	0x20000155
 80013f4:	20000156 	.word	0x20000156
 80013f8:	20000154 	.word	0x20000154
 80013fc:	20000157 	.word	0x20000157

08001400 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <MX_GPIO_Init+0x160>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a51      	ldr	r2, [pc, #324]	; (8001560 <MX_GPIO_Init+0x160>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <MX_GPIO_Init+0x160>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142c:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <MX_GPIO_Init+0x160>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a4b      	ldr	r2, [pc, #300]	; (8001560 <MX_GPIO_Init+0x160>)
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <MX_GPIO_Init+0x160>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <MX_GPIO_Init+0x160>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <MX_GPIO_Init+0x160>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <MX_GPIO_Init+0x160>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <MX_GPIO_Init+0x160>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a3f      	ldr	r2, [pc, #252]	; (8001560 <MX_GPIO_Init+0x160>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <MX_GPIO_Init+0x160>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800147a:	483a      	ldr	r0, [pc, #232]	; (8001564 <MX_GPIO_Init+0x164>)
 800147c:	f002 fb94 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8001480:	2200      	movs	r2, #0
 8001482:	f649 1102 	movw	r1, #39170	; 0x9902
 8001486:	4838      	ldr	r0, [pc, #224]	; (8001568 <MX_GPIO_Init+0x168>)
 8001488:	f002 fb8e 	bl	8003ba8 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2124      	movs	r1, #36	; 0x24
 8001490:	4836      	ldr	r0, [pc, #216]	; (800156c <MX_GPIO_Init+0x16c>)
 8001492:	f002 fb89 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 8001496:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	482d      	ldr	r0, [pc, #180]	; (8001564 <MX_GPIO_Init+0x164>)
 80014b0:	f002 f9e6 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80014b4:	f649 1302 	movw	r3, #39170	; 0x9902
 80014b8:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4826      	ldr	r0, [pc, #152]	; (8001568 <MX_GPIO_Init+0x168>)
 80014ce:	f002 f9d7 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 80014d2:	2304      	movs	r3, #4
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_GPIO_Init+0x16c>)
 80014ea:	f002 f9c9 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80014ee:	f24f 2308 	movw	r3, #61960	; 0xf208
 80014f2:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <MX_GPIO_Init+0x16c>)
 8001504:	f002 f9bc 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8001508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	4811      	ldr	r0, [pc, #68]	; (8001564 <MX_GPIO_Init+0x164>)
 800151e:	f002 f9af 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8001522:	2304      	movs	r3, #4
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <MX_GPIO_Init+0x170>)
 8001536:	f002 f9a3 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 800153a:	2320      	movs	r3, #32
 800153c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_GPIO_Init+0x16c>)
 8001552:	f002 f995 	bl	8003880 <HAL_GPIO_Init>

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40011000 	.word	0x40011000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011400 	.word	0x40011400

08001574 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C2_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MX_I2C2_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_I2C2_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_I2C2_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_I2C2_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_I2C2_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_I2C2_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_I2C2_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_I2C2_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_I2C2_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_I2C2_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_I2C2_Init+0x50>)
 80015b2:	f002 fb2b 	bl	8003c0c <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 f926 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000164 	.word	0x20000164
 80015c8:	40005800 	.word	0x40005800
 80015cc:	000186a0 	.word	0x000186a0

080015d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_I2C_MspInit+0x74>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d124      	bne.n	800163a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_I2C_MspInit+0x78>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_I2C_MspInit+0x78>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_I2C_MspInit+0x78>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001608:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_I2C_MspInit+0x7c>)
 800161e:	f002 f92f 	bl	8003880 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_I2C_MspInit+0x78>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x78>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_I2C_MspInit+0x78>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40005800 	.word	0x40005800
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001654:	f001 f98a 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001658:	f000 f84e 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165c:	f7ff fed0 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 8001660:	f7ff fb98 	bl	8000d94 <MX_DMA_Init>
  MX_ADC1_Init();
 8001664:	f7ff fa74 	bl	8000b50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001668:	f001 f872 	bl	8002750 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800166c:	f001 f89a 	bl	80027a4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001670:	f7ff ff80 	bl	8001574 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001674:	f000 fb54 	bl	8001d20 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001678:	f000 fe7e 	bl	8002378 <MX_TIM8_Init>
  MX_TIM4_Init();
 800167c:	f000 fd78 	bl	8002170 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001680:	f000 fe04 	bl	800228c <MX_TIM5_Init>
  MX_TIM2_Init();
 8001684:	f000 fcb2 	bl	8001fec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001688:	f000 fcfc 	bl	8002084 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800168c:	4817      	ldr	r0, [pc, #92]	; (80016ec <main+0x9c>)
 800168e:	f003 ff7b 	bl	8005588 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001692:	2100      	movs	r1, #0
 8001694:	4816      	ldr	r0, [pc, #88]	; (80016f0 <main+0xa0>)
 8001696:	f004 f82f 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800169a:	2104      	movs	r1, #4
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <main+0xa0>)
 800169e:	f004 f82b 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016a2:	2108      	movs	r1, #8
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <main+0xa0>)
 80016a6:	f004 f827 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016aa:	210c      	movs	r1, #12
 80016ac:	4810      	ldr	r0, [pc, #64]	; (80016f0 <main+0xa0>)
 80016ae:	f004 f823 	bl	80056f8 <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 80016b2:	210a      	movs	r1, #10
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 faf3 	bl	8001ca0 <setTimer>
  setTimer(1, 1000);
 80016ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 faee 	bl	8001ca0 <setTimer>
  servo_init(SERVO1);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fa8d 	bl	8001be4 <servo_init>
  gamepad_init();
 80016ca:	f7ff fb81 	bl	8000dd0 <gamepad_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <main+0xa4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d1fb      	bne.n	80016ce <main+0x7e>
		  setTimer(0, 10);
 80016d6:	210a      	movs	r1, #10
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 fae1 	bl	8001ca0 <setTimer>
		  ledBlink();
 80016de:	f000 f87b 	bl	80017d8 <ledBlink>
		  gamepad_update();
 80016e2:	f7ff fcad 	bl	8001040 <gamepad_update>
		  gamepad_run_tele();
 80016e6:	f7ff fe23 	bl	8001330 <gamepad_run_tele>
	  if(timer_flag[0] == 1){
 80016ea:	e7f0      	b.n	80016ce <main+0x7e>
 80016ec:	200002bc 	.word	0x200002bc
 80016f0:	200003dc 	.word	0x200003dc
 80016f4:	20000210 	.word	0x20000210

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	; 0x58
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f005 fe04 	bl	8007314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800174c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001752:	4618      	mov	r0, r3
 8001754:	f003 f97e 	bl	8004a54 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800175e:	f000 f855 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001766:	2302      	movs	r3, #2
 8001768:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fbea 	bl	8004f58 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800178a:	f000 f83f 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178e:	2302      	movs	r3, #2
 8001790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001796:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fd6a 	bl	8005274 <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017a6:	f000 f831 	bl	800180c <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3758      	adds	r7, #88	; 0x58
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c2:	d105      	bne.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e>
		timerRun(0);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 fa83 	bl	8001cd0 <timerRun>
		timerRun(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 fa80 	bl	8001cd0 <timerRun>
	}
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <ledBlink>:



int led_debug_count = 0;
void ledBlink(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	led_debug_count++;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <ledBlink+0x2c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <ledBlink+0x2c>)
 80017e4:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <ledBlink+0x2c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d107      	bne.n	80017fe <ledBlink+0x26>
		led_debug_count = 0;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <ledBlink+0x2c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80017f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <ledBlink+0x30>)
 80017fa:	f002 f9ed 	bl	8003bd8 <HAL_GPIO_TogglePin>
	}
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001b8 	.word	0x200001b8
 8001808:	40011000 	.word	0x40011000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <setSpeed>:
#define 	DOWN 		0
#define 	SPEED		50

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <setSpeed+0x70>)
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	7013      	strb	r3, [r2, #0]
	switch (dc){
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	3b01      	subs	r3, #1
 8001832:	2b03      	cmp	r3, #3
 8001834:	d822      	bhi.n	800187c <setSpeed+0x64>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <setSpeed+0x24>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001859 	.word	0x08001859
 8001844:	08001865 	.word	0x08001865
 8001848:	08001871 	.word	0x08001871
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <setSpeed+0x70>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <setSpeed+0x74>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001856:	e011      	b.n	800187c <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <setSpeed+0x70>)
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <setSpeed+0x74>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001862:	e00b      	b.n	800187c <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <setSpeed+0x70>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <setSpeed+0x74>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800186e:	e005      	b.n	800187c <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <setSpeed+0x70>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <setSpeed+0x74>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800187a:	bf00      	nop
	}
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200001bc 	.word	0x200001bc
 800188c:	200003dc 	.word	0x200003dc

08001890 <dc1Move>:

void dc1Move(int duty_cycle){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <dc1Move+0x50>)
 80018a6:	f002 f97f 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff ffb1 	bl	8001818 <setSpeed>
	}
	if(duty_cycle < 0){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da0d      	bge.n	80018d8 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <dc1Move+0x50>)
 80018c4:	f002 f970 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	425b      	negs	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4619      	mov	r1, r3
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff ffa0 	bl	8001818 <setSpeed>
	}
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40011000 	.word	0x40011000

080018e4 <dc2Move>:

void dc2Move(int duty_cycle){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <dc2Move+0x50>)
 80018fa:	f002 f955 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4619      	mov	r1, r3
 8001904:	2002      	movs	r0, #2
 8001906:	f7ff ff87 	bl	8001818 <setSpeed>
	}
	if(duty_cycle < 0){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da0d      	bge.n	800192c <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <dc2Move+0x50>)
 8001918:	f002 f946 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	425b      	negs	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4619      	mov	r1, r3
 8001926:	2002      	movs	r0, #2
 8001928:	f7ff ff76 	bl	8001818 <setSpeed>
	}
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40011000 	.word	0x40011000

08001938 <dc3Move>:

void dc3Move(int duty_cycle){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0a      	blt.n	800195c <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <dc3Move+0x4c>)
 800194c:	f002 f92c 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	2003      	movs	r0, #3
 8001958:	f7ff ff5e 	bl	8001818 <setSpeed>
	}
	if(duty_cycle < 0){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	da0c      	bge.n	800197c <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001962:	2201      	movs	r2, #1
 8001964:	2104      	movs	r1, #4
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <dc3Move+0x4c>)
 8001968:	f002 f91e 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	425b      	negs	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	2003      	movs	r0, #3
 8001978:	f7ff ff4e 	bl	8001818 <setSpeed>
	}
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40010c00 	.word	0x40010c00

08001988 <dc4Move>:

void dc4Move(int duty_cycle){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0a      	blt.n	80019ac <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001996:	2200      	movs	r2, #0
 8001998:	2102      	movs	r1, #2
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <dc4Move+0x4c>)
 800199c:	f002 f904 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	2004      	movs	r0, #4
 80019a8:	f7ff ff36 	bl	8001818 <setSpeed>
	}
	if(duty_cycle < 0){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da0c      	bge.n	80019cc <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2102      	movs	r1, #2
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <dc4Move+0x4c>)
 80019b8:	f002 f8f6 	bl	8003ba8 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	425b      	negs	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	2004      	movs	r0, #4
 80019c8:	f7ff ff26 	bl	8001818 <setSpeed>
	}
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40010800 	.word	0x40010800

080019d8 <stop>:


void stop(){
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	dc1Move(0);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff57 	bl	8001890 <dc1Move>
	dc2Move(0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff ff7e 	bl	80018e4 <dc2Move>
	dc3Move(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ffa5 	bl	8001938 <dc3Move>
	dc4Move(0);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff ffca 	bl	8001988 <dc4Move>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <forward>:

void forward(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 80019fc:	2032      	movs	r0, #50	; 0x32
 80019fe:	f7ff ff47 	bl	8001890 <dc1Move>
	dc2Move(SPEED);
 8001a02:	2032      	movs	r0, #50	; 0x32
 8001a04:	f7ff ff6e 	bl	80018e4 <dc2Move>
	dc3Move(SPEED);
 8001a08:	2032      	movs	r0, #50	; 0x32
 8001a0a:	f7ff ff95 	bl	8001938 <dc3Move>
	dc4Move(SPEED);
 8001a0e:	2032      	movs	r0, #50	; 0x32
 8001a10:	f7ff ffba 	bl	8001988 <dc4Move>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <backwards>:

void backwards(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8001a1c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a20:	f7ff ff36 	bl	8001890 <dc1Move>
	dc2Move(-SPEED);
 8001a24:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a28:	f7ff ff5c 	bl	80018e4 <dc2Move>
	dc3Move(-SPEED);
 8001a2c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a30:	f7ff ff82 	bl	8001938 <dc3Move>
	dc4Move(-SPEED);
 8001a34:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a38:	f7ff ffa6 	bl	8001988 <dc4Move>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <frontLeft>:

void frontLeft(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff ff23 	bl	8001890 <dc1Move>
	dc2Move(SPEED);
 8001a4a:	2032      	movs	r0, #50	; 0x32
 8001a4c:	f7ff ff4a 	bl	80018e4 <dc2Move>
	dc3Move(SPEED);
 8001a50:	2032      	movs	r0, #50	; 0x32
 8001a52:	f7ff ff71 	bl	8001938 <dc3Move>
	dc4Move(0); //stop
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff ff96 	bl	8001988 <dc4Move>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <frontRight>:

void frontRight(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f7ff ff13 	bl	8001890 <dc1Move>
	dc2Move(0); //stop
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff ff3a 	bl	80018e4 <dc2Move>
	dc3Move(0); //stop
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff61 	bl	8001938 <dc3Move>
	dc4Move(SPEED);
 8001a76:	2032      	movs	r0, #50	; 0x32
 8001a78:	f7ff ff86 	bl	8001988 <dc4Move>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <backRight>:
void backRight(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff ff03 	bl	8001890 <dc1Move>
	dc2Move(-SPEED);
 8001a8a:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a8e:	f7ff ff29 	bl	80018e4 <dc2Move>
	dc3Move(-SPEED);
 8001a92:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001a96:	f7ff ff4f 	bl	8001938 <dc3Move>
	dc4Move(0); //stop
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff ff74 	bl	8001988 <dc4Move>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <backLeft>:

void backLeft(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8001aa8:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001aac:	f7ff fef0 	bl	8001890 <dc1Move>
	dc2Move(0); //stop
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff ff17 	bl	80018e4 <dc2Move>
	dc3Move(0); //stop
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff ff3e 	bl	8001938 <dc3Move>
	dc4Move(-SPEED);
 8001abc:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001ac0:	f7ff ff62 	bl	8001988 <dc4Move>

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <right>:

void right(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f7ff fedf 	bl	8001890 <dc1Move>
	dc2Move(-SPEED);
 8001ad2:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001ad6:	f7ff ff05 	bl	80018e4 <dc2Move>
	dc3Move(-SPEED);
 8001ada:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001ade:	f7ff ff2b 	bl	8001938 <dc3Move>
	dc4Move(SPEED);
 8001ae2:	2032      	movs	r0, #50	; 0x32
 8001ae4:	f7ff ff50 	bl	8001988 <dc4Move>
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <left>:

void left(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8001af0:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001af4:	f7ff fecc 	bl	8001890 <dc1Move>
	dc2Move(SPEED);
 8001af8:	2032      	movs	r0, #50	; 0x32
 8001afa:	f7ff fef3 	bl	80018e4 <dc2Move>
	dc3Move(SPEED);
 8001afe:	2032      	movs	r0, #50	; 0x32
 8001b00:	f7ff ff1a 	bl	8001938 <dc3Move>
	dc4Move(-SPEED);
 8001b04:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001b08:	f7ff ff3e 	bl	8001988 <dc4Move>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <rotateLeft>:

void rotateLeft(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	dc1Move(-SPEED);
 8001b14:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001b18:	f7ff feba 	bl	8001890 <dc1Move>
	dc2Move(-SPEED);
 8001b1c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001b20:	f7ff fee0 	bl	80018e4 <dc2Move>
	dc3Move(SPEED);
 8001b24:	2032      	movs	r0, #50	; 0x32
 8001b26:	f7ff ff07 	bl	8001938 <dc3Move>
	dc4Move(SPEED);
 8001b2a:	2032      	movs	r0, #50	; 0x32
 8001b2c:	f7ff ff2c 	bl	8001988 <dc4Move>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <rotateRight>:

void rotateRight(){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	dc1Move(SPEED);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f7ff fea9 	bl	8001890 <dc1Move>
	dc2Move(SPEED);
 8001b3e:	2032      	movs	r0, #50	; 0x32
 8001b40:	f7ff fed0 	bl	80018e4 <dc2Move>
	dc3Move(-SPEED);
 8001b44:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001b48:	f7ff fef6 	bl	8001938 <dc3Move>
	dc4Move(-SPEED);
 8001b4c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001b50:	f7ff ff1a 	bl	8001988 <dc4Move>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <runDir>:
	else
		count_test = 10;

}

void runDir(int dir){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	switch (dir) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d835      	bhi.n	8001bd4 <runDir+0x7c>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <runDir+0x18>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001bb1 	.word	0x08001bb1
 8001b74:	08001bc9 	.word	0x08001bc9
 8001b78:	08001b99 	.word	0x08001b99
 8001b7c:	08001bc3 	.word	0x08001bc3
 8001b80:	08001bb7 	.word	0x08001bb7
 8001b84:	08001bbd 	.word	0x08001bbd
 8001b88:	08001ba5 	.word	0x08001ba5
 8001b8c:	08001b9f 	.word	0x08001b9f
 8001b90:	08001bcf 	.word	0x08001bcf
 8001b94:	08001bab 	.word	0x08001bab
		case ROBOT_DIR_FW:
			forward();
 8001b98:	f7ff ff2e 	bl	80019f8 <forward>
			break;
 8001b9c:	e01d      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_SR:
			right();
 8001b9e:	f7ff ff93 	bl	8001ac8 <right>
			break;
 8001ba2:	e01a      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_SL:
			left();
 8001ba4:	f7ff ffa2 	bl	8001aec <left>
			break;
 8001ba8:	e017      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_L:
			rotateLeft();
 8001baa:	f7ff ffb1 	bl	8001b10 <rotateLeft>
			break;
 8001bae:	e014      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_R:
			rotateRight();
 8001bb0:	f7ff ffc0 	bl	8001b34 <rotateRight>
			break;
 8001bb4:	e011      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_LB:
			backLeft();
 8001bb6:	f7ff ff75 	bl	8001aa4 <backLeft>
			break;
 8001bba:	e00e      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_RB:
			backRight();
 8001bbc:	f7ff ff60 	bl	8001a80 <backRight>
			break;
 8001bc0:	e00b      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_LF:
			frontLeft();
 8001bc2:	f7ff ff3d 	bl	8001a40 <frontLeft>
			break;
 8001bc6:	e008      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_RF:
			frontRight();
 8001bc8:	f7ff ff4a 	bl	8001a60 <frontRight>
			break;
 8001bcc:	e005      	b.n	8001bda <runDir+0x82>
		case ROBOT_DIR_BW:
			backwards();
 8001bce:	f7ff ff23 	bl	8001a18 <backwards>
			break;
 8001bd2:	e002      	b.n	8001bda <runDir+0x82>
		default:
			stop();
 8001bd4:	f7ff ff00 	bl	80019d8 <stop>
			break;
 8001bd8:	bf00      	nop
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop

08001be4 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8001bec:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <servo_init+0x20>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <servo_init+0x24>)
 8001bf8:	f003 fd7e 	bl	80056f8 <HAL_TIM_PWM_Start>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000004 	.word	0x20000004
 8001c08:	2000034c 	.word	0x2000034c

08001c0c <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db35      	blt.n	8001c88 <servo_set_angle+0x7c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2bb4      	cmp	r3, #180	; 0xb4
 8001c20:	dc32      	bgt.n	8001c88 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <servo_set_angle+0x88>)
 8001c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c30:	441a      	add	r2, r3
 8001c32:	11d2      	asrs	r2, r2, #7
 8001c34:	17db      	asrs	r3, r3, #31
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	3319      	adds	r3, #25
 8001c3a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <servo_set_angle+0x8c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <servo_set_angle+0x46>
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <servo_set_angle+0x90>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c50:	e01b      	b.n	8001c8a <servo_set_angle+0x7e>
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <servo_set_angle+0x8c>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d104      	bne.n	8001c68 <servo_set_angle+0x5c>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <servo_set_angle+0x90>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6393      	str	r3, [r2, #56]	; 0x38
 8001c66:	e010      	b.n	8001c8a <servo_set_angle+0x7e>
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <servo_set_angle+0x8c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d104      	bne.n	8001c7e <servo_set_angle+0x72>
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <servo_set_angle+0x90>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c7c:	e005      	b.n	8001c8a <servo_set_angle+0x7e>
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <servo_set_angle+0x90>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	e000      	b.n	8001c8a <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 8001c88:	bf00      	nop
}
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	b60b60b7 	.word	0xb60b60b7
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	2000034c 	.word	0x2000034c

08001ca0 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001caa:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <setTimer+0x28>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <setTimer+0x2c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	200001c0 	.word	0x200001c0
 8001ccc:	20000210 	.word	0x20000210

08001cd0 <timerRun>:

void timerRun(int index){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <timerRun+0x48>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd13      	ble.n	8001d0c <timerRun+0x3c>
		timer_counter[index]--;
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <timerRun+0x48>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <timerRun+0x48>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <timerRun+0x48>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc04      	bgt.n	8001d0c <timerRun+0x3c>
			timer_flag[index] = 1;
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <timerRun+0x4c>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2101      	movs	r1, #1
 8001d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	20000210 	.word	0x20000210

08001d20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_SPI1_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d72:	f003 fb35 	bl	80053e0 <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f7ff fd46 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000260 	.word	0x20000260
 8001d88:	40013000 	.word	0x40013000

08001d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d12f      	bne.n	8001e0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001db2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001ddc:	23b0      	movs	r3, #176	; 0xb0
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_SPI_MspInit+0x90>)
 8001df0:	f001 fd46 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_SPI_MspInit+0x90>)
 8001e08:	f001 fd3a 	bl	8003880 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013000 	.word	0x40013000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010800 	.word	0x40010800

08001e20 <moveSM>:
#define DUTY	50
#define SPR		200

int count_spr = 0;

void moveSM(int cycle){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	if(cycle >= 0){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0a      	blt.n	8001e44 <moveSM+0x24>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2120      	movs	r1, #32
 8001e32:	4812      	ldr	r0, [pc, #72]	; (8001e7c <moveSM+0x5c>)
 8001e34:	f001 feb8 	bl	8003ba8 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	22c8      	movs	r2, #200	; 0xc8
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <moveSM+0x60>)
 8001e42:	6013      	str	r3, [r2, #0]
	}
	if(cycle < 0){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da0b      	bge.n	8001e62 <moveSM+0x42>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	480b      	ldr	r0, [pc, #44]	; (8001e7c <moveSM+0x5c>)
 8001e50:	f001 feaa 	bl	8003ba8 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle * -1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <moveSM+0x60>)
 8001e60:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <moveSM+0x64>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2232      	movs	r2, #50	; 0x32
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <moveSM+0x64>)
 8001e6e:	f003 fcfd 	bl	800586c <HAL_TIM_PWM_Start_IT>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	200002b8 	.word	0x200002b8
 8001e84:	20000304 	.word	0x20000304

08001e88 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001ea2:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dc03      	bgt.n	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001eac:	2100      	movs	r1, #0
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8001eb0:	f003 fde4 	bl	8005a7c <HAL_TIM_PWM_Stop_IT>
	}
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	200002b8 	.word	0x200002b8
 8001ec4:	20000304 	.word	0x20000304

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_MspInit+0x5c>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_MspInit+0x5c>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6193      	str	r3, [r2, #24]
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_MspInit+0x5c>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <HAL_MspInit+0x5c>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_MspInit+0x60>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_MspInit+0x60>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 fd41 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Channel1_IRQHandler+0x10>)
 8001f82:	f001 fa41 	bl	8003408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000cc 	.word	0x200000cc

08001f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM2_IRQHandler+0x10>)
 8001f96:	f003 fe2f 	bl	8005bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002bc 	.word	0x200002bc

08001fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM3_IRQHandler+0x10>)
 8001faa:	f003 fe25 	bl	8005bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000304 	.word	0x20000304

08001fb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <USART1_IRQHandler+0x10>)
 8001fbe:	f004 fcc7 	bl	8006950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000424 	.word	0x20000424

08001fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <USART2_IRQHandler+0x10>)
 8001fd2:	f004 fcbd 	bl	8006950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000046c 	.word	0x2000046c

08001fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_TIM2_Init+0x94>)
 800200a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_TIM2_Init+0x94>)
 8002012:	2247      	movs	r2, #71	; 0x47
 8002014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_TIM2_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_TIM2_Init+0x94>)
 800201e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002022:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_TIM2_Init+0x94>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_TIM2_Init+0x94>)
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002030:	4813      	ldr	r0, [pc, #76]	; (8002080 <MX_TIM2_Init+0x94>)
 8002032:	f003 fa59 	bl	80054e8 <HAL_TIM_Base_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800203c:	f7ff fbe6 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <MX_TIM2_Init+0x94>)
 800204e:	f003 ff9d 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002058:	f7ff fbd8 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_TIM2_Init+0x94>)
 800206a:	f004 fb51 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002074:	f7ff fbca 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200002bc 	.word	0x200002bc

08002084 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]
 80020b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <MX_TIM3_Init+0xe8>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020bc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80020c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020ca:	2263      	movs	r2, #99	; 0x63
 80020cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020dc:	f003 fa04 	bl	80054e8 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020e6:	f7ff fb91 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f4:	4619      	mov	r1, r3
 80020f6:	481c      	ldr	r0, [pc, #112]	; (8002168 <MX_TIM3_Init+0xe4>)
 80020f8:	f003 ff48 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002102:	f7ff fb83 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002106:	4818      	ldr	r0, [pc, #96]	; (8002168 <MX_TIM3_Init+0xe4>)
 8002108:	f003 fa9e 	bl	8005648 <HAL_TIM_PWM_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002112:	f7ff fb7b 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	4619      	mov	r1, r3
 8002124:	4810      	ldr	r0, [pc, #64]	; (8002168 <MX_TIM3_Init+0xe4>)
 8002126:	f004 faf3 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002130:	f7ff fb6c 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002134:	2360      	movs	r3, #96	; 0x60
 8002136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM3_Init+0xe4>)
 800214c:	f003 fe5c 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002156:	f7ff fb59 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM3_Init+0xe4>)
 800215c:	f000 fa4c 	bl	80025f8 <HAL_TIM_MspPostInit>
//  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);

}
 8002160:	bf00      	nop
 8002162:	3738      	adds	r7, #56	; 0x38
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000304 	.word	0x20000304
 800216c:	40000400 	.word	0x40000400

08002170 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 0320 	add.w	r3, r7, #32
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	615a      	str	r2, [r3, #20]
 800219e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a0:	4b38      	ldr	r3, [pc, #224]	; (8002284 <MX_TIM4_Init+0x114>)
 80021a2:	4a39      	ldr	r2, [pc, #228]	; (8002288 <MX_TIM4_Init+0x118>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <MX_TIM4_Init+0x114>)
 80021a8:	f240 529f 	movw	r2, #1439	; 0x59f
 80021ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <MX_TIM4_Init+0x114>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <MX_TIM4_Init+0x114>)
 80021b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <MX_TIM4_Init+0x114>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MX_TIM4_Init+0x114>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021c8:	482e      	ldr	r0, [pc, #184]	; (8002284 <MX_TIM4_Init+0x114>)
 80021ca:	f003 f98d 	bl	80054e8 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021d4:	f7ff fb1a 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	4619      	mov	r1, r3
 80021e4:	4827      	ldr	r0, [pc, #156]	; (8002284 <MX_TIM4_Init+0x114>)
 80021e6:	f003 fed1 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021f0:	f7ff fb0c 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021f4:	4823      	ldr	r0, [pc, #140]	; (8002284 <MX_TIM4_Init+0x114>)
 80021f6:	f003 fa27 	bl	8005648 <HAL_TIM_PWM_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002200:	f7ff fb04 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	4619      	mov	r1, r3
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <MX_TIM4_Init+0x114>)
 8002214:	f004 fa7c 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800221e:	f7ff faf5 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002222:	2360      	movs	r3, #96	; 0x60
 8002224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8002226:	2319      	movs	r3, #25
 8002228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	4812      	ldr	r0, [pc, #72]	; (8002284 <MX_TIM4_Init+0x114>)
 800223a:	f003 fde5 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002244:	f7ff fae2 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2204      	movs	r2, #4
 800224c:	4619      	mov	r1, r3
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <MX_TIM4_Init+0x114>)
 8002250:	f003 fdda 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800225a:	f7ff fad7 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2208      	movs	r2, #8
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM4_Init+0x114>)
 8002266:	f003 fdcf 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002270:	f7ff facc 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM4_Init+0x114>)
 8002276:	f000 f9bf 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 800227a:	bf00      	nop
 800227c:	3738      	adds	r7, #56	; 0x38
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000034c 	.word	0x2000034c
 8002288:	40000800 	.word	0x40000800

0800228c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022be:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022c4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80022c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022d2:	2263      	movs	r2, #99	; 0x63
 80022d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022e2:	4823      	ldr	r0, [pc, #140]	; (8002370 <MX_TIM5_Init+0xe4>)
 80022e4:	f003 f900 	bl	80054e8 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80022ee:	f7ff fa8d 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fc:	4619      	mov	r1, r3
 80022fe:	481c      	ldr	r0, [pc, #112]	; (8002370 <MX_TIM5_Init+0xe4>)
 8002300:	f003 fe44 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800230a:	f7ff fa7f 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_TIM5_Init+0xe4>)
 8002310:	f003 f99a 	bl	8005648 <HAL_TIM_PWM_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800231a:	f7ff fa77 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002326:	f107 0320 	add.w	r3, r7, #32
 800232a:	4619      	mov	r1, r3
 800232c:	4810      	ldr	r0, [pc, #64]	; (8002370 <MX_TIM5_Init+0xe4>)
 800232e:	f004 f9ef 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002338:	f7ff fa68 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233c:	2360      	movs	r3, #96	; 0x60
 800233e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2200      	movs	r2, #0
 8002350:	4619      	mov	r1, r3
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM5_Init+0xe4>)
 8002354:	f003 fd58 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800235e:	f7ff fa55 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM5_Init+0xe4>)
 8002364:	f000 f948 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 8002368:	bf00      	nop
 800236a:	3738      	adds	r7, #56	; 0x38
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000394 	.word	0x20000394
 8002374:	40000c00 	.word	0x40000c00

08002378 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b096      	sub	sp, #88	; 0x58
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2220      	movs	r2, #32
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 ffaf 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <MX_TIM8_Init+0x184>)
 80023ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 80023bc:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023be:	f240 1267 	movw	r2, #359	; 0x167
 80023c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80023ca:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023cc:	2263      	movs	r2, #99	; 0x63
 80023ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80023d6:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80023e2:	4845      	ldr	r0, [pc, #276]	; (80024f8 <MX_TIM8_Init+0x180>)
 80023e4:	f003 f880 	bl	80054e8 <HAL_TIM_Base_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80023ee:	f7ff fa0d 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023fc:	4619      	mov	r1, r3
 80023fe:	483e      	ldr	r0, [pc, #248]	; (80024f8 <MX_TIM8_Init+0x180>)
 8002400:	f003 fdc4 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800240a:	f7ff f9ff 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800240e:	483a      	ldr	r0, [pc, #232]	; (80024f8 <MX_TIM8_Init+0x180>)
 8002410:	f003 f91a 	bl	8005648 <HAL_TIM_PWM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800241a:	f7ff f9f7 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002426:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242a:	4619      	mov	r1, r3
 800242c:	4832      	ldr	r0, [pc, #200]	; (80024f8 <MX_TIM8_Init+0x180>)
 800242e:	f004 f96f 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002438:	f7ff f9e8 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	2200      	movs	r2, #0
 800245e:	4619      	mov	r1, r3
 8002460:	4825      	ldr	r0, [pc, #148]	; (80024f8 <MX_TIM8_Init+0x180>)
 8002462:	f003 fcd1 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800246c:	f7ff f9ce 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	2204      	movs	r2, #4
 8002476:	4619      	mov	r1, r3
 8002478:	481f      	ldr	r0, [pc, #124]	; (80024f8 <MX_TIM8_Init+0x180>)
 800247a:	f003 fcc5 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002484:	f7ff f9c2 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	2208      	movs	r2, #8
 800248e:	4619      	mov	r1, r3
 8002490:	4819      	ldr	r0, [pc, #100]	; (80024f8 <MX_TIM8_Init+0x180>)
 8002492:	f003 fcb9 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800249c:	f7ff f9b6 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	220c      	movs	r2, #12
 80024a6:	4619      	mov	r1, r3
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <MX_TIM8_Init+0x180>)
 80024aa:	f003 fcad 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80024b4:	f7ff f9aa 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4807      	ldr	r0, [pc, #28]	; (80024f8 <MX_TIM8_Init+0x180>)
 80024dc:	f004 f984 	bl	80067e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80024e6:	f7ff f991 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <MX_TIM8_Init+0x180>)
 80024ec:	f000 f884 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80024f0:	bf00      	nop
 80024f2:	3758      	adds	r7, #88	; 0x58
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200003dc 	.word	0x200003dc
 80024fc:	40013400 	.word	0x40013400

08002500 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d114      	bne.n	800253c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	201c      	movs	r0, #28
 8002530:	f000 fd79 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002534:	201c      	movs	r0, #28
 8002536:	f000 fd92 	bl	800305e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800253a:	e04e      	b.n	80025da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_TIM_Base_MspInit+0xe8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d114      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2101      	movs	r1, #1
 8002562:	201d      	movs	r0, #29
 8002564:	f000 fd5f 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002568:	201d      	movs	r0, #29
 800256a:	f000 fd78 	bl	800305e <HAL_NVIC_EnableIRQ>
}
 800256e:	e034      	b.n	80025da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_TIM_Base_MspInit+0xec>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10c      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
}
 8002592:	e022      	b.n	80025da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM5)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_TIM_Base_MspInit+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
}
 80025b6:	e010      	b.n	80025da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_TIM_Base_MspInit+0xf4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10b      	bne.n	80025da <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025cc:	6193      	str	r3, [r2, #24]
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_TIM_Base_MspInit+0xe4>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40013400 	.word	0x40013400

080025f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a46      	ldr	r2, [pc, #280]	; (800272c <HAL_TIM_MspPostInit+0x134>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d12a      	bne.n	800266e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	4b45      	ldr	r3, [pc, #276]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a44      	ldr	r2, [pc, #272]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8002630:	2310      	movs	r3, #16
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2302      	movs	r3, #2
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	483c      	ldr	r0, [pc, #240]	; (8002734 <HAL_TIM_MspPostInit+0x13c>)
 8002644:	f001 f91c 	bl	8003880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_TIM_MspPostInit+0x140>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <HAL_TIM_MspPostInit+0x140>)
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800266c:	e05a      	b.n	8002724 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a32      	ldr	r2, [pc, #200]	; (800273c <HAL_TIM_MspPostInit+0x144>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d119      	bne.n	80026ac <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8002690:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	4823      	ldr	r0, [pc, #140]	; (8002734 <HAL_TIM_MspPostInit+0x13c>)
 80026a6:	f001 f8eb 	bl	8003880 <HAL_GPIO_Init>
}
 80026aa:	e03b      	b.n	8002724 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_TIM_MspPostInit+0x148>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d118      	bne.n	80026e8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2302      	movs	r3, #2
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4818      	ldr	r0, [pc, #96]	; (8002744 <HAL_TIM_MspPostInit+0x14c>)
 80026e2:	f001 f8cd 	bl	8003880 <HAL_GPIO_Init>
}
 80026e6:	e01d      	b.n	8002724 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_MspPostInit+0x150>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d118      	bne.n	8002724 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 80026f8:	f043 0310 	orr.w	r3, r3, #16
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_TIM_MspPostInit+0x138>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 800270a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <HAL_TIM_MspPostInit+0x154>)
 8002720:	f001 f8ae 	bl	8003880 <HAL_GPIO_Init>
}
 8002724:	bf00      	nop
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40000400 	.word	0x40000400
 8002730:	40021000 	.word	0x40021000
 8002734:	40010c00 	.word	0x40010c00
 8002738:	40010000 	.word	0x40010000
 800273c:	40000800 	.word	0x40000800
 8002740:	40000c00 	.word	0x40000c00
 8002744:	40010800 	.word	0x40010800
 8002748:	40013400 	.word	0x40013400
 800274c:	40011000 	.word	0x40011000

08002750 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <MX_USART1_UART_Init+0x50>)
 8002758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_USART1_UART_Init+0x4c>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_USART1_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <MX_USART1_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_USART1_UART_Init+0x4c>)
 8002788:	f004 f891 	bl	80068ae <HAL_UART_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002792:	f7ff f83b 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000424 	.word	0x20000424
 80027a0:	40013800 	.word	0x40013800

080027a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART2_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027dc:	f004 f867 	bl	80068ae <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f7ff f811 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000046c 	.word	0x2000046c
 80027f4:	40004400 	.word	0x40004400

080027f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_UART_MspInit+0x118>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d13a      	bne.n	800288e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_UART_MspInit+0x11c>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a3d      	ldr	r2, [pc, #244]	; (8002914 <HAL_UART_MspInit+0x11c>)
 800281e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_UART_MspInit+0x11c>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_UART_MspInit+0x11c>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4a37      	ldr	r2, [pc, #220]	; (8002914 <HAL_UART_MspInit+0x11c>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	4b35      	ldr	r3, [pc, #212]	; (8002914 <HAL_UART_MspInit+0x11c>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	4619      	mov	r1, r3
 800285c:	482e      	ldr	r0, [pc, #184]	; (8002918 <HAL_UART_MspInit+0x120>)
 800285e:	f001 f80f 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	4619      	mov	r1, r3
 8002876:	4828      	ldr	r0, [pc, #160]	; (8002918 <HAL_UART_MspInit+0x120>)
 8002878:	f001 f802 	bl	8003880 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2025      	movs	r0, #37	; 0x25
 8002882:	f000 fbd0 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002886:	2025      	movs	r0, #37	; 0x25
 8002888:	f000 fbe9 	bl	800305e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800288c:	e03c      	b.n	8002908 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_UART_MspInit+0x124>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d137      	bne.n	8002908 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_UART_MspInit+0x11c>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_UART_MspInit+0x11c>)
 800289e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a2:	61d3      	str	r3, [r2, #28]
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_UART_MspInit+0x11c>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_UART_MspInit+0x11c>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_UART_MspInit+0x11c>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_UART_MspInit+0x11c>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c8:	2304      	movs	r3, #4
 80028ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 0318 	add.w	r3, r7, #24
 80028d8:	4619      	mov	r1, r3
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <HAL_UART_MspInit+0x120>)
 80028dc:	f000 ffd0 	bl	8003880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028e0:	2308      	movs	r3, #8
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4619      	mov	r1, r3
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_UART_MspInit+0x120>)
 80028f4:	f000 ffc4 	bl	8003880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2026      	movs	r0, #38	; 0x26
 80028fe:	f000 fb92 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002902:	2026      	movs	r0, #38	; 0x26
 8002904:	f000 fbab 	bl	800305e <HAL_NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40013800 	.word	0x40013800
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800
 800291c:	40004400 	.word	0x40004400

08002920 <Reset_Handler>:
 8002920:	f7ff fb5e 	bl	8001fe0 <SystemInit>
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <LoopFillZerobss+0xe>)
 8002926:	490c      	ldr	r1, [pc, #48]	; (8002958 <LoopFillZerobss+0x12>)
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <LoopFillZerobss+0x16>)
 800292a:	2300      	movs	r3, #0
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:
 800292e:	58d4      	ldr	r4, [r2, r3]
 8002930:	50c4      	str	r4, [r0, r3]
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:
 8002934:	18c4      	adds	r4, r0, r3
 8002936:	428c      	cmp	r4, r1
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <LoopFillZerobss+0x1a>)
 800293c:	4c09      	ldr	r4, [pc, #36]	; (8002964 <LoopFillZerobss+0x1e>)
 800293e:	2300      	movs	r3, #0
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:
 8002946:	42a2      	cmp	r2, r4
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>
 800294a:	f004 fcf1 	bl	8007330 <__libc_init_array>
 800294e:	f7fe fe7f 	bl	8001650 <main>
 8002952:	4770      	bx	lr
 8002954:	20000000 	.word	0x20000000
 8002958:	20000080 	.word	0x20000080
 800295c:	08007af8 	.word	0x08007af8
 8002960:	20000080 	.word	0x20000080
 8002964:	200005f0 	.word	0x200005f0

08002968 <ADC1_2_IRQHandler>:
 8002968:	e7fe      	b.n	8002968 <ADC1_2_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x28>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fb47 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fa9e 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fb5f 	bl	800307a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 fb27 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20000018 	.word	0x20000018
 80029f4:	20000014 	.word	0x20000014

080029f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x1c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x20>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000018 	.word	0x20000018
 8002a18:	200004b4 	.word	0x200004b4

08002a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_GetTick+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	200004b4 	.word	0x200004b4

08002a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0ce      	b.n	8002bf0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f910 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f9bd 	bl	8002df4 <ADC_ConversionStop_Disable>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80a9 	bne.w	8002bde <HAL_ADC_Init+0x1ae>
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80a5 	bne.w	8002bde <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a9c:	f023 0302 	bic.w	r3, r3, #2
 8002aa0:	f043 0202 	orr.w	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4951      	ldr	r1, [pc, #324]	; (8002bf8 <HAL_ADC_Init+0x1c8>)
 8002ab2:	428b      	cmp	r3, r1
 8002ab4:	d10a      	bne.n	8002acc <HAL_ADC_Init+0x9c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002abe:	d002      	beq.n	8002ac6 <HAL_ADC_Init+0x96>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_Init+0xa0>
 8002ac6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aca:	e001      	b.n	8002ad0 <HAL_ADC_Init+0xa0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7b1b      	ldrb	r3, [r3, #12]
 8002ad6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d003      	beq.n	8002af2 <HAL_ADC_Init+0xc2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_ADC_Init+0xc8>
 8002af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af6:	e000      	b.n	8002afa <HAL_ADC_Init+0xca>
 8002af8:	2300      	movs	r3, #0
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7d1b      	ldrb	r3, [r3, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d119      	bne.n	8002b3c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	035a      	lsls	r2, r3, #13
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e00b      	b.n	8002b3c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_ADC_Init+0x1cc>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6c:	d003      	beq.n	8002b76 <HAL_ADC_Init+0x146>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d104      	bne.n	8002b80 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	051b      	lsls	r3, r3, #20
 8002b7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_ADC_Init+0x1d0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bba:	e018      	b.n	8002bee <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	f023 0312 	bic.w	r3, r3, #18
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bdc:	e007      	b.n	8002bee <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40013c00 	.word	0x40013c00
 8002bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8002c00:	ff1f0efe 	.word	0xff1f0efe

08002c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x20>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0dc      	b.n	8002dde <HAL_ADC_ConfigChannel+0x1da>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d81c      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b05      	subs	r3, #5
 8002c46:	221f      	movs	r2, #31
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	4019      	ands	r1, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b05      	subs	r3, #5
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6c:	e03c      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d81c      	bhi.n	8002cb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b23      	subs	r3, #35	; 0x23
 8002c88:	221f      	movs	r2, #31
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	4019      	ands	r1, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b23      	subs	r3, #35	; 0x23
 8002ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
 8002cae:	e01b      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b41      	subs	r3, #65	; 0x41
 8002cc2:	221f      	movs	r2, #31
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4019      	ands	r1, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b41      	subs	r3, #65	; 0x41
 8002cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d91c      	bls.n	8002d2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4019      	ands	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6898      	ldr	r0, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1e      	subs	r3, #30
 8002d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	e019      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6919      	ldr	r1, [r3, #16]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4019      	ands	r1, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6898      	ldr	r0, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	fa00 f203 	lsl.w	r2, r0, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d003      	beq.n	8002d6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d6a:	2b11      	cmp	r3, #17
 8002d6c:	d132      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d125      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d126      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_ADC_ConfigChannel+0x1e8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	0c9a      	lsrs	r2, r3, #18
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002db4:	e002      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f9      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x1b2>
 8002dc2:	e007      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40012400 	.word	0x40012400
 8002dec:	20000010 	.word	0x20000010
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d12e      	bne.n	8002e6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e1e:	f7ff fdfd 	bl	8002a1c <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e24:	e01b      	b.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e26:	f7ff fdf9 	bl	8002a1c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d914      	bls.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e007      	b.n	8002e6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d0dc      	beq.n	8002e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4906      	ldr	r1, [pc, #24]	; (8002f10 <__NVIC_EnableIRQ+0x34>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	; (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	; (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff90 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff2d 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff42 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff90 	bl	8002f68 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5f 	bl	8002f14 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff35 	bl	8002edc <__NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffa2 	bl	8002fcc <SysTick_Config>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e059      	b.n	800315e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_DMA_Init+0xd4>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d80f      	bhi.n	80030d6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_DMA_Init+0xd8>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <HAL_DMA_Init+0xdc>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_DMA_Init+0xe0>)
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80030d4:	e00e      	b.n	80030f4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_DMA_Init+0xe4>)
 80030de:	4413      	add	r3, r2
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_DMA_Init+0xdc>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_DMA_Init+0xe8>)
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800310a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800310e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40020407 	.word	0x40020407
 800316c:	bffdfff8 	.word	0xbffdfff8
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	40020000 	.word	0x40020000
 8003178:	bffdfbf8 	.word	0xbffdfbf8
 800317c:	40020400 	.word	0x40020400

08003180 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d008      	beq.n	80031aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2204      	movs	r2, #4
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e020      	b.n	80031ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 020e 	bic.w	r2, r2, #14
 80031b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d005      	beq.n	800321c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2204      	movs	r2, #4
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e0d6      	b.n	80033ca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020e 	bic.w	r2, r2, #14
 800322a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d958      	bls.n	80032fa <HAL_DMA_Abort_IT+0x102>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a62      	ldr	r2, [pc, #392]	; (80033d8 <HAL_DMA_Abort_IT+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04f      	beq.n	80032f2 <HAL_DMA_Abort_IT+0xfa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_DMA_Abort_IT+0x1e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d048      	beq.n	80032ee <HAL_DMA_Abort_IT+0xf6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5f      	ldr	r2, [pc, #380]	; (80033e0 <HAL_DMA_Abort_IT+0x1e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xf0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5e      	ldr	r2, [pc, #376]	; (80033e4 <HAL_DMA_Abort_IT+0x1ec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d038      	beq.n	80032e2 <HAL_DMA_Abort_IT+0xea>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5c      	ldr	r2, [pc, #368]	; (80033e8 <HAL_DMA_Abort_IT+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d030      	beq.n	80032dc <HAL_DMA_Abort_IT+0xe4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5b      	ldr	r2, [pc, #364]	; (80033ec <HAL_DMA_Abort_IT+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d028      	beq.n	80032d6 <HAL_DMA_Abort_IT+0xde>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d020      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xd8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a57      	ldr	r2, [pc, #348]	; (80033f0 <HAL_DMA_Abort_IT+0x1f8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d019      	beq.n	80032cc <HAL_DMA_Abort_IT+0xd4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_DMA_Abort_IT+0x1fc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d012      	beq.n	80032c8 <HAL_DMA_Abort_IT+0xd0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a54      	ldr	r2, [pc, #336]	; (80033f8 <HAL_DMA_Abort_IT+0x200>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00a      	beq.n	80032c2 <HAL_DMA_Abort_IT+0xca>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_DMA_Abort_IT+0x204>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d102      	bne.n	80032bc <HAL_DMA_Abort_IT+0xc4>
 80032b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ba:	e01b      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c0:	e018      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c6:	e015      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032c8:	2310      	movs	r3, #16
 80032ca:	e013      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e011      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d4:	e00e      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032da:	e00b      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e0:	e008      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e6:	e005      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ec:	e002      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032ee:	2310      	movs	r3, #16
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_Abort_IT+0xfc>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4a42      	ldr	r2, [pc, #264]	; (8003400 <HAL_DMA_Abort_IT+0x208>)
 80032f6:	6053      	str	r3, [r2, #4]
 80032f8:	e057      	b.n	80033aa <HAL_DMA_Abort_IT+0x1b2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a36      	ldr	r2, [pc, #216]	; (80033d8 <HAL_DMA_Abort_IT+0x1e0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04f      	beq.n	80033a4 <HAL_DMA_Abort_IT+0x1ac>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_DMA_Abort_IT+0x1e4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d048      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x1a8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a33      	ldr	r2, [pc, #204]	; (80033e0 <HAL_DMA_Abort_IT+0x1e8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d040      	beq.n	800339a <HAL_DMA_Abort_IT+0x1a2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <HAL_DMA_Abort_IT+0x1ec>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d038      	beq.n	8003394 <HAL_DMA_Abort_IT+0x19c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_DMA_Abort_IT+0x1f0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d030      	beq.n	800338e <HAL_DMA_Abort_IT+0x196>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2e      	ldr	r2, [pc, #184]	; (80033ec <HAL_DMA_Abort_IT+0x1f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d028      	beq.n	8003388 <HAL_DMA_Abort_IT+0x190>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d020      	beq.n	8003382 <HAL_DMA_Abort_IT+0x18a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <HAL_DMA_Abort_IT+0x1f8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_DMA_Abort_IT+0x186>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_DMA_Abort_IT+0x1fc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d012      	beq.n	800337a <HAL_DMA_Abort_IT+0x182>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_DMA_Abort_IT+0x200>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_DMA_Abort_IT+0x204>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_DMA_Abort_IT+0x176>
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	e01b      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 800336e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003372:	e018      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 8003374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003378:	e015      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 800337a:	2310      	movs	r3, #16
 800337c:	e013      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 800337e:	2301      	movs	r3, #1
 8003380:	e011      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 8003382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003386:	e00e      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 8003388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800338c:	e00b      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 800338e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003392:	e008      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 8003394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003398:	e005      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 800339a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339e:	e002      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 80033a0:	2310      	movs	r3, #16
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_Abort_IT+0x1ae>
 80033a4:	2301      	movs	r3, #1
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_DMA_Abort_IT+0x20c>)
 80033a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    } 
  }
  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40020080 	.word	0x40020080
 80033d8:	40020008 	.word	0x40020008
 80033dc:	4002001c 	.word	0x4002001c
 80033e0:	40020030 	.word	0x40020030
 80033e4:	40020044 	.word	0x40020044
 80033e8:	40020058 	.word	0x40020058
 80033ec:	4002006c 	.word	0x4002006c
 80033f0:	40020408 	.word	0x40020408
 80033f4:	4002041c 	.word	0x4002041c
 80033f8:	40020430 	.word	0x40020430
 80033fc:	40020444 	.word	0x40020444
 8003400:	40020400 	.word	0x40020400
 8003404:	40020000 	.word	0x40020000

08003408 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2204      	movs	r2, #4
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80f1 	beq.w	8003614 <HAL_DMA_IRQHandler+0x20c>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80eb 	beq.w	8003614 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_DMA_IRQHandler+0x1d8>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d958      	bls.n	800351a <HAL_DMA_IRQHandler+0x112>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5d      	ldr	r2, [pc, #372]	; (80035e4 <HAL_DMA_IRQHandler+0x1dc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d04f      	beq.n	8003512 <HAL_DMA_IRQHandler+0x10a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d048      	beq.n	800350e <HAL_DMA_IRQHandler+0x106>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_DMA_IRQHandler+0x1e4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d040      	beq.n	8003508 <HAL_DMA_IRQHandler+0x100>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_DMA_IRQHandler+0x1e8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d038      	beq.n	8003502 <HAL_DMA_IRQHandler+0xfa>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a57      	ldr	r2, [pc, #348]	; (80035f4 <HAL_DMA_IRQHandler+0x1ec>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d030      	beq.n	80034fc <HAL_DMA_IRQHandler+0xf4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_DMA_IRQHandler+0x1f0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d028      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_DMA_IRQHandler+0x1d8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d020      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xe8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_DMA_IRQHandler+0x1f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d019      	beq.n	80034ec <HAL_DMA_IRQHandler+0xe4>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a50      	ldr	r2, [pc, #320]	; (8003600 <HAL_DMA_IRQHandler+0x1f8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d012      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xe0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4f      	ldr	r2, [pc, #316]	; (8003604 <HAL_DMA_IRQHandler+0x1fc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xda>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_DMA_IRQHandler+0x200>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d102      	bne.n	80034dc <HAL_DMA_IRQHandler+0xd4>
 80034d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034da:	e01b      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034e0:	e018      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e6:	e015      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034e8:	2340      	movs	r3, #64	; 0x40
 80034ea:	e013      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e011      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034f4:	e00e      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034fa:	e00b      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 80034fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003500:	e008      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 8003502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003506:	e005      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 8003508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350c:	e002      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 800350e:	2340      	movs	r3, #64	; 0x40
 8003510:	e000      	b.n	8003514 <HAL_DMA_IRQHandler+0x10c>
 8003512:	2304      	movs	r3, #4
 8003514:	4a3d      	ldr	r2, [pc, #244]	; (800360c <HAL_DMA_IRQHandler+0x204>)
 8003516:	6053      	str	r3, [r2, #4]
 8003518:	e057      	b.n	80035ca <HAL_DMA_IRQHandler+0x1c2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04f      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x1bc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <HAL_DMA_IRQHandler+0x1e0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d048      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_DMA_IRQHandler+0x1e4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_IRQHandler+0x1b2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <HAL_DMA_IRQHandler+0x1e8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d038      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x1ac>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_DMA_IRQHandler+0x1ec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d030      	beq.n	80035ae <HAL_DMA_IRQHandler+0x1a6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d028      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x1a0>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_DMA_IRQHandler+0x1d8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d020      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x19a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_DMA_IRQHandler+0x1f4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_DMA_IRQHandler+0x196>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_DMA_IRQHandler+0x1f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_DMA_IRQHandler+0x192>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a22      	ldr	r2, [pc, #136]	; (8003604 <HAL_DMA_IRQHandler+0x1fc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x18c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_DMA_IRQHandler+0x200>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <HAL_DMA_IRQHandler+0x186>
 8003588:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800358c:	e01b      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 800358e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003592:	e018      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 8003594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003598:	e015      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	e013      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 800359e:	2304      	movs	r3, #4
 80035a0:	e011      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035a6:	e00e      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035ac:	e00b      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035b2:	e008      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b8:	e005      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035be:	e002      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1be>
 80035c4:	2304      	movs	r3, #4
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_DMA_IRQHandler+0x208>)
 80035c8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8136 	beq.w	8003840 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	e130      	b.n	8003840 <HAL_DMA_IRQHandler+0x438>
 80035de:	bf00      	nop
 80035e0:	40020080 	.word	0x40020080
 80035e4:	40020008 	.word	0x40020008
 80035e8:	4002001c 	.word	0x4002001c
 80035ec:	40020030 	.word	0x40020030
 80035f0:	40020044 	.word	0x40020044
 80035f4:	40020058 	.word	0x40020058
 80035f8:	4002006c 	.word	0x4002006c
 80035fc:	40020408 	.word	0x40020408
 8003600:	4002041c 	.word	0x4002041c
 8003604:	40020430 	.word	0x40020430
 8003608:	40020444 	.word	0x40020444
 800360c:	40020400 	.word	0x40020400
 8003610:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2202      	movs	r2, #2
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80dd 	beq.w	80037e0 <HAL_DMA_IRQHandler+0x3d8>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80d7 	beq.w	80037e0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 020a 	bic.w	r2, r2, #10
 800364e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_DMA_IRQHandler+0x444>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d958      	bls.n	8003716 <HAL_DMA_IRQHandler+0x30e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a79      	ldr	r2, [pc, #484]	; (8003850 <HAL_DMA_IRQHandler+0x448>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04f      	beq.n	800370e <HAL_DMA_IRQHandler+0x306>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a78      	ldr	r2, [pc, #480]	; (8003854 <HAL_DMA_IRQHandler+0x44c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d048      	beq.n	800370a <HAL_DMA_IRQHandler+0x302>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a76      	ldr	r2, [pc, #472]	; (8003858 <HAL_DMA_IRQHandler+0x450>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_IRQHandler+0x2fc>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	; (800385c <HAL_DMA_IRQHandler+0x454>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d038      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2f6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a73      	ldr	r2, [pc, #460]	; (8003860 <HAL_DMA_IRQHandler+0x458>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d030      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x2f0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a72      	ldr	r2, [pc, #456]	; (8003864 <HAL_DMA_IRQHandler+0x45c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d028      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x2ea>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_DMA_IRQHandler+0x444>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d020      	beq.n	80036ec <HAL_DMA_IRQHandler+0x2e4>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6e      	ldr	r2, [pc, #440]	; (8003868 <HAL_DMA_IRQHandler+0x460>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d019      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2e0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_DMA_IRQHandler+0x464>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d012      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x2dc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6b      	ldr	r2, [pc, #428]	; (8003870 <HAL_DMA_IRQHandler+0x468>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00a      	beq.n	80036de <HAL_DMA_IRQHandler+0x2d6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_DMA_IRQHandler+0x46c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d102      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x2d0>
 80036d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d6:	e01b      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036dc:	e018      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e2:	e015      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036e4:	2320      	movs	r3, #32
 80036e6:	e013      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e011      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f0:	e00e      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036f6:	e00b      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036fc:	e008      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 80036fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003702:	e005      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 8003704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003708:	e002      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 800370a:	2320      	movs	r3, #32
 800370c:	e000      	b.n	8003710 <HAL_DMA_IRQHandler+0x308>
 800370e:	2302      	movs	r3, #2
 8003710:	4a59      	ldr	r2, [pc, #356]	; (8003878 <HAL_DMA_IRQHandler+0x470>)
 8003712:	6053      	str	r3, [r2, #4]
 8003714:	e057      	b.n	80037c6 <HAL_DMA_IRQHandler+0x3be>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_DMA_IRQHandler+0x448>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04f      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x3b8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <HAL_DMA_IRQHandler+0x44c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d048      	beq.n	80037bc <HAL_DMA_IRQHandler+0x3b4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_DMA_IRQHandler+0x450>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x3ae>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_DMA_IRQHandler+0x454>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d038      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x3a8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a47      	ldr	r2, [pc, #284]	; (8003860 <HAL_DMA_IRQHandler+0x458>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d030      	beq.n	80037aa <HAL_DMA_IRQHandler+0x3a2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_DMA_IRQHandler+0x45c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d028      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x39c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3d      	ldr	r2, [pc, #244]	; (800384c <HAL_DMA_IRQHandler+0x444>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d020      	beq.n	800379e <HAL_DMA_IRQHandler+0x396>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a41      	ldr	r2, [pc, #260]	; (8003868 <HAL_DMA_IRQHandler+0x460>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_DMA_IRQHandler+0x392>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a40      	ldr	r2, [pc, #256]	; (800386c <HAL_DMA_IRQHandler+0x464>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d012      	beq.n	8003796 <HAL_DMA_IRQHandler+0x38e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3e      	ldr	r2, [pc, #248]	; (8003870 <HAL_DMA_IRQHandler+0x468>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00a      	beq.n	8003790 <HAL_DMA_IRQHandler+0x388>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <HAL_DMA_IRQHandler+0x46c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d102      	bne.n	800378a <HAL_DMA_IRQHandler+0x382>
 8003784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003788:	e01b      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 800378a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378e:	e018      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 8003790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003794:	e015      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 8003796:	2320      	movs	r3, #32
 8003798:	e013      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 800379a:	2302      	movs	r3, #2
 800379c:	e011      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 800379e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037a2:	e00e      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037a8:	e00b      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ae:	e008      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b4:	e005      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ba:	e002      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037bc:	2320      	movs	r3, #32
 80037be:	e000      	b.n	80037c2 <HAL_DMA_IRQHandler+0x3ba>
 80037c0:	2302      	movs	r3, #2
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_DMA_IRQHandler+0x474>)
 80037c4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d034      	beq.n	8003840 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037de:	e02f      	b.n	8003840 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2208      	movs	r2, #8
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d028      	beq.n	8003842 <HAL_DMA_IRQHandler+0x43a>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d023      	beq.n	8003842 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    }
  }
  return;
 8003840:	bf00      	nop
 8003842:	bf00      	nop
}
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40020080 	.word	0x40020080
 8003850:	40020008 	.word	0x40020008
 8003854:	4002001c 	.word	0x4002001c
 8003858:	40020030 	.word	0x40020030
 800385c:	40020044 	.word	0x40020044
 8003860:	40020058 	.word	0x40020058
 8003864:	4002006c 	.word	0x4002006c
 8003868:	40020408 	.word	0x40020408
 800386c:	4002041c 	.word	0x4002041c
 8003870:	40020430 	.word	0x40020430
 8003874:	40020444 	.word	0x40020444
 8003878:	40020400 	.word	0x40020400
 800387c:	40020000 	.word	0x40020000

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b480      	push	{r7}
 8003882:	b08b      	sub	sp, #44	; 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003892:	e179      	b.n	8003b88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003894:	2201      	movs	r2, #1
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 8168 	bne.w	8003b82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a96      	ldr	r2, [pc, #600]	; (8003b10 <HAL_GPIO_Init+0x290>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d05e      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038bc:	4a94      	ldr	r2, [pc, #592]	; (8003b10 <HAL_GPIO_Init+0x290>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d875      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038c2:	4a94      	ldr	r2, [pc, #592]	; (8003b14 <HAL_GPIO_Init+0x294>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d058      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038c8:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_GPIO_Init+0x294>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d86f      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038ce:	4a92      	ldr	r2, [pc, #584]	; (8003b18 <HAL_GPIO_Init+0x298>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d052      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_GPIO_Init+0x298>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d869      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038da:	4a90      	ldr	r2, [pc, #576]	; (8003b1c <HAL_GPIO_Init+0x29c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d04c      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038e0:	4a8e      	ldr	r2, [pc, #568]	; (8003b1c <HAL_GPIO_Init+0x29c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d863      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038e6:	4a8e      	ldr	r2, [pc, #568]	; (8003b20 <HAL_GPIO_Init+0x2a0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d046      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038ec:	4a8c      	ldr	r2, [pc, #560]	; (8003b20 <HAL_GPIO_Init+0x2a0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d85d      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038f2:	2b12      	cmp	r3, #18
 80038f4:	d82a      	bhi.n	800394c <HAL_GPIO_Init+0xcc>
 80038f6:	2b12      	cmp	r3, #18
 80038f8:	d859      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <HAL_GPIO_Init+0x80>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	0800397b 	.word	0x0800397b
 8003904:	08003955 	.word	0x08003955
 8003908:	08003967 	.word	0x08003967
 800390c:	080039a9 	.word	0x080039a9
 8003910:	080039af 	.word	0x080039af
 8003914:	080039af 	.word	0x080039af
 8003918:	080039af 	.word	0x080039af
 800391c:	080039af 	.word	0x080039af
 8003920:	080039af 	.word	0x080039af
 8003924:	080039af 	.word	0x080039af
 8003928:	080039af 	.word	0x080039af
 800392c:	080039af 	.word	0x080039af
 8003930:	080039af 	.word	0x080039af
 8003934:	080039af 	.word	0x080039af
 8003938:	080039af 	.word	0x080039af
 800393c:	080039af 	.word	0x080039af
 8003940:	080039af 	.word	0x080039af
 8003944:	0800395d 	.word	0x0800395d
 8003948:	08003971 	.word	0x08003971
 800394c:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <HAL_GPIO_Init+0x2a4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003952:	e02c      	b.n	80039ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	623b      	str	r3, [r7, #32]
          break;
 800395a:	e029      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	623b      	str	r3, [r7, #32]
          break;
 8003964:	e024      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	3308      	adds	r3, #8
 800396c:	623b      	str	r3, [r7, #32]
          break;
 800396e:	e01f      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	330c      	adds	r3, #12
 8003976:	623b      	str	r3, [r7, #32]
          break;
 8003978:	e01a      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003982:	2304      	movs	r3, #4
 8003984:	623b      	str	r3, [r7, #32]
          break;
 8003986:	e013      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003990:	2308      	movs	r3, #8
 8003992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	611a      	str	r2, [r3, #16]
          break;
 800399a:	e009      	b.n	80039b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800399c:	2308      	movs	r3, #8
 800399e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	615a      	str	r2, [r3, #20]
          break;
 80039a6:	e003      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
          break;
 80039ac:	e000      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          break;
 80039ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2bff      	cmp	r3, #255	; 0xff
 80039b4:	d801      	bhi.n	80039ba <HAL_GPIO_Init+0x13a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	e001      	b.n	80039be <HAL_GPIO_Init+0x13e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2bff      	cmp	r3, #255	; 0xff
 80039c4:	d802      	bhi.n	80039cc <HAL_GPIO_Init+0x14c>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	e002      	b.n	80039d2 <HAL_GPIO_Init+0x152>
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	3b08      	subs	r3, #8
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	210f      	movs	r1, #15
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80c1 	beq.w	8003b82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a00:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_GPIO_Init+0x2a8>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4a48      	ldr	r2, [pc, #288]	; (8003b28 <HAL_GPIO_Init+0x2a8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6193      	str	r3, [r2, #24]
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_GPIO_Init+0x2a8>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a18:	4a44      	ldr	r2, [pc, #272]	; (8003b2c <HAL_GPIO_Init+0x2ac>)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	3302      	adds	r3, #2
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_GPIO_Init+0x2b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01f      	beq.n	8003a84 <HAL_GPIO_Init+0x204>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <HAL_GPIO_Init+0x2b4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d019      	beq.n	8003a80 <HAL_GPIO_Init+0x200>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_GPIO_Init+0x1fc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a39      	ldr	r2, [pc, #228]	; (8003b3c <HAL_GPIO_Init+0x2bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00d      	beq.n	8003a78 <HAL_GPIO_Init+0x1f8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a38      	ldr	r2, [pc, #224]	; (8003b40 <HAL_GPIO_Init+0x2c0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <HAL_GPIO_Init+0x1f4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <HAL_GPIO_Init+0x2c4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_GPIO_Init+0x1f0>
 8003a6c:	2305      	movs	r3, #5
 8003a6e:	e00a      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a70:	2306      	movs	r3, #6
 8003a72:	e008      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a74:	2304      	movs	r3, #4
 8003a76:	e006      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e004      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e002      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_GPIO_Init+0x206>
 8003a84:	2300      	movs	r3, #0
 8003a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a88:	f002 0203 	and.w	r2, r2, #3
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4093      	lsls	r3, r2
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a96:	4925      	ldr	r1, [pc, #148]	; (8003b2c <HAL_GPIO_Init+0x2ac>)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d006      	beq.n	8003abe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	4924      	ldr	r1, [pc, #144]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	4920      	ldr	r1, [pc, #128]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	491a      	ldr	r1, [pc, #104]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60cb      	str	r3, [r1, #12]
 8003ae4:	e006      	b.n	8003af4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	4916      	ldr	r1, [pc, #88]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d025      	beq.n	8003b4c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	4910      	ldr	r1, [pc, #64]	; (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	e025      	b.n	8003b5a <HAL_GPIO_Init+0x2da>
 8003b0e:	bf00      	nop
 8003b10:	10320000 	.word	0x10320000
 8003b14:	10310000 	.word	0x10310000
 8003b18:	10220000 	.word	0x10220000
 8003b1c:	10210000 	.word	0x10210000
 8003b20:	10120000 	.word	0x10120000
 8003b24:	10110000 	.word	0x10110000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40010800 	.word	0x40010800
 8003b34:	40010c00 	.word	0x40010c00
 8003b38:	40011000 	.word	0x40011000
 8003b3c:	40011400 	.word	0x40011400
 8003b40:	40011800 	.word	0x40011800
 8003b44:	40011c00 	.word	0x40011c00
 8003b48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	4913      	ldr	r1, [pc, #76]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	e006      	b.n	8003b82 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	4909      	ldr	r1, [pc, #36]	; (8003ba4 <HAL_GPIO_Init+0x324>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f ae7e 	bne.w	8003894 <HAL_GPIO_Init+0x14>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	372c      	adds	r7, #44	; 0x2c
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	611a      	str	r2, [r3, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43d9      	mvns	r1, r3
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e12b      	b.n	8003e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fccc 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	; 0x24
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c70:	f001 faba 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8003c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a81      	ldr	r2, [pc, #516]	; (8003e80 <HAL_I2C_Init+0x274>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d807      	bhi.n	8003c90 <HAL_I2C_Init+0x84>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a80      	ldr	r2, [pc, #512]	; (8003e84 <HAL_I2C_Init+0x278>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e006      	b.n	8003c9e <HAL_I2C_Init+0x92>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a7d      	ldr	r2, [pc, #500]	; (8003e88 <HAL_I2C_Init+0x27c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0e7      	b.n	8003e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a78      	ldr	r2, [pc, #480]	; (8003e8c <HAL_I2C_Init+0x280>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0c9b      	lsrs	r3, r3, #18
 8003cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_I2C_Init+0x274>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d802      	bhi.n	8003ce0 <HAL_I2C_Init+0xd4>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	e009      	b.n	8003cf4 <HAL_I2C_Init+0xe8>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a69      	ldr	r2, [pc, #420]	; (8003e90 <HAL_I2C_Init+0x284>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	495c      	ldr	r1, [pc, #368]	; (8003e80 <HAL_I2C_Init+0x274>)
 8003d10:	428b      	cmp	r3, r1
 8003d12:	d819      	bhi.n	8003d48 <HAL_I2C_Init+0x13c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e59      	subs	r1, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d28:	400b      	ands	r3, r1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_I2C_Init+0x138>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e59      	subs	r1, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	e051      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e04f      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d111      	bne.n	8003d74 <HAL_I2C_Init+0x168>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e012      	b.n	8003d9a <HAL_I2C_Init+0x18e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Init+0x196>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <HAL_I2C_Init+0x1bc>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	440b      	add	r3, r1
 8003db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	e00f      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	6809      	ldr	r1, [r1, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6911      	ldr	r1, [r2, #16]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	4311      	orrs	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	000186a0 	.word	0x000186a0
 8003e84:	001e847f 	.word	0x001e847f
 8003e88:	003d08ff 	.word	0x003d08ff
 8003e8c:	431bde83 	.word	0x431bde83
 8003e90:	10624dd3 	.word	0x10624dd3

08003e94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eac:	f7fe fdb6 	bl	8002a1c <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f040 824b 	bne.w	8004356 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2319      	movs	r3, #25
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	497f      	ldr	r1, [pc, #508]	; (80040c8 <HAL_I2C_Master_Receive+0x234>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fc4a 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e23e      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_I2C_Master_Receive+0x54>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e237      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d007      	beq.n	8003f0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2222      	movs	r2, #34	; 0x22
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2210      	movs	r2, #16
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	893a      	ldrh	r2, [r7, #8]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <HAL_I2C_Master_Receive+0x238>)
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb36 	bl	80045c8 <I2C_MasterRequestRead>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e1f8      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d113      	bne.n	8003f96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e1cc      	b.n	8004330 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d11e      	bne.n	8003fdc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fae:	b672      	cpsid	i
}
 8003fb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fd8:	b662      	cpsie	i
}
 8003fda:	e035      	b.n	8004048 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11e      	bne.n	8004022 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff4:	b672      	cpsid	i
}
 8003ff6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800401e:	b662      	cpsie	i
}
 8004020:	e012      	b.n	8004048 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004048:	e172      	b.n	8004330 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	2b03      	cmp	r3, #3
 8004050:	f200 811f 	bhi.w	8004292 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	2b01      	cmp	r3, #1
 800405a:	d123      	bne.n	80040a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fc99 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e173      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a2:	e145      	b.n	8004330 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d152      	bne.n	8004152 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	2200      	movs	r2, #0
 80040b4:	4906      	ldr	r1, [pc, #24]	; (80040d0 <HAL_I2C_Master_Receive+0x23c>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fb54 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e148      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
 80040c6:	bf00      	nop
 80040c8:	00100002 	.word	0x00100002
 80040cc:	ffff0000 	.word	0xffff0000
 80040d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040d4:	b672      	cpsid	i
}
 80040d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800411a:	b662      	cpsie	i
}
 800411c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004150:	e0ee      	b.n	8004330 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2200      	movs	r2, #0
 800415a:	4981      	ldr	r1, [pc, #516]	; (8004360 <HAL_I2C_Master_Receive+0x4cc>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fb01 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0f5      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800417c:	b672      	cpsid	i
}
 800417e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	; (8004364 <HAL_I2C_Master_Receive+0x4d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	4a6b      	ldr	r2, [pc, #428]	; (8004368 <HAL_I2C_Master_Receive+0x4d4>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0a1a      	lsrs	r2, r3, #8
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00da      	lsls	r2, r3, #3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d118      	bne.n	800420a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041fa:	b662      	cpsie	i
}
 80041fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0a6      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d1d9      	bne.n	80041cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800425a:	b662      	cpsie	i
}
 800425c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004290:	e04e      	b.n	8004330 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fb7e 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e058      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d124      	bne.n	8004330 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d107      	bne.n	80042fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f ae88 	bne.w	800404a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004356:	2302      	movs	r3, #2
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3728      	adds	r7, #40	; 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	00010004 	.word	0x00010004
 8004364:	20000010 	.word	0x20000010
 8004368:	14f8b589 	.word	0x14f8b589

0800436c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7fe fb4e 	bl	8002a1c <HAL_GetTick>
 8004380:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	f040 8111 	bne.w	80045b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2319      	movs	r3, #25
 800439a:	2201      	movs	r2, #1
 800439c:	4988      	ldr	r1, [pc, #544]	; (80045c0 <HAL_I2C_IsDeviceReady+0x254>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f9e0 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e104      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_IsDeviceReady+0x50>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0fd      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d007      	beq.n	80043e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2224      	movs	r2, #36	; 0x24
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a70      	ldr	r2, [pc, #448]	; (80045c4 <HAL_I2C_IsDeviceReady+0x258>)
 8004404:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f99e 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d103      	bne.n	8004446 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0b6      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004458:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800445a:	f7fe fadf 	bl	8002a1c <HAL_GetTick>
 800445e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800448e:	e025      	b.n	80044dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004490:	f7fe fac4 	bl	8002a1c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <HAL_I2C_IsDeviceReady+0x13a>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	22a0      	movs	r2, #160	; 0xa0
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2ba0      	cmp	r3, #160	; 0xa0
 80044e6:	d005      	beq.n	80044f4 <HAL_I2C_IsDeviceReady+0x188>
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_I2C_IsDeviceReady+0x188>
 80044ee:	7dbb      	ldrb	r3, [r7, #22]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0cd      	beq.n	8004490 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d129      	bne.n	800455e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	2319      	movs	r3, #25
 8004536:	2201      	movs	r2, #1
 8004538:	4921      	ldr	r1, [pc, #132]	; (80045c0 <HAL_I2C_IsDeviceReady+0x254>)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f912 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e036      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e02c      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004576:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2319      	movs	r3, #25
 800457e:	2201      	movs	r2, #1
 8004580:	490f      	ldr	r1, [pc, #60]	; (80045c0 <HAL_I2C_IsDeviceReady+0x254>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f8ee 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e012      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	3301      	adds	r3, #1
 8004596:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	f4ff af32 	bcc.w	8004406 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000

080045c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	460b      	mov	r3, r1
 80045d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d006      	beq.n	8004602 <I2C_MasterRequestRead+0x3a>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d003      	beq.n	8004602 <I2C_MasterRequestRead+0x3a>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004600:	d108      	bne.n	8004614 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e00b      	b.n	800462c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	2b11      	cmp	r3, #17
 800461a:	d107      	bne.n	800462c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f893 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d103      	bne.n	800465c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e079      	b.n	8004754 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004668:	d108      	bne.n	800467c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	611a      	str	r2, [r3, #16]
 800467a:	e05f      	b.n	800473c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800467c:	897b      	ldrh	r3, [r7, #10]
 800467e:	11db      	asrs	r3, r3, #7
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0306 	and.w	r3, r3, #6
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f063 030f 	orn	r3, r3, #15
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4930      	ldr	r1, [pc, #192]	; (800475c <I2C_MasterRequestRead+0x194>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8dc 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e054      	b.n	8004754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046aa:	897b      	ldrh	r3, [r7, #10]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4929      	ldr	r1, [pc, #164]	; (8004760 <I2C_MasterRequestRead+0x198>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f8cc 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e044      	b.n	8004754 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f831 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d103      	bne.n	8004720 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e017      	b.n	8004754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	11db      	asrs	r3, r3, #7
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f063 030e 	orn	r3, r3, #14
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4907      	ldr	r1, [pc, #28]	; (8004760 <I2C_MasterRequestRead+0x198>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f888 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	00010008 	.word	0x00010008
 8004760:	00010002 	.word	0x00010002

08004764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	e048      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d044      	beq.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe f94d 	bl	8002a1c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d139      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10d      	bne.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	e00c      	b.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d116      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e023      	b.n	8004850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d093      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004866:	e071      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d123      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e067      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d041      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fe f8a8 	bl	8002a1c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d136      	bne.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	43da      	mvns	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e021      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10c      	bne.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e00b      	b.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af6d 	bne.w	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a4:	e049      	b.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d119      	bne.n	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e030      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fe f818 	bl	8002a1c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d016      	beq.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e007      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d1ae      	bne.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e272      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8087 	beq.w	8004b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a74:	4b92      	ldr	r3, [pc, #584]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00c      	beq.n	8004a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a80:	4b8f      	ldr	r3, [pc, #572]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d112      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x5e>
 8004a8c:	4b8c      	ldr	r3, [pc, #560]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d10b      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9a:	4b89      	ldr	r3, [pc, #548]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d06c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x12c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d168      	bne.n	8004b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e24c      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x76>
 8004abc:	4b80      	ldr	r3, [pc, #512]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7f      	ldr	r2, [pc, #508]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e02e      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x98>
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7a      	ldr	r2, [pc, #488]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b78      	ldr	r3, [pc, #480]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a77      	ldr	r2, [pc, #476]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e01d      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0xbc>
 8004af6:	4b72      	ldr	r3, [pc, #456]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a71      	ldr	r2, [pc, #452]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b6f      	ldr	r3, [pc, #444]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0xd4>
 8004b10:	4b6b      	ldr	r3, [pc, #428]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b68      	ldr	r3, [pc, #416]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a67      	ldr	r2, [pc, #412]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd ff74 	bl	8002a1c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd ff70 	bl	8002a1c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e200      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xe4>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fd ff60 	bl	8002a1c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fd ff5c 	bl	8002a1c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1ec      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b53      	ldr	r3, [pc, #332]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x10c>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d063      	beq.n	8004c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b9a:	4b49      	ldr	r3, [pc, #292]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x18c>
 8004ba6:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCC_OscConfig+0x176>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1c0      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b3d      	ldr	r3, [pc, #244]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4939      	ldr	r1, [pc, #228]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	e03a      	b.n	8004c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be8:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCC_OscConfig+0x270>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fd ff15 	bl	8002a1c <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7fd ff11 	bl	8002a1c <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e1a1      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4927      	ldr	r1, [pc, #156]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fd fef4 	bl	8002a1c <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c38:	f7fd fef0 	bl	8002a1c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e180      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d03a      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d019      	beq.n	8004c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fd fed4 	bl	8002a1c <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7fd fed0 	bl	8002a1c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e160      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c96:	2001      	movs	r0, #1
 8004c98:	f000 face 	bl	8005238 <RCC_Delay>
 8004c9c:	e01c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca4:	f7fd feba 	bl	8002a1c <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004caa:	e00f      	b.n	8004ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fd feb6 	bl	8002a1c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d908      	bls.n	8004ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e146      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	42420000 	.word	0x42420000
 8004cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ccc:	4b92      	ldr	r3, [pc, #584]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e9      	bne.n	8004cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80a6 	beq.w	8004e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b88      	ldr	r3, [pc, #544]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4a87      	ldr	r2, [pc, #540]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	61d3      	str	r3, [r2, #28]
 8004d02:	4b85      	ldr	r3, [pc, #532]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d12:	4b82      	ldr	r3, [pc, #520]	; (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d118      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	; (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7e      	ldr	r2, [pc, #504]	; (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fe77 	bl	8002a1c <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7fd fe73 	bl	8002a1c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e103      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x4c8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x312>
 8004d58:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4a6e      	ldr	r2, [pc, #440]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6213      	str	r3, [r2, #32]
 8004d64:	e02d      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x334>
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6213      	str	r3, [r2, #32]
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4a66      	ldr	r2, [pc, #408]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6213      	str	r3, [r2, #32]
 8004d86:	e01c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCC_OscConfig+0x356>
 8004d90:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6213      	str	r3, [r2, #32]
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6213      	str	r3, [r2, #32]
 8004da8:	e00b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x36e>
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4a5a      	ldr	r2, [pc, #360]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6213      	str	r3, [r2, #32]
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d015      	beq.n	8004df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fd fe27 	bl	8002a1c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd fe23 	bl	8002a1c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0b1      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x37e>
 8004df4:	e014      	b.n	8004e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fd fe11 	bl	8002a1c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fd fe0d 	bl	8002a1c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e09b      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e26:	4b3c      	ldr	r3, [pc, #240]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d061      	beq.n	8004f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d146      	bne.n	8004ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fd fde1 	bl	8002a1c <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fd fddd 	bl	8002a1c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e06d      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d108      	bne.n	8004e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4921      	ldr	r1, [pc, #132]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a19      	ldr	r1, [r3, #32]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	491b      	ldr	r1, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fd fdb1 	bl	8002a1c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fd fdad 	bl	8002a1c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e03d      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46a>
 8004edc:	e035      	b.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fd9a 	bl	8002a1c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fd fd96 	bl	8002a1c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e026      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x498>
 8004f0a:	e01e      	b.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e019      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_OscConfig+0x500>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0d0      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d910      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b67      	ldr	r3, [pc, #412]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	4965      	ldr	r1, [pc, #404]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b63      	ldr	r3, [pc, #396]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0b8      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb4:	4b59      	ldr	r3, [pc, #356]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fcc:	4b53      	ldr	r3, [pc, #332]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a52      	ldr	r2, [pc, #328]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b50      	ldr	r3, [pc, #320]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	494d      	ldr	r1, [pc, #308]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d040      	beq.n	8005078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d115      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07f      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e073      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	4b3d      	ldr	r3, [pc, #244]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06b      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b39      	ldr	r3, [pc, #228]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4936      	ldr	r1, [pc, #216]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005048:	f7fd fce8 	bl	8002a1c <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fd fce4 	bl	8002a1c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e053      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b2d      	ldr	r3, [pc, #180]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d210      	bcs.n	80050a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 0207 	bic.w	r2, r3, #7
 800508e:	4922      	ldr	r1, [pc, #136]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e032      	b.n	800510e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4916      	ldr	r1, [pc, #88]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	490e      	ldr	r1, [pc, #56]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e6:	f000 f821 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80050ea:	4602      	mov	r2, r0
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	490a      	ldr	r1, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	5ccb      	ldrb	r3, [r1, r3]
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <HAL_RCC_ClockConfig+0x1cc>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1d0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd fc46 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40022000 	.word	0x40022000
 800511c:	40021000 	.word	0x40021000
 8005120:	08007a50 	.word	0x08007a50
 8005124:	20000010 	.word	0x20000010
 8005128:	20000014 	.word	0x20000014

0800512c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d002      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x30>
 8005156:	2b08      	cmp	r3, #8
 8005158:	d003      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x36>
 800515a:	e027      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800515e:	613b      	str	r3, [r7, #16]
      break;
 8005160:	e027      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0c9b      	lsrs	r3, r3, #18
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800516c:	5cd3      	ldrb	r3, [r2, r3]
 800516e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d010      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	0c5b      	lsrs	r3, r3, #17
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a0d      	ldr	r2, [pc, #52]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800518e:	fb03 f202 	mul.w	r2, r3, r2
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e004      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	613b      	str	r3, [r7, #16]
      break;
 80051aa:	e002      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ae:	613b      	str	r3, [r7, #16]
      break;
 80051b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b2:	693b      	ldr	r3, [r7, #16]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	007a1200 	.word	0x007a1200
 80051c8:	08007a68 	.word	0x08007a68
 80051cc:	08007a78 	.word	0x08007a78
 80051d0:	003d0900 	.word	0x003d0900

080051d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	20000010 	.word	0x20000010

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051ec:	f7ff fff2 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4903      	ldr	r1, [pc, #12]	; (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	08007a60 	.word	0x08007a60

08005210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005214:	f7ff ffde 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	0adb      	lsrs	r3, r3, #11
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	; (8005234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	08007a60 	.word	0x08007a60

08005238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <RCC_Delay+0x34>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <RCC_Delay+0x38>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	0a5b      	lsrs	r3, r3, #9
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005254:	bf00      	nop
  }
  while (Delay --);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	60fa      	str	r2, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f9      	bne.n	8005254 <RCC_Delay+0x1c>
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	20000010 	.word	0x20000010
 8005270:	10624dd3 	.word	0x10624dd3

08005274 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d07d      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005294:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a0:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	4a4b      	ldr	r2, [pc, #300]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052aa:	61d3      	str	r3, [r2, #28]
 80052ac:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d118      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c8:	4b43      	ldr	r3, [pc, #268]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a42      	ldr	r2, [pc, #264]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d4:	f7fd fba2 	bl	8002a1c <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	e008      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052dc:	f7fd fb9e 	bl	8002a1c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	; 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e06d      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ee:	4b3a      	ldr	r3, [pc, #232]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052fa:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02e      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d027      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005318:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005328:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800532e:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d014      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533e:	f7fd fb6d 	bl	8002a1c <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fd fb69 	bl	8002a1c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e036      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ee      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4917      	ldr	r1, [pc, #92]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	4313      	orrs	r3, r2
 8005378:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	490b      	ldr	r1, [pc, #44]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40007000 	.word	0x40007000
 80053dc:	42420440 	.word	0x42420440

080053e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e076      	b.n	80054e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d009      	beq.n	8005418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
 800540a:	e005      	b.n	8005418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc fcaa 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0c1a      	lsrs	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f002 0204 	and.w	r2, r2, #4
 80054be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e041      	b.n	800557e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fff6 	bl	8002500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 fe12 	bl	8006150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d001      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e044      	b.n	800562a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <HAL_TIM_Base_Start_IT+0xac>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d018      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <HAL_TIM_Base_Start_IT+0xb0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d00e      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x6c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a18      	ldr	r2, [pc, #96]	; (800563c <HAL_TIM_Base_Start_IT+0xb4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x6c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a16      	ldr	r2, [pc, #88]	; (8005640 <HAL_TIM_Base_Start_IT+0xb8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x6c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a15      	ldr	r2, [pc, #84]	; (8005644 <HAL_TIM_Base_Start_IT+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d111      	bne.n	8005618 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b06      	cmp	r3, #6
 8005604:	d010      	beq.n	8005628 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	e007      	b.n	8005628 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00

08005648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e041      	b.n	80056de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f839 	bl	80056e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f000 fd62 	bl	8006150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start+0x24>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e022      	b.n	8005762 <HAL_TIM_PWM_Start+0x6a>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d109      	bne.n	8005736 <HAL_TIM_PWM_Start+0x3e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e015      	b.n	8005762 <HAL_TIM_PWM_Start+0x6a>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x58>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e008      	b.n	8005762 <HAL_TIM_PWM_Start+0x6a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e072      	b.n	8005850 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0x82>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	e013      	b.n	80057a2 <HAL_TIM_PWM_Start+0xaa>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0x92>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	e00b      	b.n	80057a2 <HAL_TIM_PWM_Start+0xaa>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0xa2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005798:	e003      	b.n	80057a2 <HAL_TIM_PWM_Start+0xaa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 ff8c 	bl	80066c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_TIM_PWM_Start+0x160>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_PWM_Start+0xcc>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a27      	ldr	r2, [pc, #156]	; (800585c <HAL_TIM_PWM_Start+0x164>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_PWM_Start+0xd0>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_TIM_PWM_Start+0xd2>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_TIM_PWM_Start+0x160>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d018      	beq.n	800581a <HAL_TIM_PWM_Start+0x122>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_TIM_PWM_Start+0x164>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_TIM_PWM_Start+0x122>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d00e      	beq.n	800581a <HAL_TIM_PWM_Start+0x122>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <HAL_TIM_PWM_Start+0x168>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_TIM_PWM_Start+0x122>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_TIM_PWM_Start+0x16c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_TIM_PWM_Start+0x122>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a14      	ldr	r2, [pc, #80]	; (8005868 <HAL_TIM_PWM_Start+0x170>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d111      	bne.n	800583e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b06      	cmp	r3, #6
 800582a:	d010      	beq.n	800584e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583c:	e007      	b.n	800584e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40013400 	.word	0x40013400
 8005860:	40000400 	.word	0x40000400
 8005864:	40000800 	.word	0x40000800
 8005868:	40000c00 	.word	0x40000c00

0800586c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <HAL_TIM_PWM_Start_IT+0x28>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e022      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x6e>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d109      	bne.n	80058ae <HAL_TIM_PWM_Start_IT+0x42>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	e015      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x6e>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d109      	bne.n	80058c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e008      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x6e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0bd      	b.n	8005a5e <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Start_IT+0x86>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f0:	e013      	b.n	800591a <HAL_TIM_PWM_Start_IT+0xae>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start_IT+0x96>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005900:	e00b      	b.n	800591a <HAL_TIM_PWM_Start_IT+0xae>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start_IT+0xa6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	e003      	b.n	800591a <HAL_TIM_PWM_Start_IT+0xae>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d841      	bhi.n	80059a4 <HAL_TIM_PWM_Start_IT+0x138>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800595d 	.word	0x0800595d
 800592c:	080059a5 	.word	0x080059a5
 8005930:	080059a5 	.word	0x080059a5
 8005934:	080059a5 	.word	0x080059a5
 8005938:	0800596f 	.word	0x0800596f
 800593c:	080059a5 	.word	0x080059a5
 8005940:	080059a5 	.word	0x080059a5
 8005944:	080059a5 	.word	0x080059a5
 8005948:	08005981 	.word	0x08005981
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059a5 	.word	0x080059a5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	08005993 	.word	0x08005993
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0202 	orr.w	r2, r2, #2
 800596a:	60da      	str	r2, [r3, #12]
      break;
 800596c:	e01d      	b.n	80059aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0204 	orr.w	r2, r2, #4
 800597c:	60da      	str	r2, [r3, #12]
      break;
 800597e:	e014      	b.n	80059aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0208 	orr.w	r2, r2, #8
 800598e:	60da      	str	r2, [r3, #12]
      break;
 8005990:	e00b      	b.n	80059aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0210 	orr.w	r2, r2, #16
 80059a0:	60da      	str	r2, [r3, #12]
      break;
 80059a2:	e002      	b.n	80059aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d155      	bne.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fe85 	bl	80066c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIM_PWM_Start_IT+0x166>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <HAL_TIM_PWM_Start_IT+0x200>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_PWM_Start_IT+0x16a>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_TIM_PWM_Start_IT+0x16c>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d018      	beq.n	8005a28 <HAL_TIM_PWM_Start_IT+0x1bc>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <HAL_TIM_PWM_Start_IT+0x200>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <HAL_TIM_PWM_Start_IT+0x1bc>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a08:	d00e      	beq.n	8005a28 <HAL_TIM_PWM_Start_IT+0x1bc>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <HAL_TIM_PWM_Start_IT+0x204>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d009      	beq.n	8005a28 <HAL_TIM_PWM_Start_IT+0x1bc>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <HAL_TIM_PWM_Start_IT+0x208>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIM_PWM_Start_IT+0x1bc>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_TIM_PWM_Start_IT+0x20c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d111      	bne.n	8005a4c <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d010      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4a:	e007      	b.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00

08005a7c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	d841      	bhi.n	8005b14 <HAL_TIM_PWM_Stop_IT+0x98>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005b15 	.word	0x08005b15
 8005aa0:	08005b15 	.word	0x08005b15
 8005aa4:	08005b15 	.word	0x08005b15
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005b15 	.word	0x08005b15
 8005ab0:	08005b15 	.word	0x08005b15
 8005ab4:	08005b15 	.word	0x08005b15
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	08005b15 	.word	0x08005b15
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005b03 	.word	0x08005b03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0202 	bic.w	r2, r2, #2
 8005ada:	60da      	str	r2, [r3, #12]
      break;
 8005adc:	e01d      	b.n	8005b1a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0204 	bic.w	r2, r2, #4
 8005aec:	60da      	str	r2, [r3, #12]
      break;
 8005aee:	e014      	b.n	8005b1a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0208 	bic.w	r2, r2, #8
 8005afe:	60da      	str	r2, [r3, #12]
      break;
 8005b00:	e00b      	b.n	8005b1a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0210 	bic.w	r2, r2, #16
 8005b10:	60da      	str	r2, [r3, #12]
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d161      	bne.n	8005be4 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fdcd 	bl	80066c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_PWM_Stop_IT+0xca>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d017      	beq.n	8005b7c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a1a      	ldr	r2, [r3, #32]
 8005b52:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10f      	bne.n	8005b7c <HAL_TIM_PWM_Stop_IT+0x100>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	f240 4344 	movw	r3, #1092	; 0x444
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_PWM_Stop_IT+0x100>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <HAL_TIM_PWM_Stop_IT+0x130>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	f240 4344 	movw	r3, #1092	; 0x444
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_PWM_Stop_IT+0x130>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_TIM_PWM_Stop_IT+0x140>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bba:	e013      	b.n	8005be4 <HAL_TIM_PWM_Stop_IT+0x168>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d104      	bne.n	8005bcc <HAL_TIM_PWM_Stop_IT+0x150>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bca:	e00b      	b.n	8005be4 <HAL_TIM_PWM_Stop_IT+0x168>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d104      	bne.n	8005bdc <HAL_TIM_PWM_Stop_IT+0x160>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bda:	e003      	b.n	8005be4 <HAL_TIM_PWM_Stop_IT+0x168>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400

08005bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d122      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d11b      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0202 	mvn.w	r2, #2
 8005c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa76 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa69 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fc f91d 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d122      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0204 	mvn.w	r2, #4
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa4c 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa3f 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fc f8f3 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0208 	mvn.w	r2, #8
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa22 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa15 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fc f8c9 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0210 	mvn.w	r2, #16
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2208      	movs	r2, #8
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9f8 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9eb 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc f89f 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d107      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0201 	mvn.w	r2, #1
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fb fd1b 	bl	80017b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b80      	cmp	r3, #128	; 0x80
 8005d88:	d10e      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d107      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fd7a 	bl	800689c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9b5 	bl	800613e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d10e      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d107      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0220 	mvn.w	r2, #32
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fd45 	bl	800688a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e0ae      	b.n	8005f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	f200 809f 	bhi.w	8005f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005f75 	.word	0x08005f75
 8005e44:	08005f75 	.word	0x08005f75
 8005e48:	08005f75 	.word	0x08005f75
 8005e4c:	08005eb1 	.word	0x08005eb1
 8005e50:	08005f75 	.word	0x08005f75
 8005e54:	08005f75 	.word	0x08005f75
 8005e58:	08005f75 	.word	0x08005f75
 8005e5c:	08005ef3 	.word	0x08005ef3
 8005e60:	08005f75 	.word	0x08005f75
 8005e64:	08005f75 	.word	0x08005f75
 8005e68:	08005f75 	.word	0x08005f75
 8005e6c:	08005f33 	.word	0x08005f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f9e4 	bl	8006244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0204 	bic.w	r2, r2, #4
 8005e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	619a      	str	r2, [r3, #24]
      break;
 8005eae:	e064      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fa34 	bl	8006324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6999      	ldr	r1, [r3, #24]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]
      break;
 8005ef0:	e043      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fa87 	bl	800640c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0208 	orr.w	r2, r2, #8
 8005f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0204 	bic.w	r2, r2, #4
 8005f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69d9      	ldr	r1, [r3, #28]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	61da      	str	r2, [r3, #28]
      break;
 8005f30:	e023      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fadb 	bl	80064f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69d9      	ldr	r1, [r3, #28]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	021a      	lsls	r2, r3, #8
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	61da      	str	r2, [r3, #28]
      break;
 8005f72:	e002      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
      break;
 8005f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0b4      	b.n	8006112 <HAL_TIM_ConfigClockSource+0x186>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe0:	d03e      	beq.n	8006060 <HAL_TIM_ConfigClockSource+0xd4>
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	f200 8087 	bhi.w	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	f000 8086 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x172>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d87f      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff8:	2b70      	cmp	r3, #112	; 0x70
 8005ffa:	d01a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0xa6>
 8005ffc:	2b70      	cmp	r3, #112	; 0x70
 8005ffe:	d87b      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b60      	cmp	r3, #96	; 0x60
 8006002:	d050      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006004:	2b60      	cmp	r3, #96	; 0x60
 8006006:	d877      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b50      	cmp	r3, #80	; 0x50
 800600a:	d03c      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0xfa>
 800600c:	2b50      	cmp	r3, #80	; 0x50
 800600e:	d873      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d058      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d86f      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b30      	cmp	r3, #48	; 0x30
 800601a:	d064      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 800601c:	2b30      	cmp	r3, #48	; 0x30
 800601e:	d86b      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b20      	cmp	r3, #32
 8006022:	d060      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d867      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05c      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 800602c:	2b10      	cmp	r3, #16
 800602e:	d05a      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006030:	e062      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006042:	f000 fb22 	bl	800668a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	609a      	str	r2, [r3, #8]
      break;
 800605e:	e04f      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006070:	f000 fb0b 	bl	800668a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006082:	609a      	str	r2, [r3, #8]
      break;
 8006084:	e03c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	461a      	mov	r2, r3
 8006094:	f000 fa82 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2150      	movs	r1, #80	; 0x50
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fad9 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 80060a4:	e02c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 faa0 	bl	80065f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2160      	movs	r1, #96	; 0x60
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fac9 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 80060c4:	e01c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 fa62 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2140      	movs	r1, #64	; 0x40
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fab9 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 80060e4:	e00c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f000 fab0 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 80060f6:	e003      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
      break;
 80060fc:	e000      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr

0800613e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a33      	ldr	r2, [pc, #204]	; (8006230 <TIM_Base_SetConfig+0xe0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a32      	ldr	r2, [pc, #200]	; (8006234 <TIM_Base_SetConfig+0xe4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00f      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006176:	d00b      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a2f      	ldr	r2, [pc, #188]	; (8006238 <TIM_Base_SetConfig+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2e      	ldr	r2, [pc, #184]	; (800623c <TIM_Base_SetConfig+0xec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <TIM_Base_SetConfig+0xf0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a22      	ldr	r2, [pc, #136]	; (8006230 <TIM_Base_SetConfig+0xe0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <TIM_Base_SetConfig+0x82>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a21      	ldr	r2, [pc, #132]	; (8006234 <TIM_Base_SetConfig+0xe4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00f      	beq.n	80061d2 <TIM_Base_SetConfig+0x82>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d00b      	beq.n	80061d2 <TIM_Base_SetConfig+0x82>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <TIM_Base_SetConfig+0xe8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <TIM_Base_SetConfig+0x82>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <TIM_Base_SetConfig+0xec>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0x82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	; (8006240 <TIM_Base_SetConfig+0xf0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d108      	bne.n	80061e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a09      	ldr	r2, [pc, #36]	; (8006230 <TIM_Base_SetConfig+0xe0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a08      	ldr	r2, [pc, #32]	; (8006234 <TIM_Base_SetConfig+0xe4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d103      	bne.n	8006220 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	615a      	str	r2, [r3, #20]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00

08006244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0201 	bic.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0302 	bic.w	r3, r3, #2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a20      	ldr	r2, [pc, #128]	; (800631c <TIM_OC1_SetConfig+0xd8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC1_SetConfig+0x64>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <TIM_OC1_SetConfig+0xd8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC1_SetConfig+0x8e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a14      	ldr	r2, [pc, #80]	; (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d111      	bne.n	80062f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400

08006324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0210 	bic.w	r2, r3, #16
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0320 	bic.w	r3, r3, #32
 800636e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <TIM_OC2_SetConfig+0xe0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC2_SetConfig+0x68>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a20      	ldr	r2, [pc, #128]	; (8006408 <TIM_OC2_SetConfig+0xe4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10d      	bne.n	80063a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a16      	ldr	r2, [pc, #88]	; (8006404 <TIM_OC2_SetConfig+0xe0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC2_SetConfig+0x94>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <TIM_OC2_SetConfig+0xe4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d113      	bne.n	80063e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	40012c00 	.word	0x40012c00
 8006408:	40013400 	.word	0x40013400

0800640c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a21      	ldr	r2, [pc, #132]	; (80064ec <TIM_OC3_SetConfig+0xe0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_OC3_SetConfig+0x66>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <TIM_OC3_SetConfig+0xe4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d10d      	bne.n	800648e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a16      	ldr	r2, [pc, #88]	; (80064ec <TIM_OC3_SetConfig+0xe0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_OC3_SetConfig+0x92>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <TIM_OC3_SetConfig+0xe4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d113      	bne.n	80064c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400

080064f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800653e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	031b      	lsls	r3, r3, #12
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a11      	ldr	r2, [pc, #68]	; (8006594 <TIM_OC4_SetConfig+0xa0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC4_SetConfig+0x68>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <TIM_OC4_SetConfig+0xa4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d109      	bne.n	8006570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr

080065f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0210 	bic.w	r2, r3, #16
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	031b      	lsls	r3, r3, #12
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006634:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	f043 0307 	orr.w	r3, r3, #7
 8006678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	021a      	lsls	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	609a      	str	r2, [r3, #8]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2201      	movs	r2, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1a      	ldr	r2, [r3, #32]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	401a      	ands	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	431a      	orrs	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e050      	b.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a19      	ldr	r2, [pc, #100]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d00e      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a15      	ldr	r2, [pc, #84]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a14      	ldr	r2, [pc, #80]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10c      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00

080067e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006800:	2302      	movs	r3, #2
 8006802:	e03d      	b.n	8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e042      	b.n	8006946 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fb ff8f 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2224      	movs	r2, #36	; 0x24
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fc80 	bl	80071f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006906:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006916:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006926:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b0ba      	sub	sp, #232	; 0xe8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006976:	2300      	movs	r3, #0
 8006978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800698e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10f      	bne.n	80069b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_UART_IRQHandler+0x66>
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb63 	bl	800707a <UART_Receive_IT>
      return;
 80069b4:	e25b      	b.n	8006e6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80de 	beq.w	8006b7c <HAL_UART_IRQHandler+0x22c>
 80069c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80d1 	beq.w	8006b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <HAL_UART_IRQHandler+0xae>
 80069e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <HAL_UART_IRQHandler+0xd2>
 8006a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	f043 0202 	orr.w	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <HAL_UART_IRQHandler+0xf6>
 8006a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	f043 0204 	orr.w	r2, r3, #4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d011      	beq.n	8006a76 <HAL_UART_IRQHandler+0x126>
 8006a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0208 	orr.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 81f2 	beq.w	8006e64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_UART_IRQHandler+0x14e>
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 faee 	bl	800707a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_UART_IRQHandler+0x17a>
 8006ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d04f      	beq.n	8006b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9f8 	bl	8006ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d041      	beq.n	8006b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3314      	adds	r3, #20
 8006b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1d9      	bne.n	8006ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d013      	beq.n	8006b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	4a7e      	ldr	r2, [pc, #504]	; (8006d30 <HAL_UART_IRQHandler+0x3e0>)
 8006b38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fc fb5a 	bl	80031f8 <HAL_DMA_Abort_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	e00e      	b.n	8006b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f99c 	bl	8006e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	e00a      	b.n	8006b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f998 	bl	8006e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b68:	e006      	b.n	8006b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f994 	bl	8006e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006b76:	e175      	b.n	8006e64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	bf00      	nop
    return;
 8006b7a:	e173      	b.n	8006e64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	f040 814f 	bne.w	8006e24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8a:	f003 0310 	and.w	r3, r3, #16
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8148 	beq.w	8006e24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8141 	beq.w	8006e24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80b6 	beq.w	8006d34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8145 	beq.w	8006e68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006be6:	429a      	cmp	r2, r3
 8006be8:	f080 813e 	bcs.w	8006e68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	f000 8088 	beq.w	8006d10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1d9      	bne.n	8006c00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e1      	bne.n	8006c4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e3      	bne.n	8006c88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce0:	f023 0310 	bic.w	r3, r3, #16
 8006ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cf4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e3      	bne.n	8006cce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc fa38 	bl	8003180 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8bf 	bl	8006eaa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d2c:	e09c      	b.n	8006e68 <HAL_UART_IRQHandler+0x518>
 8006d2e:	bf00      	nop
 8006d30:	08006f85 	.word	0x08006f85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 808e 	beq.w	8006e6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8089 	beq.w	8006e6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e3      	bne.n	8006d5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	623b      	str	r3, [r7, #32]
   return(result);
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006db6:	633a      	str	r2, [r7, #48]	; 0x30
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dfc:	61fa      	str	r2, [r7, #28]
 8006dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e3      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f844 	bl	8006eaa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e22:	e023      	b.n	8006e6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_UART_IRQHandler+0x4f4>
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8b5 	bl	8006fac <UART_Transmit_IT>
    return;
 8006e42:	e014      	b.n	8006e6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <HAL_UART_IRQHandler+0x51e>
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d008      	beq.n	8006e6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8f4 	bl	800704a <UART_EndTransmit_IT>
    return;
 8006e62:	e004      	b.n	8006e6e <HAL_UART_IRQHandler+0x51e>
    return;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e6c:	bf00      	nop
  }
}
 8006e6e:	37e8      	adds	r7, #232	; 0xe8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b095      	sub	sp, #84	; 0x54
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ee8:	643a      	str	r2, [r7, #64]	; 0x40
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3314      	adds	r3, #20
 8006f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3314      	adds	r3, #20
 8006f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d119      	bne.n	8006f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f58:	61ba      	str	r2, [r7, #24]
 8006f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f7a:	bf00      	nop
 8006f7c:	3754      	adds	r7, #84	; 0x54
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ff7a 	bl	8006e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b21      	cmp	r3, #33	; 0x21
 8006fbe:	d13e      	bne.n	800703e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d114      	bne.n	8006ff4 <UART_Transmit_IT+0x48>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d110      	bne.n	8006ff4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]
 8006ff2:	e008      	b.n	8007006 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	1c59      	adds	r1, r3, #1
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6211      	str	r1, [r2, #32]
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29b      	uxth	r3, r3
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4619      	mov	r1, r3
 8007014:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10f      	bne.n	800703a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007028:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007038:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff02 	bl	8006e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b08c      	sub	sp, #48	; 0x30
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b22      	cmp	r3, #34	; 0x22
 800708c:	f040 80ae 	bne.w	80071ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007098:	d117      	bne.n	80070ca <UART_Receive_IT+0x50>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d113      	bne.n	80070ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
 80070c8:	e026      	b.n	8007118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070dc:	d007      	beq.n	80070ee <UART_Receive_IT+0x74>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <UART_Receive_IT+0x82>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e008      	b.n	800710e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007108:	b2da      	uxtb	r2, r3
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4619      	mov	r1, r3
 8007126:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007128:	2b00      	cmp	r3, #0
 800712a:	d15d      	bne.n	80071e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0220 	bic.w	r2, r2, #32
 800713a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800714a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	2b01      	cmp	r3, #1
 8007170:	d135      	bne.n	80071de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	623a      	str	r2, [r7, #32]
 800719a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d10a      	bne.n	80071d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fe67 	bl	8006eaa <HAL_UARTEx_RxEventCallback>
 80071dc:	e002      	b.n	80071e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fe51 	bl	8006e86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e002      	b.n	80071ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007232:	f023 030c 	bic.w	r3, r3, #12
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	430b      	orrs	r3, r1
 800723e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a2c      	ldr	r2, [pc, #176]	; (800730c <UART_SetConfig+0x114>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d103      	bne.n	8007268 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007260:	f7fd ffd6 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	e002      	b.n	800726e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fd ffbe 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800726c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	fbb2 f3f3 	udiv	r3, r2, r3
 8007284:	4a22      	ldr	r2, [pc, #136]	; (8007310 <UART_SetConfig+0x118>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	0119      	lsls	r1, r3, #4
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009a      	lsls	r2, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80072a4:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <UART_SetConfig+0x118>)
 80072a6:	fba3 0302 	umull	r0, r3, r3, r2
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2064      	movs	r0, #100	; 0x64
 80072ae:	fb00 f303 	mul.w	r3, r0, r3
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	3332      	adds	r3, #50	; 0x32
 80072b8:	4a15      	ldr	r2, [pc, #84]	; (8007310 <UART_SetConfig+0x118>)
 80072ba:	fba2 2303 	umull	r2, r3, r2, r3
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c4:	4419      	add	r1, r3
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009a      	lsls	r2, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072dc:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <UART_SetConfig+0x118>)
 80072de:	fba3 0302 	umull	r0, r3, r3, r2
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2064      	movs	r0, #100	; 0x64
 80072e6:	fb00 f303 	mul.w	r3, r0, r3
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	3332      	adds	r3, #50	; 0x32
 80072f0:	4a07      	ldr	r2, [pc, #28]	; (8007310 <UART_SetConfig+0x118>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	440a      	add	r2, r1
 8007302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40013800 	.word	0x40013800
 8007310:	51eb851f 	.word	0x51eb851f

08007314 <memset>:
 8007314:	4603      	mov	r3, r0
 8007316:	4402      	add	r2, r0
 8007318:	4293      	cmp	r3, r2
 800731a:	d100      	bne.n	800731e <memset+0xa>
 800731c:	4770      	bx	lr
 800731e:	f803 1b01 	strb.w	r1, [r3], #1
 8007322:	e7f9      	b.n	8007318 <memset+0x4>

08007324 <__errno>:
 8007324:	4b01      	ldr	r3, [pc, #4]	; (800732c <__errno+0x8>)
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000068 	.word	0x20000068

08007330 <__libc_init_array>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	2600      	movs	r6, #0
 8007334:	4d0c      	ldr	r5, [pc, #48]	; (8007368 <__libc_init_array+0x38>)
 8007336:	4c0d      	ldr	r4, [pc, #52]	; (800736c <__libc_init_array+0x3c>)
 8007338:	1b64      	subs	r4, r4, r5
 800733a:	10a4      	asrs	r4, r4, #2
 800733c:	42a6      	cmp	r6, r4
 800733e:	d109      	bne.n	8007354 <__libc_init_array+0x24>
 8007340:	f000 fb78 	bl	8007a34 <_init>
 8007344:	2600      	movs	r6, #0
 8007346:	4d0a      	ldr	r5, [pc, #40]	; (8007370 <__libc_init_array+0x40>)
 8007348:	4c0a      	ldr	r4, [pc, #40]	; (8007374 <__libc_init_array+0x44>)
 800734a:	1b64      	subs	r4, r4, r5
 800734c:	10a4      	asrs	r4, r4, #2
 800734e:	42a6      	cmp	r6, r4
 8007350:	d105      	bne.n	800735e <__libc_init_array+0x2e>
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	f855 3b04 	ldr.w	r3, [r5], #4
 8007358:	4798      	blx	r3
 800735a:	3601      	adds	r6, #1
 800735c:	e7ee      	b.n	800733c <__libc_init_array+0xc>
 800735e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007362:	4798      	blx	r3
 8007364:	3601      	adds	r6, #1
 8007366:	e7f2      	b.n	800734e <__libc_init_array+0x1e>
 8007368:	08007af0 	.word	0x08007af0
 800736c:	08007af0 	.word	0x08007af0
 8007370:	08007af0 	.word	0x08007af0
 8007374:	08007af4 	.word	0x08007af4

08007378 <atan2>:
 8007378:	f000 b8fe 	b.w	8007578 <__ieee754_atan2>

0800737c <sqrt>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	f000 f81f 	bl	80073c4 <__ieee754_sqrt>
 8007386:	4632      	mov	r2, r6
 8007388:	4604      	mov	r4, r0
 800738a:	460d      	mov	r5, r1
 800738c:	463b      	mov	r3, r7
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7f9 fb9f 	bl	8000ad4 <__aeabi_dcmpun>
 8007396:	b990      	cbnz	r0, 80073be <sqrt+0x42>
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fb70 	bl	8000a84 <__aeabi_dcmplt>
 80073a4:	b158      	cbz	r0, 80073be <sqrt+0x42>
 80073a6:	f7ff ffbd 	bl	8007324 <__errno>
 80073aa:	2321      	movs	r3, #33	; 0x21
 80073ac:	2200      	movs	r2, #0
 80073ae:	6003      	str	r3, [r0, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	f7f9 fa1d 	bl	80007f4 <__aeabi_ddiv>
 80073ba:	4604      	mov	r4, r0
 80073bc:	460d      	mov	r5, r1
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073c4 <__ieee754_sqrt>:
 80073c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007568 <__ieee754_sqrt+0x1a4>
 80073c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80073d0:	460b      	mov	r3, r1
 80073d2:	4606      	mov	r6, r0
 80073d4:	460d      	mov	r5, r1
 80073d6:	460a      	mov	r2, r1
 80073d8:	4604      	mov	r4, r0
 80073da:	d10e      	bne.n	80073fa <__ieee754_sqrt+0x36>
 80073dc:	4602      	mov	r2, r0
 80073de:	f7f9 f8df 	bl	80005a0 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4630      	mov	r0, r6
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f8 ff23 	bl	8000234 <__adddf3>
 80073ee:	4606      	mov	r6, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	4630      	mov	r0, r6
 80073f4:	4629      	mov	r1, r5
 80073f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	2900      	cmp	r1, #0
 80073fc:	dc0d      	bgt.n	800741a <__ieee754_sqrt+0x56>
 80073fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007402:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007406:	d0f4      	beq.n	80073f2 <__ieee754_sqrt+0x2e>
 8007408:	b139      	cbz	r1, 800741a <__ieee754_sqrt+0x56>
 800740a:	4602      	mov	r2, r0
 800740c:	f7f8 ff10 	bl	8000230 <__aeabi_dsub>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	f7f9 f9ee 	bl	80007f4 <__aeabi_ddiv>
 8007418:	e7e9      	b.n	80073ee <__ieee754_sqrt+0x2a>
 800741a:	1512      	asrs	r2, r2, #20
 800741c:	f000 8089 	beq.w	8007532 <__ieee754_sqrt+0x16e>
 8007420:	2500      	movs	r5, #0
 8007422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007426:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800742a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800742e:	07d2      	lsls	r2, r2, #31
 8007430:	bf5c      	itt	pl
 8007432:	005b      	lslpl	r3, r3, #1
 8007434:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007438:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800743c:	bf58      	it	pl
 800743e:	0064      	lslpl	r4, r4, #1
 8007440:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007444:	0062      	lsls	r2, r4, #1
 8007446:	2016      	movs	r0, #22
 8007448:	4629      	mov	r1, r5
 800744a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800744e:	1076      	asrs	r6, r6, #1
 8007450:	190f      	adds	r7, r1, r4
 8007452:	429f      	cmp	r7, r3
 8007454:	bfde      	ittt	le
 8007456:	1bdb      	suble	r3, r3, r7
 8007458:	1939      	addle	r1, r7, r4
 800745a:	192d      	addle	r5, r5, r4
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	3801      	subs	r0, #1
 8007460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007464:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007468:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800746c:	d1f0      	bne.n	8007450 <__ieee754_sqrt+0x8c>
 800746e:	4604      	mov	r4, r0
 8007470:	2720      	movs	r7, #32
 8007472:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007476:	428b      	cmp	r3, r1
 8007478:	eb0c 0e00 	add.w	lr, ip, r0
 800747c:	dc02      	bgt.n	8007484 <__ieee754_sqrt+0xc0>
 800747e:	d113      	bne.n	80074a8 <__ieee754_sqrt+0xe4>
 8007480:	4596      	cmp	lr, r2
 8007482:	d811      	bhi.n	80074a8 <__ieee754_sqrt+0xe4>
 8007484:	f1be 0f00 	cmp.w	lr, #0
 8007488:	eb0e 000c 	add.w	r0, lr, ip
 800748c:	da56      	bge.n	800753c <__ieee754_sqrt+0x178>
 800748e:	2800      	cmp	r0, #0
 8007490:	db54      	blt.n	800753c <__ieee754_sqrt+0x178>
 8007492:	f101 0801 	add.w	r8, r1, #1
 8007496:	1a5b      	subs	r3, r3, r1
 8007498:	4641      	mov	r1, r8
 800749a:	4596      	cmp	lr, r2
 800749c:	bf88      	it	hi
 800749e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80074a2:	eba2 020e 	sub.w	r2, r2, lr
 80074a6:	4464      	add	r4, ip
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	3f01      	subs	r7, #1
 80074ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80074b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80074b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80074b8:	d1dd      	bne.n	8007476 <__ieee754_sqrt+0xb2>
 80074ba:	4313      	orrs	r3, r2
 80074bc:	d01b      	beq.n	80074f6 <__ieee754_sqrt+0x132>
 80074be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800756c <__ieee754_sqrt+0x1a8>
 80074c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007570 <__ieee754_sqrt+0x1ac>
 80074c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80074ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80074ce:	f7f8 feaf 	bl	8000230 <__aeabi_dsub>
 80074d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f9 fadb 	bl	8000a98 <__aeabi_dcmple>
 80074e2:	b140      	cbz	r0, 80074f6 <__ieee754_sqrt+0x132>
 80074e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80074e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80074ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80074f0:	d126      	bne.n	8007540 <__ieee754_sqrt+0x17c>
 80074f2:	463c      	mov	r4, r7
 80074f4:	3501      	adds	r5, #1
 80074f6:	106b      	asrs	r3, r5, #1
 80074f8:	0864      	lsrs	r4, r4, #1
 80074fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074fe:	07ea      	lsls	r2, r5, #31
 8007500:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007504:	bf48      	it	mi
 8007506:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800750a:	4620      	mov	r0, r4
 800750c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007510:	e76d      	b.n	80073ee <__ieee754_sqrt+0x2a>
 8007512:	0ae3      	lsrs	r3, r4, #11
 8007514:	3915      	subs	r1, #21
 8007516:	0564      	lsls	r4, r4, #21
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0fa      	beq.n	8007512 <__ieee754_sqrt+0x14e>
 800751c:	02d8      	lsls	r0, r3, #11
 800751e:	d50a      	bpl.n	8007536 <__ieee754_sqrt+0x172>
 8007520:	f1c2 0020 	rsb	r0, r2, #32
 8007524:	fa24 f000 	lsr.w	r0, r4, r0
 8007528:	1e55      	subs	r5, r2, #1
 800752a:	4094      	lsls	r4, r2
 800752c:	4303      	orrs	r3, r0
 800752e:	1b4a      	subs	r2, r1, r5
 8007530:	e776      	b.n	8007420 <__ieee754_sqrt+0x5c>
 8007532:	4611      	mov	r1, r2
 8007534:	e7f0      	b.n	8007518 <__ieee754_sqrt+0x154>
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	3201      	adds	r2, #1
 800753a:	e7ef      	b.n	800751c <__ieee754_sqrt+0x158>
 800753c:	4688      	mov	r8, r1
 800753e:	e7aa      	b.n	8007496 <__ieee754_sqrt+0xd2>
 8007540:	f7f8 fe78 	bl	8000234 <__adddf3>
 8007544:	e9da 8900 	ldrd	r8, r9, [sl]
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f9 fa98 	bl	8000a84 <__aeabi_dcmplt>
 8007554:	b120      	cbz	r0, 8007560 <__ieee754_sqrt+0x19c>
 8007556:	1ca1      	adds	r1, r4, #2
 8007558:	bf08      	it	eq
 800755a:	3501      	addeq	r5, #1
 800755c:	3402      	adds	r4, #2
 800755e:	e7ca      	b.n	80074f6 <__ieee754_sqrt+0x132>
 8007560:	3401      	adds	r4, #1
 8007562:	f024 0401 	bic.w	r4, r4, #1
 8007566:	e7c6      	b.n	80074f6 <__ieee754_sqrt+0x132>
 8007568:	7ff00000 	.word	0x7ff00000
 800756c:	20000070 	.word	0x20000070
 8007570:	20000078 	.word	0x20000078
 8007574:	00000000 	.word	0x00000000

08007578 <__ieee754_atan2>:
 8007578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	4617      	mov	r7, r2
 800757e:	4692      	mov	sl, r2
 8007580:	4699      	mov	r9, r3
 8007582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007586:	427b      	negs	r3, r7
 8007588:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007708 <__ieee754_atan2+0x190>
 800758c:	433b      	orrs	r3, r7
 800758e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007592:	4543      	cmp	r3, r8
 8007594:	4604      	mov	r4, r0
 8007596:	460d      	mov	r5, r1
 8007598:	d809      	bhi.n	80075ae <__ieee754_atan2+0x36>
 800759a:	4246      	negs	r6, r0
 800759c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075a0:	4306      	orrs	r6, r0
 80075a2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80075a6:	4546      	cmp	r6, r8
 80075a8:	468e      	mov	lr, r1
 80075aa:	4683      	mov	fp, r0
 80075ac:	d908      	bls.n	80075c0 <__ieee754_atan2+0x48>
 80075ae:	4652      	mov	r2, sl
 80075b0:	464b      	mov	r3, r9
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f8 fe3d 	bl	8000234 <__adddf3>
 80075ba:	4604      	mov	r4, r0
 80075bc:	460d      	mov	r5, r1
 80075be:	e019      	b.n	80075f4 <__ieee754_atan2+0x7c>
 80075c0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80075c4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80075c8:	433e      	orrs	r6, r7
 80075ca:	d103      	bne.n	80075d4 <__ieee754_atan2+0x5c>
 80075cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	f000 b8a2 	b.w	8007718 <atan>
 80075d4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80075d8:	f006 0602 	and.w	r6, r6, #2
 80075dc:	ea53 0b0b 	orrs.w	fp, r3, fp
 80075e0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80075e4:	d10a      	bne.n	80075fc <__ieee754_atan2+0x84>
 80075e6:	2e02      	cmp	r6, #2
 80075e8:	d067      	beq.n	80076ba <__ieee754_atan2+0x142>
 80075ea:	2e03      	cmp	r6, #3
 80075ec:	d102      	bne.n	80075f4 <__ieee754_atan2+0x7c>
 80075ee:	a53a      	add	r5, pc, #232	; (adr r5, 80076d8 <__ieee754_atan2+0x160>)
 80075f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	4317      	orrs	r7, r2
 80075fe:	d106      	bne.n	800760e <__ieee754_atan2+0x96>
 8007600:	f1be 0f00 	cmp.w	lr, #0
 8007604:	da64      	bge.n	80076d0 <__ieee754_atan2+0x158>
 8007606:	a536      	add	r5, pc, #216	; (adr r5, 80076e0 <__ieee754_atan2+0x168>)
 8007608:	e9d5 4500 	ldrd	r4, r5, [r5]
 800760c:	e7f2      	b.n	80075f4 <__ieee754_atan2+0x7c>
 800760e:	4542      	cmp	r2, r8
 8007610:	d10f      	bne.n	8007632 <__ieee754_atan2+0xba>
 8007612:	4293      	cmp	r3, r2
 8007614:	f106 36ff 	add.w	r6, r6, #4294967295
 8007618:	d107      	bne.n	800762a <__ieee754_atan2+0xb2>
 800761a:	2e02      	cmp	r6, #2
 800761c:	d851      	bhi.n	80076c2 <__ieee754_atan2+0x14a>
 800761e:	4b3b      	ldr	r3, [pc, #236]	; (800770c <__ieee754_atan2+0x194>)
 8007620:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007624:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007628:	e7e4      	b.n	80075f4 <__ieee754_atan2+0x7c>
 800762a:	2e02      	cmp	r6, #2
 800762c:	d84d      	bhi.n	80076ca <__ieee754_atan2+0x152>
 800762e:	4b38      	ldr	r3, [pc, #224]	; (8007710 <__ieee754_atan2+0x198>)
 8007630:	e7f6      	b.n	8007620 <__ieee754_atan2+0xa8>
 8007632:	4543      	cmp	r3, r8
 8007634:	d0e4      	beq.n	8007600 <__ieee754_atan2+0x88>
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800763c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007640:	da21      	bge.n	8007686 <__ieee754_atan2+0x10e>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	da01      	bge.n	800764c <__ieee754_atan2+0xd4>
 8007648:	323c      	adds	r2, #60	; 0x3c
 800764a:	db20      	blt.n	800768e <__ieee754_atan2+0x116>
 800764c:	4652      	mov	r2, sl
 800764e:	464b      	mov	r3, r9
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f9 f8ce 	bl	80007f4 <__aeabi_ddiv>
 8007658:	f000 f9e8 	bl	8007a2c <fabs>
 800765c:	f000 f85c 	bl	8007718 <atan>
 8007660:	4604      	mov	r4, r0
 8007662:	460d      	mov	r5, r1
 8007664:	2e01      	cmp	r6, #1
 8007666:	d015      	beq.n	8007694 <__ieee754_atan2+0x11c>
 8007668:	2e02      	cmp	r6, #2
 800766a:	d017      	beq.n	800769c <__ieee754_atan2+0x124>
 800766c:	2e00      	cmp	r6, #0
 800766e:	d0c1      	beq.n	80075f4 <__ieee754_atan2+0x7c>
 8007670:	a31d      	add	r3, pc, #116	; (adr r3, 80076e8 <__ieee754_atan2+0x170>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 fdd9 	bl	8000230 <__aeabi_dsub>
 800767e:	a31c      	add	r3, pc, #112	; (adr r3, 80076f0 <__ieee754_atan2+0x178>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	e016      	b.n	80076b4 <__ieee754_atan2+0x13c>
 8007686:	a51c      	add	r5, pc, #112	; (adr r5, 80076f8 <__ieee754_atan2+0x180>)
 8007688:	e9d5 4500 	ldrd	r4, r5, [r5]
 800768c:	e7ea      	b.n	8007664 <__ieee754_atan2+0xec>
 800768e:	2400      	movs	r4, #0
 8007690:	2500      	movs	r5, #0
 8007692:	e7e7      	b.n	8007664 <__ieee754_atan2+0xec>
 8007694:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007698:	461d      	mov	r5, r3
 800769a:	e7ab      	b.n	80075f4 <__ieee754_atan2+0x7c>
 800769c:	a312      	add	r3, pc, #72	; (adr r3, 80076e8 <__ieee754_atan2+0x170>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 fdc3 	bl	8000230 <__aeabi_dsub>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	a110      	add	r1, pc, #64	; (adr r1, 80076f0 <__ieee754_atan2+0x178>)
 80076b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b4:	f7f8 fdbc 	bl	8000230 <__aeabi_dsub>
 80076b8:	e77f      	b.n	80075ba <__ieee754_atan2+0x42>
 80076ba:	a50d      	add	r5, pc, #52	; (adr r5, 80076f0 <__ieee754_atan2+0x178>)
 80076bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076c0:	e798      	b.n	80075f4 <__ieee754_atan2+0x7c>
 80076c2:	a50f      	add	r5, pc, #60	; (adr r5, 8007700 <__ieee754_atan2+0x188>)
 80076c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076c8:	e794      	b.n	80075f4 <__ieee754_atan2+0x7c>
 80076ca:	2400      	movs	r4, #0
 80076cc:	2500      	movs	r5, #0
 80076ce:	e791      	b.n	80075f4 <__ieee754_atan2+0x7c>
 80076d0:	a509      	add	r5, pc, #36	; (adr r5, 80076f8 <__ieee754_atan2+0x180>)
 80076d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076d6:	e78d      	b.n	80075f4 <__ieee754_atan2+0x7c>
 80076d8:	54442d18 	.word	0x54442d18
 80076dc:	c00921fb 	.word	0xc00921fb
 80076e0:	54442d18 	.word	0x54442d18
 80076e4:	bff921fb 	.word	0xbff921fb
 80076e8:	33145c07 	.word	0x33145c07
 80076ec:	3ca1a626 	.word	0x3ca1a626
 80076f0:	54442d18 	.word	0x54442d18
 80076f4:	400921fb 	.word	0x400921fb
 80076f8:	54442d18 	.word	0x54442d18
 80076fc:	3ff921fb 	.word	0x3ff921fb
 8007700:	54442d18 	.word	0x54442d18
 8007704:	3fe921fb 	.word	0x3fe921fb
 8007708:	7ff00000 	.word	0x7ff00000
 800770c:	08007a80 	.word	0x08007a80
 8007710:	08007a98 	.word	0x08007a98
 8007714:	00000000 	.word	0x00000000

08007718 <atan>:
 8007718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	4bb6      	ldr	r3, [pc, #728]	; (80079f8 <atan+0x2e0>)
 800771e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007722:	429e      	cmp	r6, r3
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	468b      	mov	fp, r1
 800772a:	dd17      	ble.n	800775c <atan+0x44>
 800772c:	4bb3      	ldr	r3, [pc, #716]	; (80079fc <atan+0x2e4>)
 800772e:	429e      	cmp	r6, r3
 8007730:	dc01      	bgt.n	8007736 <atan+0x1e>
 8007732:	d109      	bne.n	8007748 <atan+0x30>
 8007734:	b140      	cbz	r0, 8007748 <atan+0x30>
 8007736:	4622      	mov	r2, r4
 8007738:	462b      	mov	r3, r5
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f8 fd79 	bl	8000234 <__adddf3>
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
 8007746:	e005      	b.n	8007754 <atan+0x3c>
 8007748:	f1bb 0f00 	cmp.w	fp, #0
 800774c:	4cac      	ldr	r4, [pc, #688]	; (8007a00 <atan+0x2e8>)
 800774e:	f300 8121 	bgt.w	8007994 <atan+0x27c>
 8007752:	4dac      	ldr	r5, [pc, #688]	; (8007a04 <atan+0x2ec>)
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	4baa      	ldr	r3, [pc, #680]	; (8007a08 <atan+0x2f0>)
 800775e:	429e      	cmp	r6, r3
 8007760:	dc11      	bgt.n	8007786 <atan+0x6e>
 8007762:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007766:	429e      	cmp	r6, r3
 8007768:	dc0a      	bgt.n	8007780 <atan+0x68>
 800776a:	a38b      	add	r3, pc, #556	; (adr r3, 8007998 <atan+0x280>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 fd60 	bl	8000234 <__adddf3>
 8007774:	2200      	movs	r2, #0
 8007776:	4ba5      	ldr	r3, [pc, #660]	; (8007a0c <atan+0x2f4>)
 8007778:	f7f9 f9a2 	bl	8000ac0 <__aeabi_dcmpgt>
 800777c:	2800      	cmp	r0, #0
 800777e:	d1e9      	bne.n	8007754 <atan+0x3c>
 8007780:	f04f 3aff 	mov.w	sl, #4294967295
 8007784:	e027      	b.n	80077d6 <atan+0xbe>
 8007786:	f000 f951 	bl	8007a2c <fabs>
 800778a:	4ba1      	ldr	r3, [pc, #644]	; (8007a10 <atan+0x2f8>)
 800778c:	4604      	mov	r4, r0
 800778e:	429e      	cmp	r6, r3
 8007790:	460d      	mov	r5, r1
 8007792:	f300 80b8 	bgt.w	8007906 <atan+0x1ee>
 8007796:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800779a:	429e      	cmp	r6, r3
 800779c:	f300 809c 	bgt.w	80078d8 <atan+0x1c0>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	f7f8 fd46 	bl	8000234 <__adddf3>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b98      	ldr	r3, [pc, #608]	; (8007a0c <atan+0x2f4>)
 80077ac:	f7f8 fd40 	bl	8000230 <__aeabi_dsub>
 80077b0:	2200      	movs	r2, #0
 80077b2:	4606      	mov	r6, r0
 80077b4:	460f      	mov	r7, r1
 80077b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f8 fd39 	bl	8000234 <__adddf3>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f9 f813 	bl	80007f4 <__aeabi_ddiv>
 80077ce:	f04f 0a00 	mov.w	sl, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	460d      	mov	r5, r1
 80077d6:	4622      	mov	r2, r4
 80077d8:	462b      	mov	r3, r5
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f8 fedf 	bl	80005a0 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4680      	mov	r8, r0
 80077e8:	4689      	mov	r9, r1
 80077ea:	f7f8 fed9 	bl	80005a0 <__aeabi_dmul>
 80077ee:	a36c      	add	r3, pc, #432	; (adr r3, 80079a0 <atan+0x288>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4606      	mov	r6, r0
 80077f6:	460f      	mov	r7, r1
 80077f8:	f7f8 fed2 	bl	80005a0 <__aeabi_dmul>
 80077fc:	a36a      	add	r3, pc, #424	; (adr r3, 80079a8 <atan+0x290>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f7f8 fd17 	bl	8000234 <__adddf3>
 8007806:	4632      	mov	r2, r6
 8007808:	463b      	mov	r3, r7
 800780a:	f7f8 fec9 	bl	80005a0 <__aeabi_dmul>
 800780e:	a368      	add	r3, pc, #416	; (adr r3, 80079b0 <atan+0x298>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fd0e 	bl	8000234 <__adddf3>
 8007818:	4632      	mov	r2, r6
 800781a:	463b      	mov	r3, r7
 800781c:	f7f8 fec0 	bl	80005a0 <__aeabi_dmul>
 8007820:	a365      	add	r3, pc, #404	; (adr r3, 80079b8 <atan+0x2a0>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fd05 	bl	8000234 <__adddf3>
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	f7f8 feb7 	bl	80005a0 <__aeabi_dmul>
 8007832:	a363      	add	r3, pc, #396	; (adr r3, 80079c0 <atan+0x2a8>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fcfc 	bl	8000234 <__adddf3>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f8 feae 	bl	80005a0 <__aeabi_dmul>
 8007844:	a360      	add	r3, pc, #384	; (adr r3, 80079c8 <atan+0x2b0>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fcf3 	bl	8000234 <__adddf3>
 800784e:	4642      	mov	r2, r8
 8007850:	464b      	mov	r3, r9
 8007852:	f7f8 fea5 	bl	80005a0 <__aeabi_dmul>
 8007856:	a35e      	add	r3, pc, #376	; (adr r3, 80079d0 <atan+0x2b8>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f8 fe9c 	bl	80005a0 <__aeabi_dmul>
 8007868:	a35b      	add	r3, pc, #364	; (adr r3, 80079d8 <atan+0x2c0>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fcdf 	bl	8000230 <__aeabi_dsub>
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	f7f8 fe93 	bl	80005a0 <__aeabi_dmul>
 800787a:	a359      	add	r3, pc, #356	; (adr r3, 80079e0 <atan+0x2c8>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f7f8 fcd6 	bl	8000230 <__aeabi_dsub>
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	f7f8 fe8a 	bl	80005a0 <__aeabi_dmul>
 800788c:	a356      	add	r3, pc, #344	; (adr r3, 80079e8 <atan+0x2d0>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 fccd 	bl	8000230 <__aeabi_dsub>
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	f7f8 fe81 	bl	80005a0 <__aeabi_dmul>
 800789e:	a354      	add	r3, pc, #336	; (adr r3, 80079f0 <atan+0x2d8>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fcc4 	bl	8000230 <__aeabi_dsub>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	f7f8 fe78 	bl	80005a0 <__aeabi_dmul>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4640      	mov	r0, r8
 80078b6:	4649      	mov	r1, r9
 80078b8:	f7f8 fcbc 	bl	8000234 <__adddf3>
 80078bc:	4622      	mov	r2, r4
 80078be:	462b      	mov	r3, r5
 80078c0:	f7f8 fe6e 	bl	80005a0 <__aeabi_dmul>
 80078c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	d144      	bne.n	8007958 <atan+0x240>
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fcad 	bl	8000230 <__aeabi_dsub>
 80078d6:	e734      	b.n	8007742 <atan+0x2a>
 80078d8:	2200      	movs	r2, #0
 80078da:	4b4c      	ldr	r3, [pc, #304]	; (8007a0c <atan+0x2f4>)
 80078dc:	f7f8 fca8 	bl	8000230 <__aeabi_dsub>
 80078e0:	2200      	movs	r2, #0
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	4b48      	ldr	r3, [pc, #288]	; (8007a0c <atan+0x2f4>)
 80078ec:	f7f8 fca2 	bl	8000234 <__adddf3>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 ff7c 	bl	80007f4 <__aeabi_ddiv>
 80078fc:	f04f 0a01 	mov.w	sl, #1
 8007900:	4604      	mov	r4, r0
 8007902:	460d      	mov	r5, r1
 8007904:	e767      	b.n	80077d6 <atan+0xbe>
 8007906:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <atan+0x2fc>)
 8007908:	429e      	cmp	r6, r3
 800790a:	da1a      	bge.n	8007942 <atan+0x22a>
 800790c:	2200      	movs	r2, #0
 800790e:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <atan+0x300>)
 8007910:	f7f8 fc8e 	bl	8000230 <__aeabi_dsub>
 8007914:	2200      	movs	r2, #0
 8007916:	4606      	mov	r6, r0
 8007918:	460f      	mov	r7, r1
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	4b3e      	ldr	r3, [pc, #248]	; (8007a18 <atan+0x300>)
 8007920:	f7f8 fe3e 	bl	80005a0 <__aeabi_dmul>
 8007924:	2200      	movs	r2, #0
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <atan+0x2f4>)
 8007928:	f7f8 fc84 	bl	8000234 <__adddf3>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f8 ff5e 	bl	80007f4 <__aeabi_ddiv>
 8007938:	f04f 0a02 	mov.w	sl, #2
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	e749      	b.n	80077d6 <atan+0xbe>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	2000      	movs	r0, #0
 8007948:	4934      	ldr	r1, [pc, #208]	; (8007a1c <atan+0x304>)
 800794a:	f7f8 ff53 	bl	80007f4 <__aeabi_ddiv>
 800794e:	f04f 0a03 	mov.w	sl, #3
 8007952:	4604      	mov	r4, r0
 8007954:	460d      	mov	r5, r1
 8007956:	e73e      	b.n	80077d6 <atan+0xbe>
 8007958:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <atan+0x308>)
 800795a:	4e32      	ldr	r6, [pc, #200]	; (8007a24 <atan+0x30c>)
 800795c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f8 fc64 	bl	8000230 <__aeabi_dsub>
 8007968:	4622      	mov	r2, r4
 800796a:	462b      	mov	r3, r5
 800796c:	f7f8 fc60 	bl	8000230 <__aeabi_dsub>
 8007970:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	e9d6 0100 	ldrd	r0, r1, [r6]
 800797c:	f7f8 fc58 	bl	8000230 <__aeabi_dsub>
 8007980:	f1bb 0f00 	cmp.w	fp, #0
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	f6bf aee4 	bge.w	8007754 <atan+0x3c>
 800798c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007990:	461d      	mov	r5, r3
 8007992:	e6df      	b.n	8007754 <atan+0x3c>
 8007994:	4d24      	ldr	r5, [pc, #144]	; (8007a28 <atan+0x310>)
 8007996:	e6dd      	b.n	8007754 <atan+0x3c>
 8007998:	8800759c 	.word	0x8800759c
 800799c:	7e37e43c 	.word	0x7e37e43c
 80079a0:	e322da11 	.word	0xe322da11
 80079a4:	3f90ad3a 	.word	0x3f90ad3a
 80079a8:	24760deb 	.word	0x24760deb
 80079ac:	3fa97b4b 	.word	0x3fa97b4b
 80079b0:	a0d03d51 	.word	0xa0d03d51
 80079b4:	3fb10d66 	.word	0x3fb10d66
 80079b8:	c54c206e 	.word	0xc54c206e
 80079bc:	3fb745cd 	.word	0x3fb745cd
 80079c0:	920083ff 	.word	0x920083ff
 80079c4:	3fc24924 	.word	0x3fc24924
 80079c8:	5555550d 	.word	0x5555550d
 80079cc:	3fd55555 	.word	0x3fd55555
 80079d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80079d4:	bfa2b444 	.word	0xbfa2b444
 80079d8:	52defd9a 	.word	0x52defd9a
 80079dc:	3fadde2d 	.word	0x3fadde2d
 80079e0:	af749a6d 	.word	0xaf749a6d
 80079e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80079e8:	fe231671 	.word	0xfe231671
 80079ec:	3fbc71c6 	.word	0x3fbc71c6
 80079f0:	9998ebc4 	.word	0x9998ebc4
 80079f4:	3fc99999 	.word	0x3fc99999
 80079f8:	440fffff 	.word	0x440fffff
 80079fc:	7ff00000 	.word	0x7ff00000
 8007a00:	54442d18 	.word	0x54442d18
 8007a04:	bff921fb 	.word	0xbff921fb
 8007a08:	3fdbffff 	.word	0x3fdbffff
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	3ff2ffff 	.word	0x3ff2ffff
 8007a14:	40038000 	.word	0x40038000
 8007a18:	3ff80000 	.word	0x3ff80000
 8007a1c:	bff00000 	.word	0xbff00000
 8007a20:	08007ad0 	.word	0x08007ad0
 8007a24:	08007ab0 	.word	0x08007ab0
 8007a28:	3ff921fb 	.word	0x3ff921fb

08007a2c <fabs>:
 8007a2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a30:	4619      	mov	r1, r3
 8007a32:	4770      	bx	lr

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
